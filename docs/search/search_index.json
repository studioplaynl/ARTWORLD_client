{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Using MkDocs for ARTWORLD documentation","text":"<p>The ARTWORLD project repository</p> <p>How to deploy ARTWORLD</p>"},{"location":"#why-mkdocs","title":"Why MkDocs?","text":"<p>Advantages:</p> <ul> <li>Auto generation of navigation based on folder structure.</li> <li>Easy theming</li> <li>Use of markdown and yml</li> </ul> <p>Small gotchas:</p> <ul> <li>there is a docs_files_md folder that has the 'raw' md files and folders</li> <li>the 'docs' folder is generated bij de 'mkdocs build' command</li> <li>so editing takes place in VSCODE and not directly on Github, but this can also be seen as an advantage</li> </ul> <p>Todo:</p> <ul> <li>add 'mkdocs build' to the npm run dev script</li> </ul>"},{"location":"#what-is-in-the-docs","title":"What is in the docs?","text":"<ol> <li>Implementation: notes about the implementation of functions</li> <li>Research notes: reminders on how to do things</li> <li>Features: ideas for new features, logs of features that are implemented</li> <li>Bug: found, fixing and done. Serves also as a log </li> </ol> <p>Todo:</p> <ul> <li>Feature List per Release of ARTWORLD</li> </ul> <p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <p>Formatting</p>"},{"location":"#highlighting","title":"Highlighting","text":"<p>When Critic is enabled, Critic Markup can be used, which adds the ability to highlight suggested changes, as well as add inline comments to a document:</p> <p>Text with suggested changes</p> <p>Text can be deleted and replacement text added. This can also be combined into onea single operation. Highlighting is also possible and comments can be added inline.</p> <p>Formatting can also be applied to blocks by putting the opening and closing tags on separate lines and adding new lines between the tags and the content.</p> <p>Text can be deleted and replacement text added. This can also be combined into onea single operation. Highlighting is also possible and comments can be added inline.</p> <p>Formatting can also be applied to blocks by putting the opening and closing tags on separate lines and adding new lines between the tags and the content.</p>"},{"location":"#highlighting-text","title":"Highlighting text","text":"<p>When Caret, Mark &amp; Tilde are enabled, text can be highlighted with a simple syntax, which is more convenient that directly using the corresponding mark, ins and del HTML tags:</p> <p>Text with highlighting</p> <ul> <li>This was marked</li> <li>This was inserted</li> <li>This was deleted</li> </ul>"},{"location":"#sub-and-superscripts","title":"Sub- and superscripts","text":"<p>When Caret &amp; Tilde are enabled, text can be sub- and superscripted with a simple syntax, which is more convenient than directly using the corresponding sub and sup HTML tags:</p> <p>Text with sub- and superscripts</p> <ul> <li>H<sub>2</sub>O</li> <li>A<sup>T</sup>A</li> </ul>"},{"location":"#diagrams","title":"Diagrams","text":""},{"location":"#data-tables","title":"Data tables","text":"bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Samenvatting</p> <p>Dit is de samenvatting, hoe lang kan deze tekst zijn? Ik bedoel: hoe werkt de line formatting? Gaat dat vanzelf?</p> <p>Ja dat gaat vanzelf!</p>"},{"location":"0-devlog/1-List-of-tasks/","title":"1 List of tasks","text":"<p>UPGRADE PHASER with Fabric</p> <p>Fabric with eraser breaks</p> <p>Possible solution: </p> <ul> <li> <p>https://github.com/fabricjs/fabric.js/issues/7171</p> </li> <li> <p>https://www.npmjs.com/package/fabric-with-erasing</p> </li> </ul> <p>826 van-der-glaskunstlab kinderen-4-t-m-12-amif 55210352 - KUNSTLAB DIGITAAL </p> Implementeren ontwerp uren Amersfoort implementeren Max' ontwerp 3,6u Middelburg implementeren Max' ontwerp 3,6u Cranendonckimplementeren Max' ontwerp 3,6u Katwijkimplementeren Max' ontwerp 3,6u Gilze implementeren Max' ontwerp 3,6u Beginwereld duidelijker maken 5u Beginwereld aanpassen 8u 3D dierentuin en bloementuin plaatsen 10u Interieur huis uren Huis inrichten 34u Navigatie UI uren Duidelijk maken in de werelden waar je bent 20u Navigatie bar aanpassen 6u Teken APP uren Tekenapp opschonen 12u Nieuwe tekening maken. weg in de tekenapp 6u Oplossen pipet bug 4u pijltje terug in tekening- en stopmotion app 1u Player uren Avatar kan in interactie een beweging maken 12u ItemsBar Notifications uren Meldingen kenbaar maken in itemsbar als je post of een like of vriendschapsverzoek hebt 20u Update Phaser uren update de game engine 10u Divers uren overleg en afstemming 2u documentatie en oplevering overleg 4u <p>Toelichting op design: docs.google</p> <p>Link naar overzicht starten ARTWORLD:</p> <p>design.penpot</p>"},{"location":"0-devlog/2-devlog/","title":"2 devlog","text":""},{"location":"0-devlog/2-devlog/#dev-log","title":"Dev log","text":""},{"location":"0-devlog/2-devlog/#2024-01-25","title":"2024-01-25","text":"<ul> <li>Add 3 worlds to /main TODO</li> <li>after adding 3 new worlds main will be stored in /main1.6 branch</li> </ul>"},{"location":"0-devlog/2-devlog/#2024-01-20","title":"2024-01-20","text":"<ul> <li>Last working branch is now /main branch.</li> <li>The /dev branch is the 'update phaser to 3.70.0' branch (under construction).</li> <li>Added MkDocs and consolidated all documentation, notes and todo's in there.</li> <li>Updates the README.md, also links to the docs.</li> </ul> <p>TODO: - continue from Phaser 3.70.0</p>"},{"location":"0-devlog/2-devlog/#2023-10-04","title":"2023-10-04","text":"<ul> <li>Added animation to send button in sendTo to show user the last button.</li> <li> <p>Added greyscale to the first icon in sendTo when the pane is open (maybe not neccessary)</p> </li> <li> <p>version of the app is generated on 'npm run dev' -&gt; the version.js script makes a version_dev.js file with the date and time</p> </li> </ul>"},{"location":"0-devlog/2-devlog/#okt-3-2023","title":"okt 3 2023","text":"<p>to create the best looking, smallest png files with transparency, in a terminal, in the correct directory: pngquant 64 --force --skip-if-larger *.png</p>"},{"location":"0-devlog/2-devlog/#okt-2-2023","title":"okt 2 2023","text":"<ul> <li>refactored downloadDrawingDefaultUserHome in serverCall with resolveLoadError name (type)</li> <li>made flow for Liked</li> </ul> <p>Todo before LIVE - fix bug with moderator seeing artworks - add avatar and house to apps with a nice view - add music apps to </p> <p>bug restoring from trash: work is shown as visible but is not set to visible</p> <p>store.updateState(row, OBJECT_STATE_REGULAR);</p> <pre><code>updateState: (row, state) =&gt; {\n  const {\n    collection, key, value, user_id,\n  } = row;\n\n  // Update on server\n  value.status = state;\n  const pub = false;\n  updateObject(collection, key, value, pub, user_id);\n\n  // Update store\n  store.update((artworks) =&gt; {\n    const artworksToUpdate = artworks;\n    const artworkIndex = artworks.findIndex((i) =&gt; i.key === key);\n    if (artworkIndex) {\n      artworksToUpdate[artworkIndex].value.status = state;\n    }\n    return [...artworksToUpdate];\n  });\n},\n</code></pre> <p>updateState is restoreFromTrash and  const pub = should be true</p> <p>Fixed.</p> <p>For now: visibilityToggle.svelte is used for inGame toggling,  TODO: CHECK workings of adminpage!</p> <p>Feature: direct participation in Challenge =&gt; a plus button</p> <ul> <li>added a plus button for ChallengeAnimal and ChallengeFlower</li> <li>added a reload button for both scenes</li> </ul> <p>Feature: reload button in animal and flower garden. Wanted to do reload 'better' but restarting the scene does what it needs to do.</p> <p>The flow of downloading the assets and later manage them needs to be improved</p> <ul> <li>Added Avatar and House selector in the AppsGroup</li> </ul>"},{"location":"0-devlog/2-devlog/#-fixed-the-icons-size","title":"- fixed the icons size","text":""},{"location":"0-devlog/2-devlog/#deployed-develop-to-betaworld-to-do-testing-with-the-form-and-slow-laptops-ipads","title":"Deployed Develop To BetaWorld to do testing with the form and slow laptops, iPads","text":"<p>drawing does not update in house, it does show in drawing app downloadDrawingDefaultUserHome</p> <p>we look at if the key already exists, which it does because there is no more versioning!</p> <p>Option 1: turn versioning back on in name only advantage: the key gets updated everywhere and redownloaded older drawings are openened and saved correcty</p> <p>Option 2: turn on versioning completely</p> <p>disadvantage: more storage</p> <p>Option 3: Redownload always in HOUSE disadvantage: download usage, old drawings are not fixed</p> <p>Option 4: add update_time to image key in Phaser, so it is new when it is updated</p> <p>Option 5: Loading as before but when it already exists check update_time</p> <p>-- Try Option 1</p>"},{"location":"0-devlog/2-devlog/#apploadersvelte","title":"Apploader.svelte","text":"<pre><code>if (andClose) {\n        if (currentFile.loaded) {\n          const tempValue = {\n            displayname: displayName,\n            url: currentFile.awsUrl,\n            version: '0',\n          };\n          const userID = currentFile.user_id;\n</code></pre>"},{"location":"0-devlog/2-devlog/#servercalljs","title":"ServerCall.js","text":"<pre><code>collection: \"stopmotion\"\ndownloaded: true\nkey: \"2023-03-01T21_14_35_PaarsOcelot\"\npermission_read: 2\nread: 2\nupdate_time: \"2023-03-01T22:15:55.578131+01:00\"\nuser_id: \"e9e54b8b-ff65-45b3-9ccd-56473812b9b3\"\nusername: \"user576\"\nvalue: \n  displayname: \"PaarsOcelot\"\n  url: \"stopmotion/e9e54b8b-ff65-45b3-9ccd-56473812b9b3/0_2023-03-01T21_14_35_PaarsOcelot.png\"\n  version: 0\n</code></pre>"},{"location":"0-devlog/2-devlog/#the-preview-convertimage-does-not-get-updated-in-time-the-only-fix-is-to-save-a-new-verion-other-option-is-to-not-use-convertimage-and-store-some-smaller-versions-on-aws-s3","title":"The preview (convertImage) does not get updated in time. The only fix is to save a new verion. Other option is to not use convertImage and store some smaller versions on AWS S3","text":"<p>Try Option 4</p> <p>Changed downloadDrawingDefaultUserHome, stopmotion </p> <pre><code>downloadArtwork function\ncreateDrawingContainer function\nimageKeyUrl = element.update_time + element.key;\n</code></pre> <p>stopmotions are loading right, and there is a fix for the likes (load the likes with the old name which is the url test if it also loads updates art in HOUSE</p> <p>It doesn't update the drawing in house!</p> <pre><code>awsUrl: \"drawing/5264dc23-a339-40db-bb84-e0849ded4e68/0_1649534848571_paarsBull-kikker.png\"\ndisplayName: \"paarsBullkikker\"\nframes: 1\nkey: \"1649534848571_paarsBull-kikker\"\nloaded: true\n\nnew: false\nstatus: 2\ntype: \"drawing\"\nurl: \"https://artworld01.s3.eu-central-1.amazonaws.com/drawing/5264dc23-a339-40db-bb84-e0849ded4e68/0_1649534848571_paarsBull-kikker.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIA3VY3XUKP6SYAM4OK%2F20230928%2Feu-central-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20230928T150453Z&amp;X-Amz-Expires=86400&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=d4ded1f5364a71fbd5afdeab5e164045772c18b056a53a9822773554db497cf1\"\nuserId: \"5264dc23-a339-40db-bb84-e0849ded4e68\"\n</code></pre> <p>new drawing, updated twice</p> <pre><code>awsUrl: \"drawing/5264dc23-a339-40db-bb84-e0849ded4e68/0_2023-09-28T15_05_47_GrijsMus.png\"\ndisplayName: \"GrijsMus\"\nframes: 1\nkey: \"2023-09-28T15_05_47_GrijsMus\"\nloaded: true\nnew: false\nstatus: 2\ntype: \"drawing\"\nurl: \"https://artworld01.s3.eu-central-1.amazonaws.com/drawing/5264dc23-a339-40db-bb84-e0849ded4e68/0_2023-09-28T15_05_47_GrijsMus.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIA3VY3XUKP6SYAM4OK%2F20230928%2Feu-central-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20230928T150844Z&amp;X-Amz-Expires=86400&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=03c5948d323e1f468fbe4b40cb85974dca8f049504e0c8c618757de56099d70d\"\nuserId: \"5264dc23-a339-40db-bb84-e0849ded4e68\"\n</code></pre> <p>downloadArtwork </p> <pre><code>imageKey, element.update_time:  2023-09-28T17:13:55.238271+02:002023-09-28T15_05_47_GrijsMus 2023-09-28T17:13:55.238271+02:00\n</code></pre> <p>updates to</p> <pre><code>downloadArtwork imageKey, element.update_time:  2023-09-28T17:21:05.381767+02:002023-09-28T15_05_47_GrijsMus 2023-09-28T17:21:05.381767+02:00\n</code></pre> <p>but I don't get the latest image</p> <p>Ah I get it: getting the raw data gives the latest, but with convertImage we get an old one I am not getting the old one with convertImage, but the new one does not get loaded!</p> <p>convertImage does not seem to be updating always to the latest version here is a setting: https://repost.aws/questions/QUvFRJMgIvQqCi7fN-q5ubww/are-resized-images-served-with-cloudfront-and-resized-with-lambda-edge-cached</p> <p>Getting the image as is is the latest version, but also 10x download size.</p> <p>what is this: https://github.com/sagidM/s3-resizer ?</p> <p>convertImage is not fast enough with updating</p> <p>Easier solution: Always save small version on aws, that we get directly. So original is 2048x2048 -&gt; 512x512 150x150 50x50 versions? See what the difference in size and quality is. Something that automatically runs pngquant on the small versions would be great!</p>"},{"location":"0-devlog/2-devlog/#-have-put-more-test-in-form-and-run-tests-again","title":"- have put more test in form and run tests again","text":"<p>updateObjectAdmin does not update visibility Also in NakamaHelpers.updateObject there is a check for admin or moderator, making it impossible for an admin or moderator to use the non admin function</p>"},{"location":"0-devlog/2-devlog/#doto-follow-up-on-state-of-visibility-and-admin-moderator","title":"DOTO: FOLLOW UP on state of visibility and admin/ moderator","text":"<ul> <li>Added LikedBalloon to every scene</li> <li>Place user in a house when click on likeBalloonArtwork</li> </ul>"},{"location":"0-devlog/2-devlog/#todo-centralise-some-commonly-used-functions","title":"TODO CENTRALISE SOME COMMONLY USED FUNCTIONS","text":""},{"location":"0-devlog/2-devlog/#bringing-a-player-next-to-other-players-home","title":"Bringing a player next to other players home:","text":"<pre><code>// get user account\nconst friendAccount = await getAccount(row.user.id);\n// in the friendAccount.meta:\n// metadata.Azc\nconst friendHomeLocation = friendAccount.metadata.Azc;\n// get home object of friend to get pos of that home\nconst friendHome = await getObject('home', friendHomeLocation, row.user.id);\n\nPlayerLocation.set({\n  scene: friendHomeLocation,\n});\n\n// check if there is posX and posY from the home object\nif (typeof friendHome.value.posX !== 'undefined' &amp;&amp; typeof friendHome.value.posY !== 'undefined') {\n  // place user next to nameplate of home\n  const playerPosX = friendHome.value.posX - 80;\n  const playerPosY = friendHome.value.posY - 100;\n\n  PlayerUpdate.set({ forceHistoryReplace: false });\n  PlayerPos.set({\n    x: playerPosX,\n    y: playerPosY,\n  });\n} else {\n  // if there was no posX and y from home object\n  PlayerUpdate.set({ forceHistoryReplace: false });\n  PlayerPos.set({\n    x: -80,\n    y: -100,\n  });\n}\n</code></pre>"},{"location":"0-devlog/2-devlog/#make-animations-from-spritesheets","title":"make animations from spritesheets","text":"<pre><code>// dlog('STOPMOTION element, index, artSize, artMargin', element, index, artSize, artMargin);\nconst avatar = scene.textures.get(imageKeyUrl);\n// eslint-disable-next-line no-underscore-dangle\nconst avatarWidth = avatar.frames.__BASE.width;\n// dlog('stopmotion width: ', avatarWidth);\n\n// eslint-disable-next-line no-underscore-dangle\nconst avatarHeight = avatar.frames.__BASE.height;\n// dlog(`stopmotion Height: ${avatarHeight}`);\n\nconst avatarFrames = Math.round(avatarWidth / avatarHeight);\nlet setFrameRate = 0;\nif (avatarFrames &gt; 1) { setFrameRate = (avatarFrames); } else {\n  setFrameRate = 0;\n}\n// dlog(`stopmotion Frames: ${avatarFrames}`);\n\n// animation for the stopmotion .........................\nscene.anims.create({\n  key: `moving_${imageKeyUrl}`,\n  frames: scene.anims.generateFrameNumbers(imageKeyUrl, {\n    start: 0,\n    end: avatarFrames - 1,\n  }),\n  frameRate: setFrameRate,\n  repeat: -1,\n  yoyo: false,\n});\n\nscene.anims.create({\n  key: `stop_${imageKeyUrl}`,\n  frames: scene.anims.generateFrameNumbers(imageKeyUrl, {\n    start: 0,\n    end: 0,\n  }),\n});\n\ncompletedImage.setData('playAnim', `moving_${imageKeyUrl}`);\ncompletedImage.setData('stopAnim', `stop_${imageKeyUrl}`);\nif (avatarFrames &gt; 1) {\n  completedImage.play(`moving_${imageKeyUrl}`);\n}\n</code></pre>"},{"location":"0-devlog/2-devlog/#june-9-2023","title":"June 9 2023","text":"<p>Code cleanup AVATAR_BASE_SIZE from constants.js</p> <p>Clicking friend in itemsBar takes you inside the friends home in the correct position. Should we be taken next to the house though?</p> <p>MailBox: ArtMail: clicking it, takes us to the home of the sender where the art is.  (one problem: when the art work is hidden? =&gt; so should this be opening the artwork?  TODO: opening the artwork of a artmail (the bug that happenend has to do with stopmotions are being opened as drawings)) </p> <p>MailBox: Liked Art: clicking the user that liked the artwork, takes player to that users home, clicking your own artwork does nothing... TODO: implement previews of stopmototions</p>"},{"location":"0-devlog/2-devlog/#june-7-2023","title":"June 7 2023","text":"<p>Fixed the bug that kept the location of the last user logged in and passed it on to the next user</p> <p>Fixed the bug that when a position is set on a player, that the history is not always replaced when needed</p> <p>Fixed the bug that the moving animation was too long when moving by dragging and causing a late update of the players position in the url, history and on the network</p>"},{"location":"0-devlog/2-devlog/#june-6-2023","title":"June 6 2023","text":"<ul> <li>In DebugFunctions made a function to print out all active scenes. To be able to see which scenes are running at a given moment (activate Edit Mode first with SHIFT-ALT-E-F)</li> </ul> <p>trying to find the cause of the bug that the server location is not loaded</p>"},{"location":"0-devlog/2-devlog/#may-30-2023","title":"May 30 2023","text":"<ul> <li>Switching a Player to a different Location (scene) and placing them in a position in that scene was giving a bug with going back in the DefaultUserHome. Seems to be solved by not setting a x, y on the player when creating it in DefaultUserHome, only after loading the avatar of the player, we do PlayerPos.set(x,y) This is a patch solution, as it only works in the case of DefaultUserHome (because we can set the player in a fixed position there), but when we place a player ad hoc going to a new location the system fails:<ul> <li>Can we also place the player by giving a x, y when loading in the avatar with Player.loadPlayerAvatar(this, x, y);?</li> </ul> </li> <li> <p>The general way to place a player in a location is: </p> <p>PlayerPos.set({   x: 0,   y: 0, });</p> <p>PlayerLocation.set({   scene: DEFAULT_SCENE, });</p> <p>and then in the scene load the player with:</p> <p>this.player = new PlayerDefault(   this,   artworldToPhaser2DX(this.worldSize.x, get(PlayerPos).x),   artworldToPhaser2DY(this.worldSize.y, get(PlayerPos).y),   ManageSession.playerAvatarPlaceholder, ).setDepth(201);</p> <ul> <li> <p>but when we do this and go back from the house, we are not put in the last position in the previous location, we are taken back to the pos of the home. Looking at the push history, we see that the x, y of the previous location is replaced with the x,y of the home It seems to happen because pos is set before location, then a replace is acted upon</p> </li> <li> <p>if we do first PlayLocation.set and then PlayerPos.set, we are taken back to the first position in the location</p> </li> </ul> <p>** !! The solution maybe is to have a flag on setting the position (eg 'newLocation') so the system knows not the replace the pos on the current location, and setting it for the Location we a going to.</p> <p>** !! also: solve the delay in the moving animation, after it the position of the player is stored (replaced), if a player moves into an other location, the previous location is not stored correctly... </p> </li> </ul>"},{"location":"0-devlog/2-devlog/#july-25-2022","title":"July 25 2022","text":"<p>VRAGEN</p> <ul> <li> <p>Elke scene heeft een aantal variabelen die niet worden gebruikt, maar wel overal staan. Zoals 'this.currentOnlinePlayer', 'this.offlineOnlineUsers' Wat te doen hiermee?</p> </li> <li> <p>Kleuren die gezet zijn voor REX UI, kan weg?</p> </li> <li> <p>REX UI this.data -&gt; conflict met Phaser?</p> </li> <li> <p>Jsdoc doorvoeren?</p> </li> </ul>"},{"location":"0-devlog/2-devlog/#gameclass","title":"game/class","text":"<ul> <li> <p>ArtworkList.js --&gt; Kan niet vinden waar getImages wordt aangeroepen, maar er zit wel veel in. Idem voor andere functies. Wordt dit niet (meer) gebruikt?</p> </li> <li> <p>Achievements.js is leeg. </p> </li> <li> <p>CurveWithHandles.js, Background.js zijn herhalingen van andere code. Why?</p> </li> <li> <p>HistoryTracker onDestroy en get from svelte.. Should go?</p> </li> <li> <p>ServerCall.js --&gt; Wordt dit wel gebruikt? Aantal functies omgezet naar static maar worden nergens uberhaupt aangeroepen</p> </li> </ul>"},{"location":"0-devlog/2-devlog/#july-26-2022","title":"July 26 2022","text":""},{"location":"0-devlog/2-devlog/#player-defaultplayer-classes","title":"Player &amp; DefaultPlayer classes","text":"<ul> <li>De classes verwijzen naar scene.player ipv naar zichzelf (this)</li> <li>Overal setters &amp; getters gebruiken is netter (in elk geval Player &amp; DefaultPlayer) </li> <li> <p>Revisit logica hier, misschien samenvoegen? (@maarten @eelke)</p> </li> <li> <p>HistoryTracker onder de loep nemen (@maarten)</p> </li> <li>ServerCall functies los exporteren? (@eelke)</li> <li>ServerCall resolveLoadError naar UIScene (aangezien deze scene permanent is)</li> </ul>"},{"location":"0-devlog/2-devlog/#july-27-2022","title":"July 27 2022","text":""},{"location":"0-devlog/2-devlog/#svelte-time","title":"Svelte time!","text":"<ul> <li>Upload.svelte --&gt; Er wordt alleen op extensie gecontroleerd, niet op MIME-type, content etc. ONVEILIG? ZIe https://stackoverflow.com/questions/18299806/how-to-check-file-mime-type-with-javascript-before-upload</li> </ul>"},{"location":"0-devlog/2-devlog/#css","title":"CSS","text":"<ul> <li> <p>Global styles voor hr bijvoorbeeld, staan in kleine componenten. Global.css is er ook, maar staat daar niet in.</p> </li> <li> <p>QR COde moet GEEN username/password combo bevatten, onveilig</p> </li> <li> <p>QR Code redirect moet niet op window.location.host checken, want werkt niet lokaal. </p> </li> <li> <p>TODO @eelke Update formulier validation (reactive) dynamische css styles toevoegen</p> </li> <li> <p>parser.parse error? Wat, hoe, waar?</p> </li> </ul>"},{"location":"0-devlog/2-devlog/#july-29-2022","title":"July 29 2022","text":"<ul> <li>Logging (dlog) stack trace @eelke \u2714\ufe0f</li> </ul>"},{"location":"0-devlog/2-devlog/#august-19-2022","title":"August 19 2022","text":"<p>@Maarten dragging in DefaultHome gaat niet lekker.</p>"},{"location":"0-devlog/2-devlog/#aug-29-2022","title":"Aug 29 2022","text":"<ul> <li>Probably we need to group all objects in a single frame group (currentObject into a group) So we can delete a group as a whole when removing a frame. </li> </ul>"},{"location":"0-devlog/3-LOG-release-notes/","title":"3 LOG release notes","text":"<p>1.7</p> <p>1.6</p> <p>Adding 3 more worlds</p> <p>1.5</p> <p>1.4</p> <p>1.3</p> <p>1.2   Chip: rewriting saving artworks without json (saves size), png preview model</p> <p>Maarten: when png rewrite is done: auto reload avatar player.   rewrite auto reload player: log off/ log in room: network players also get updated</p> <p>Maarten: rewrite server object handling</p>"},{"location":"1-implementation/Avatar/","title":"Avatar","text":"<p>avatars are being saved as 64x64 pixels and the url gets placed in users profile under avatar. the json file still gets saved as 2048x2048, every extra frame adds 2048 pixels to the width of the image.</p> <p>So for the future:</p> <p>save avatars in a storage objects and when chosen, convert to correct size and save in avatar url on profile storage object contains: </p> <ul> <li>frames</li> <li>png url</li> <li>json url</li> <li>version</li> </ul> <p>convert image function, split x and y sizing for adaptive scaling</p>"},{"location":"1-implementation/BetaWorld/","title":"domain names","text":"<p>clone of ARTWORLD used for development and testing</p> <p>nakama server / nakama.svelte</p> <pre><code>betanakama.toekomst.school\n</code></pre> <p>Visit betaworld:</p> <pre><code>https://betaworld.toekomst.school\n</code></pre>"},{"location":"1-implementation/BetaWorld/#log-out-in","title":"log out / in","text":"<p>when switching from nakama.toekomst.school to betanakama.toekomst.school</p>"},{"location":"1-implementation/BetaWorld/#current-vps","title":"current VPS","text":"<p>Contabo VPS S</p> <p>4 vCPU Cores</p> <p>8 GB RAM</p> <p>50 GB NVMe or 200 GB SSD</p> <p>32 TB Traffic Unlimited Incoming</p> <p>IP: 185.193.67.152</p>"},{"location":"1-implementation/Chat-Message-Functionality/","title":"Chat Message Functionality","text":""},{"location":"1-implementation/Compression-Tests-Images/","title":"Compression Tests Images","text":""},{"location":"1-implementation/Compression-Tests-Images/#we-get-the-following-results-from-the-comparison-of-png-and-jpg-image-formats-to-heic-avif-and-webp","title":"We get the following results from the comparison of png and jpg image formats to heic, avif and webp.","text":"<p>Artworld.png is converted to the respective image formats, and we get the following sizes |Format|Size of image (KB)|Size respectively to the png file| |-|:-:|-:| |PNG|33|100%| |HEIC|12|36%| |AVIF|10|30%| |WEBP|32|97%|</p> <p>Based on the doodle picture from location1 e13\u2026ff2.jpg |Format|Size of image (KB)|Size respectively to the jpg file| |-|:-:|-:| |JPG|33|100%| |HEIC|19|58%| |AVIF|31|94%| |WEBP|25|76%|</p> <p>Based on museum.png from location1 |Format|Size of image (KB)|Size respectively to the png file| |-|:-:|-:| |PNG|25|100%| |HEIC|11|44%| |AVIF|2|8%| |WEBP|27|108%|</p>"},{"location":"1-implementation/Compression-Tests-Images/#we-get-the-following-results-on-rendering-in-location1","title":"We get the following results on rendering in location1","text":"<p>Heic https://user-images.githubusercontent.com/71214731/145584124-cbe05ea9-e995-4e2c-bfff-1a33017d28e8.png No image is rendered.</p> <p>Avif https://user-images.githubusercontent.com/71214731/145584135-8b55f81d-28f0-45c9-b705-909efdfcbdd1.png Some images get the black background color after conversion, some does not display at all.</p> <p>Webp https://user-images.githubusercontent.com/71214731/145584140-3ca3ee14-81d6-41ce-91a1-2f3c43f690ef.png All images are displayed as they are supposed.</p>"},{"location":"1-implementation/Compression-Tests-Images/#this-format-can-be-used-to-be-able-to-load-an-image-from-several-alternative-formats-according-to-browser-support","title":"This format can be used to be able to load an image from several alternative formats according to browser support","text":"<p>\"this.load.image('museum', [     'museum.webp',     'museum.avif',     'museum.png' ]);\"</p>"},{"location":"1-implementation/Conventions/","title":"Conventions","text":""},{"location":"1-implementation/Conventions/#naming-conventions","title":"Naming Conventions","text":"<ul> <li> <p>Filenames and Classnames are the same</p> </li> <li> <p>Class names start with capital Letter</p> </li> <li> <p>File, Scene and Key names are the same</p> </li> <li> <p>Function names are camelCased</p> </li> </ul>"},{"location":"1-implementation/Coordinate-System-Conversion/","title":"Coordinate System Conversion","text":"<p>Coordinate system Conversion</p> <p>ARTWORLD needs to be able to grow from time to time. It is better to have worlds where 0, 0 is the center, because then coordinates remain valid when worlds become bigger. 0 , 0 is still the center etc</p> <p>This means that there needs to be a conversion between what I call ARTWORLDcoordinates (0, 0 is center) and phaser2Dcoordinates(0,0 is top left)</p> <p>It is a simple conversion when we know the worldSize. </p> <pre><code>artworldVectorToPhaser2D(worldSize, positionVector) {\n    const worldSizeX = worldSize.x\n    const worldSizeY = worldSize.y\n\n    positionVector.x = positionVector.x + (worldSizeX / 2)\n    positionVector.y = positionVector.y + (worldSizeY / 2)\n    return positionVector\n}\n\nPhaser2DVectorToArtworld(worldSize, x, y) {\n    // usage: \n    // pass the worldSize and the coordinates you want to do the calculation on\n    // output is a Vector\n\n    const worldSizeX = worldSize.x\n    const worldSizeY = worldSize.y\n\n    positionVector.x = positionVector.x - (worldSizeX / 2)\n    positionVector.y = positionVector.y - (worldSizeY / 2)\n    return positionVector\n}\n</code></pre> <p>So we need to define a wordSize(x,y) in each scene, this way our ARTWORLDcoordinates stay consistent.</p> <p>ARTWORLDcoordinates are especially important when we think where to place 'houses', artworks, etc, and when we store the last position of the player.</p>"},{"location":"1-implementation/Coordinate-System-Conversion/#conventions-to-make-this-system-work","title":"Conventions to make this system work","text":"<ul> <li>In Phaser everything works with Phaser2Dcoordinates   </li> <li>We design worlds with ARTWORLDcoordinates  </li> <li>On the server we store everything in ARTWROLDcoordinates, so that everything is placed as designed, also when the world has grown in each direction  </li> </ul> <p>That means that coordinates only have to be converted when sending it over the network, and when receiving coordinates over the networks.   Also when we place Locations we do it with ARTWORLDcoordinates, and we convert them to Phaser2Dcoordinates when passing arguments.  Then Phaser just deals with them as Phaser2Dcoordinates  </p> <p>In practice what we have to do when making a scene:</p> <ul> <li> <p>import CoordinatesTranslator from \"../class/CoordinatesTranslator.js\"</p> </li> <li> <p>define globally: this.worldSize = new Phaser.Math.Vector2(3000, 3000)</p> </li> <li> <p>define locations with ARTWORLDcoordinates</p> </li> </ul> <p><code>this.location1 = this.add.isotriangle(CoordinatesTranslator.artworldToPhaser2D(this.worldSize.x, -200), CoordinatesTranslator.artworldToPhaser2D(this.worldSize.y, 200), 150, 150, false, 0x8dcb0e, 0x3f8403, 0x63a505)</code></p> <p>Behind the scenes coordinates are converted here:</p> <ul> <li>When the player avatar is loaded from the server, the last know position is also retreived</li> </ul> <p>in Player.js attachAvatarToPlayer  //*place the player in the last known position  scene.player.x = translateCoordinates.artworldToPhaser2D(this.worldSize.x, this.player.posX)  scene.player.y = translateCoordinates.artworldToPhaser2D(this.worldSize.y, this.player.posY)   </p> <ul> <li>When we send Player movement over the network It is not yet converted in the Player.js, but it will be converted in ManageSession.sendMoveMessage, so we pass scene, to know worldSize later on.   </li> </ul> <p>in Player.js sendMovement(scene) {    if (scene.createdPlayer) {      if (       ManageSession.updateMovementTimer &gt; ManageSession.updateMovementInterval      ) {        //send the player position as artworldCoordinates, because we store in artworldCoordinates on the server        ManageSession.sendMoveMessage(scene, scene.player.x, scene.player.y)        ManageSession.updateMovementTimer = 0      }    } }</p> <p>In ManageSession.sendMoveMessage   </p> <p>`sendMoveMessage(scene, posX, posY) {     //transpose phaser coordinates to artworld coordinates     //console.log(scene)     posX = CoordinatesTranslator.Phaser2DToArtworld(scene.worldSize.x, posX)     posY = CoordinatesTranslator.Phaser2DToArtworld(scene.worldSize.y, posY)</p> <pre><code>var opCode = 1;\nvar data =\n  '{ \"posX\": ' + posX + ', \"posY\": ' + posY + ', \"location\": \"' + this.location + '\" }'\n\nthis.socket.rpc(\"move_position\", data)\n</code></pre> <p>}` </p>"},{"location":"1-implementation/Create-and-update-SERVER-OBJECT-examples/","title":"Create and update SERVER OBJECT examples","text":"<p>To retreive objects (eg addressbook) from the server, works like this:</p> <pre><code>listObjects(\"addressbook\", ManageSession.userProfile.id, 10)\n</code></pre> <p>We get back an array of max 10 (in this case) objects that have \"addressbook\" as collection value. For example: <pre><code>0:\n  0: {collection: 'addressbook', key: 'address_f42eb28f-9f4d-476c-9788-2240bac4cf48', permission_read: 2, permission_write: 1, value: {\u2026}, \u2026}\n  1: {collection: 'addressbook', key: 'addressbook_5264dc23-a339-40db-bb84-e0849ded4e68', permi...\n</code></pre></p> <p>We have an array with an array of objects (because in this case we have multiple addressbooks, most of the time we have only one). Even if there is only one object coming back it will be in the form of:   <code>[0][0]</code>  The first array is standard, the second array is the array of objects we are looking for.         </p> <p>Inside the array we can query the values of the object with dot notation. In the case of retreiving the value:   <code>[0][1].value</code></p> <p>The object ( on the [0][0] level) looks in detail like: </p> <pre><code>{\ncollection: \"addressbook\",\ncreate_time: \"2021-12-23T13:20:46Z\",\nkey: \"address_f42eb28f-9f4d-476c-9788-2240bac4cf48\",\npermission_read: 2,\npermission_write: 1,\nupdate_time: \"2021-12-23T16:09:10Z\",\nuser_id: \"f42eb28f-9f4d-476c-9788-2240bac4cf48\",\nvalue: {user_id: \"5264dc23-a339-40db-bb84-e0849ded4e68\", user_name: \"user11\"},\nversion: \"99914b932bd37a50b983c5e7c90ae93b\"\n}\n</code></pre> <p>Examples</p> <p>Locations OBJECT </p> <p>Heart / Like button Object </p>"},{"location":"1-implementation/Create-onlinePlayers-diagram/","title":"Create onlinePlayers diagram","text":""},{"location":"1-implementation/Depth-of-elements-in-game/","title":"Depth of elements in game","text":"<p>Float on top:  Menu item    (all DOM Elements)   UI Scene: zoom icons    </p> <p>background: 10, order by creation order</p> <p>locations: 30-50 * location: 30 * namePlate: 31 * userIcon: 31 * locationDescription: 32 * locationEnterButton: 500 (above the player(s) and playerItemBar(s)</p> <p>artWorks and likeButton: 100 (they are in the same container)</p> <p>spinner: 199</p> <p>player: 201   playerShadow: 200   onlinePlayer: 200</p> <p>movementDetectLayer: 219</p> <p>playerItemsBar: 220 - 300    onlinePlayerItemsBar: 301 - 499 (above the playerItemsBar)    </p> <p></p>"},{"location":"1-implementation/Download-art-images-flow/","title":"Download art images flow","text":"<p>Eg a list of images to show in the billBoards, eg a rotating selection of liked images of the player.</p> <ol> <li>create an array of liked images in the array scene.AbriImages</li> <li>A if the key doesn't exist: Download the image</li> <li>B if the image can't be downloaded, skip the item, remove it from the array</li> <li>create an array with the image keys and sizes</li> </ol>"},{"location":"1-implementation/GameEditMode/","title":"GameEditMode","text":"<p>By pressing <code>alt shift e f</code> at the same time GameEdit mode is invoked.</p> <p>A user can drag game elements around and see in the console the position and size of the element. This can then be used to store in the game code.</p> <p><code>shift +</code> increases the game element <code>shift -</code> decreases the game element <code>r</code> - rotates the game element</p> <p>If a game element is clicked, the current position, size, rotation is printed out in the console.</p> <p>As admin, the position of a house can be saved on server by pressing the <code>u</code> key, after a house is clicked on/ moved.</p>"},{"location":"1-implementation/HistoryTracker-and-the-Back-button/","title":"HistoryTracker and the Back button","text":""},{"location":"1-implementation/HistoryTracker-and-the-Back-button/#locations-and-homes","title":"Locations and Homes","text":"<p>There are two types of scenes that players can enter: locations and homes. In cases when it is a location, this.location contains the scene name, while for a home, it contains the home's unique ID.</p>"},{"location":"1-implementation/HistoryTracker-and-the-Back-button/#history-tracker","title":"History Tracker","text":"<p>The class of History Tracker has two methods: locationPush and homePush. As the names suggest, when a player enters a location, a value of that location is pushed to the array of ManageSession.locationHistory, and when one gets into a home, an object with two properties is pushed to the same array: </p> <pre><code>{ locationName: \"DefaultUserHome\", homeID: scene.location }\n</code></pre> <p>Both methods have a condition, they should not be matching the value of the previous scene. Otherwise, a player gets into an infinite loop when using the back button.</p>"},{"location":"1-implementation/HistoryTracker-and-the-Back-button/#back-button","title":"Back button","text":"<p>On clicking of the back button, the last element of the array of ManageSession.locationHistory is taken in order to leave the current scene and stop the current scene:</p> <pre><code>let currentLocationKey = ManageSession.locationHistory.pop()\n...\nManageSession.socket.rpc(\"leave\", currentLocationKey)\n...\nthis.scene.stop(currentLocationKey)\n</code></pre> <p>But before leaving the scene, we check whether the scene is a location or a house:</p> <pre><code>if (currentLocationKey.locationName &amp;&amp; currentLocationKey.homeID) {\n  currentLocationKey = currentLocationKey.locationName\n}\n</code></pre> <p>if it is a house, then we reassign the value of the currentLocationKey.</p> <p>And for entering the previous scene, we take the last element of the array of ManageSession.locationHistory and join it:</p> <pre><code>let previousLocation = ManageSession.locationHistory[ManageSession.locationHistory.length - 1]\n...\nManageSession.getStreamUsers(\"join\", previousLocation)\n</code></pre> <p>We also check whether the previous scene is a location or a house:</p> <pre><code>let homeID = null\nif (previousLocation.locationName &amp;&amp; previousLocation.homeID) {\n  homeID = previousLocation.homeID\n  previousLocation = previousLocation.locationName\n}\n</code></pre> <p>For starting the previous scene, we provide two arguments, and the second argument is ignored when the scene is a location, not a home.</p> <pre><code>this.scene.start(previousLocation, { user_id: homeID })\n</code></pre>"},{"location":"1-implementation/Home-and-server-OBJECT/","title":"Home and server OBJECT","text":"<p>home object:   <pre><code>collection: \"home\"\ncreate_time: \"2022-01-19T16:31:43Z\"\nkey: \"Amsterdam\"\npermission_read: 2\npermission_write: 1\nupdate_time: \"2022-01-19T16:32:27Z\"\nuser_id: \"4c0003f0-3e3f-4b49-8aad-10db98f2d3dc\"\nvalue:    \n    posX: 184.83\n    posY: 312.66\n    url: \"home/stock/portalBlauw.png\"\n    username: \"user22\"\n    version: 0\n\nversion: \"0579e989a16f3e228a10d49d13dc3da6\"\n</code></pre></p> <ol> <li>Get array of home objects =&gt; create home array scene.homes //  scene.homesRepresented = []</li> <li>filter by key = location (eg Amsterdam) =&gt; scene.homes</li> <li>A download the images</li> <li>B if image can't be downloaded, use a placeholder (should we also send a noticifation to admin?)</li> <li>create the home in an array scene.homesRepresented and in the scene with the image key, and posX posY from scene.homes, with the class GenerateLocation</li> </ol> <p>In Phaser we get a global download error event, so we are handling that in a special way:</p> <pre><code>  await convertImage(url, \"128\", \"png\")\n            .then((rec) =&gt; {\n                //console.log(\"rec\", rec)\n                // load all the images to phaser\n                scene.load.image(homeImageKey, rec)\n                    .on(`filecomplete-image-${homeImageKey}`, (homeImageKey) =&gt; {\n                        //delete from this.resolveErrorObjectArray\n                        this.resolveErrorObjectArray = this.resolveErrorObjectArray.filter((obj) =&gt; obj.imageKey !== homeImageKey)\n                       // console.log(\"this.resolveErrorObjectArray\", this.resolveErrorObjectArray)\n                        //create the home\n                        this.createHome(element, index, homeImageKey, scene)\n                    }, this)\n\n                // put the file in the loadErrorCache, in case it doesn't load, it get's removed when it is loaded successfully\n                this.resolveErrorObjectArray.push({ loadFunction: \"getHomeImage\", element: element, index: index, imageKey: homeImageKey, scene: scene })\n\n                scene.load.start() // start loading the image in memory\n            })\n</code></pre> <p>We push the element we want to download into a global resolveErrorObjectArray with all the relevant information:   1. the element (object) 2. the index of the array it is being handled in  3. the imageKey that is already generated in the context 4. the scene it is being used in 5. the loadFunction</p> <p>The loadFunction we use in the error handling function to inject the image in the right array and function to that the image is put in the right place:</p> <pre><code>resolveLoadError(offendingFile) {\n        // element, index, homeImageKey, offendingFile, scene\n        this.resolveErrorObjectArray //all loading images\n\n        let resolveErrorObject = this.resolveErrorObjectArray.find(o =&gt; o.imageKey == offendingFile.key)\n\n        let loadFunction = resolveErrorObject.loadFunction\n        let element = resolveErrorObject.element\n        let index = resolveErrorObject.index\n        let imageKey = offendingFile.key\n        let scene = resolveErrorObject.scene\n\n       // console.log(\"element, index, homeImageKey, offendingFile, scene\", element, index, imageKey, scene)\n        switch (loadFunction) {\n            case (\"getHomeImage\"):\n                console.log(\"load offendingFile again\", imageKey)\n\n                scene.load.image(imageKey, './assets/ball_grey.png')\n                    .on(`filecomplete-image-${imageKey}`, (imageKey) =&gt; {\n                        //delete from this.resolveErrorObjectArray\n                        this.resolveErrorObjectArray = this.resolveErrorObjectArray.filter((obj) =&gt; obj.imageKey !== imageKey)\n                        console.log(\"this.resolveErrorObjectArray\", this.resolveErrorObjectArray)\n\n                        //create the home\n                        this.createHome(element, index, imageKey, scene);\n                    }, this)\n                scene.load.start()\n                break\n\n            default:\n                console.log(\"please state fom which function the loaderror occured!\")\n        }\n    }\n</code></pre>"},{"location":"1-implementation/Home/","title":"Home","text":"<p>Welcome to the ARTWORLD_client wiki!</p> <p>Overview Network Flow Client side</p> <p>Server API calls</p>"},{"location":"1-implementation/How-to-deploy-artworld/","title":"How to deploy ARTWORLD","text":"<ul> <li>up to date Linux machine (with correct security in place!) (contabo/digital ocean)</li> <li>nginx</li> <li>docker</li> <li>golang</li> <li>basic linux experience</li> </ul>"},{"location":"1-implementation/How-to-deploy-artworld/#startup","title":"startup","text":"<p><code>sudo apt-get install docker docker-compose nginx golang certbot node npm unzip</code></p>"},{"location":"1-implementation/How-to-deploy-artworld/#client-code","title":"client code","text":"<ul> <li>clone ARTWORLD_client code to /var/www/artworld/</li> </ul> <pre><code>mkdir /var/www/artworld\ncd /var/www/artworld\nwget https://github.com/studioplaynl/ARTWORLD_client/archive/refs/heads/main.zip\nunzip main\nmv ARTWORLD_client-main/ ARTWORLD_client\ncd ARTWORLD_client/\nnpm install\nnpm run build\n</code></pre> <p>-edit your server domain name in ./src/nakama.svelte</p>"},{"location":"1-implementation/How-to-deploy-artworld/#get-nginx-up-and-running","title":"get nginx up and running:","text":"<ul> <li>start by editing /var/www/nginx with the correct domain and folder settings</li> </ul> <p><code>sudo cp /var/www/nginx /etc/nginx/sites-enabled/artworld</code></p> <p><code>sudo systemctl restart nginx</code></p> <ul> <li> <p>set your dns settings to point the domain to the correct IP adress</p> </li> <li> <p>get certbot for a certificate(as shown in the config example)</p> </li> <li> <p>now you can test the domain and see if the clientside code is up and running.</p> </li> </ul>"},{"location":"1-implementation/How-to-deploy-artworld/#server-code","title":"server code","text":"<ul> <li>clone the artworld server code to your home directory</li> <li>edit config.yml if necessary</li> </ul> <p><code>go mod vendor</code></p> <p><code>npm run docker</code></p> <p>server should be live now.</p>"},{"location":"1-implementation/How-to-deploy-artworld/#clone-to-betaworld-server","title":"clone to betaworld server","text":"<p>this has als9o been automated as a cron job, running at 1am each day</p> <pre><code>sudo docker commit artworld_nakama_server_nakama_1 artworld_nakama\nsudo docker save artworld_nakama | gzip | ssh root@185.193.67.152 'gunzip | docker load'\n\nsudo docker commit artworld_nakama_server_postgres_1 artworld_postgres\nsudo docker save artworld_postgres | gzip | ssh root@185.193.67.152 'gunzip | docker load'\n</code></pre>"},{"location":"1-implementation/How-to-deploy-artworld/#amazon-aws","title":"Amazon AWS","text":"<ul> <li>Create a S3 bucket in Amazon AWS for storage of files.</li> <li>object ownership: ACLs enabled(object writer)</li> <li>block public acces: block all</li> <li>bucket versioning: disabled</li> <li>tag: none</li> <li>encryption: disabled</li> <li>advanced settings: disabled</li> </ul> <p>cors settings: <pre><code>[\n    {\n        \"AllowedHeaders\": [\n            \"*\"\n        ],\n        \"AllowedMethods\": [\n            \"PUT\",\n            \"HEAD\",\n            \"GET\"\n        ],\n        \"AllowedOrigins\": [\n            \"https://yourdomain.com\"\n        ],\n        \"ExposeHeaders\": []\n    }\n]\n</code></pre></p> <ul> <li>create access key:</li> <li>click right top username &gt; security credentials</li> <li>create user(permission: AWSS3FullAcces)</li> <li>create in the nakama server folder the file named \"credentials\"</li> </ul> <pre><code>[default] \naws_access_key_id = \"youracceskeyid\"\naws_secret_access_key = \"youracceskey\"\n</code></pre> <ul> <li>update main.go</li> </ul> <pre><code>const (\n    AWS_S3_REGION = \"your region\"\n    AWS_S3_BUCKET = \"your bucket\"\n)\n</code></pre>"},{"location":"1-implementation/How-to-deploy-artworld/#aws-image-converter","title":"AWS image converter:","text":"<p>this is needed for converting images to the correct sizes incl. caching</p> <p>to setup:</p> <p>https://docs.aws.amazon.com/solutions/latest/serverless-image-handler/deployment.html   - press launch solution    - choose correct location in top right!   - choose following settings: AutoWebP    No  - CorsEnabled Yes - CorsOrigin  https://yourwebsite.com - DeployDemoUI    No  - EnableDefaultFallbackImage  No  - EnableSignature Yes - FallbackImageS3Bucket   -   - FallbackImageS3Key  -   - LogRetentionPeriod  1   - SecretsManagerKey   your secret key - SecretsManagerSecret    your secret secret  - SourceBuckets   artworldstudioplay  - </p> <p>to create a secret go to: secretsmanager https://eu-central-1.console.aws.amazon.com/secretsmanager/home?region=eu-central-1#!/listSecrets/ - other type of secret - fill in key and value</p>"},{"location":"1-implementation/How-to-deploy-artworld/#troubleshoot","title":"troubleshoot","text":""},{"location":"1-implementation/Items-bar/","title":"Items bar","text":"<p>Player: - items bar around the player, following the player - The layer items bar has profile (home), liked, friend's homes, achievements.</p> <p>onlinePlayer: - items bar around the onlinePlayer, following the player - The layer items bar has home, likes.</p> <p>scene.playerLikedPanelKeys data structure:</p> <pre><code>{artworks: Array(3)}\n{name: 'geelCoral_128'}\n</code></pre> <p>allLikedArray: <pre><code>drawing/5264dc23-a339-40db-bb84-e0849ded4e68/geelCoral.png\ndrawing/5264dc23-a339-40db-bb84-e0849ded4e68/witMurene.png\ndrawing/5264dc23-a339-40db-bb84-e0849ded4e68/4_blauwSpotlijster.png\ndrawing/5264dc23-a339-40db-bb84-e0849ded4e68/magentaGemeenschappelijke-vlieg.png\n</code></pre></p>"},{"location":"1-implementation/Last-Position-Players/","title":"Last Position Players","text":"<p>Now the server remembers the last location and position of the player</p> <p>This can be used to place players when onBoarding the Game.</p> <p>The serverside LastPosition cannot be used for placing the player in the right position. It would then have to keep track the last positions of all visited locations.</p> <p>We could use HistoryTracker to remember the last position per location for the player.   But then for the onLinePlayers we would have to get their position without them moving first.   </p> <p>So now we implement position as follows:</p> <ol> <li>we place player in fixed positions</li> <li>we filter the placement based on known position and location</li> <li>the last position is kept in HistoryTracker, when going back the player is also put in the last known position of that location</li> </ol>"},{"location":"1-implementation/Like%28Heart%29-Button-and-OBJECT/","title":"Like(Heart) Button and OBJECT","text":""},{"location":"1-implementation/Like%28Heart%29-Button-and-OBJECT/#data-structure","title":"Data structure","text":"<p>{id: \"user_id\", art_url: \"art_url\"}</p> <p>We are storing the object as:  <code>collectionName.value.collectionName = [ {}, {} ]</code> </p> <pre><code>collection: \"liked\"\ncreate_time: \"2022-01-26T12:02:11Z\"\nkey: \"liked_5264dc23-a339-40db-bb84-e0849ded4e68\"\npermission_read: 2\npermission_write: 1\nupdate_time: \"2022-02-03T14:11:23Z\"\nuser_id: \"5264dc23-a339-40db-bb84-e0849ded4e68\"\nvalue:\n    liked: (Array (2))\n[\n          0:\n          {\n           user_id: \"e0849c23-a339-40db-bb84-e0849ded4e68\",\n           collection: \"drawing\",\n           key: \"1642771303290_limoenWalrus\",\n           version: 1,\n           url: \"drawing/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png\",\n           previewURl: \"https://d3hkghsa3z4n1z.cloudfront.net/fit-in/64x64/stopmotion/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png?signature=c8c1aba753e01a6f06fd321a5a01a46fc18a483bb618ca1e2478283028a077f8\",\n           },\n\n          1:\n          {\n           user_id: \"e0849c23-a339-40db-bb84-e0849ded4e68\",\n           collection: \"drawing\",\n           key: \"1642771303290_limoenWalrus\",\n           version: 1,\n           url: \"drawing/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png\",\n           previewURl: \"https://d3hkghsa3z4n1z.cloudfront.net/fit-in/64x64/stopmotion/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png?signature=c8c1aba753e01a6f06fd321a5a01a46fc18a483bb618ca1e2478283028a077f8\",\n           }\n]\n</code></pre>"},{"location":"1-implementation/Like%28Heart%29-Button-and-OBJECT/#the-functionality-can-be-found-in-the-class-artworklistjs","title":"The functionality can be found in the class ArtworkList.js","text":"<p>We do the first check in the NetworkBoot scene. We then have the latest liked array, each time a like is added of deleted we update the local and the server array, so the array is already in the updates state when clicking the liked button </p> <p>1.a check if it exists on the server   1.b If the Liked object does not exists, create the object   1.c if the object exists, parse it to local array (ManageSession.allLiked)    </p> <p>We get a server Object with</p> <pre><code>this.getServerObject(\"liked\", ManageSession.userProfile.id, 10)\n</code></pre> <p>which calls</p> <pre><code>async getServerObject(collection, userID, maxItems) {\n    Promise.all([listObjects(collection, userID, maxItems)])\n      .then(response =&gt; {\n        console.log(\"collection\", collection)\n        console.log(\"response\", response)\n\n        //check if the object exists\n        if (response[0].length &gt; 0) {\n          //the object exists: addressbook\n\n          // check if the right object exists: addressbook_user_id\n          let filteredResponse = response[0].filter(element =&gt; {\n            console.log(collection + \"_\" + ManageSession.userProfile.id, typeof collection)\n            console.log(\"element\", element)\n            return element.key == collection + \"_\" + ManageSession.userProfile.id\n          }\n          )\n          console.log(\"filteredResponse\", filteredResponse)\n\n          if (filteredResponse.length &gt; 0) {\n            //the right collection object exists, but check if there is data in de object, in the expected format\n\n            if (typeof filteredResponse[0].value[collection] != \"undefined\") {\n              //the object is in the right format (object.value.object), we assign our local copy\n              ManageSession[collection] = filteredResponse[0].value\n              console.log(\"ManageSession.\" + collection, ManageSession[collection])\n            } else {\n              //when the right addressbook does not exist: make an empty one\n              //addressbook_userid.value exists but .addressbook  \n              this.createEmptyServerObject(collection)\n            }\n\n          } else {\n            //when the right addressbook does not exist: make an empty one\n            this.createEmptyServerObject(collection)\n\n          }\n          console.log(\"ManageSession.\" + collection, ManageSession[collection])\n\n        } else {\n          //the addressbook does not exist: make an empty one\n          this.createEmptyServerObject(collection)\n        }\n      })\n  }\n</code></pre> <p>This is a promise, so we use Promise.all() to resolve a async/ await function inline. Promise.all is easier to use then Promise, because it gives the result in one line</p> <p>If the Liked Object does not exists, we make an empty object with an empty array, in the correct form:</p> <pre><code>async createEmptyServerObject(collection) {\n    //general method of creating an array inside an object with the argument of the method\n    console.log(\"createEmptyServerObject\")\n    console.log(collection)\n\n    ManageSession[collection] = { [collection]:[] }\n\n    const type = collection\n    const name = type + \"_\" + ManageSession.userProfile.id\n    const pub = 2\n    const value = ManageSession[collection]\n    console.log(\" ManageSession. empty\", ManageSession[collection])\n    updateObject(type, name, value, pub)\n  }\n</code></pre>"},{"location":"1-implementation/Like%28Heart%29-Button-and-OBJECT/#data-structure-of-liked","title":"Data structure of liked","text":"<p>If the Liked Object has content, then the Object in inside a one element array. Like so:</p> <pre><code>collection: \"liked\"\ncreate_time: \"2022-01-12T12:31:53Z\"\nkey: \"all_liked_5264dc23-a339-40db-bb84-e0849ded4e68\"\npermission_read: 2\npermission_write: 1\nupdate_time: \"2022-01-13T15:45:02Z\"\nuser_id: \"5264dc23-a339-40db-bb84-e0849ded4e68\"\nvalue: \n    liked: [ \n          {\n           user_id: \"e0849c23-a339-40db-bb84-e0849ded4e68\",\n           collection: \"drawing\",\n           key: \"1642771303290_limoenWalrus\",\n           version: 1,\n           url: \"drawing/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png\",\n           previewURl: \"https://d3hkghsa3z4n1z.cloudfront.net/fit-in/64x64/stopmotion/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png?signature=c8c1aba753e01a6f06fd321a5a01a46fc18a483bb618ca1e2478283028a077f8\",\n\n           },\n           ]\nversion: \"d1be852d6a66654ec9faa878fcb41b7d\"\n</code></pre> <p>url and previewURl is of the latest version, if we want to latest-latest version we would have to query for url and convert that url.</p>"},{"location":"1-implementation/Like%28Heart%29-Button-and-OBJECT/#data-of-artwork-list","title":"Data of Artwork List","text":"<p>Called with <code>listImages(\"drawing\", this.location, 100)</code></p> <pre><code>{\n            \"collection\": \"stopmotion\",\n            \"key\": \"1642771303290_limoenWalrus\",\n            \"permission_read\": 2,\n            \"permission_write\": 1,\n            \"value\":\n                \"url\": \"stopmotion/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png\",\n                \"json\": \"stopmotion/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.json\",\n                \"version\": 1,\n                \"previewUrl\": \"https://d3hkghsa3z4n1z.cloudfront.net/fit-in/64x64/stopmotion/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png?signature=c8c1aba753e01a6f06fd321a5a01a46fc18a483bb618ca1e2478283028a077f8\",\n                \"displayname\": \"limoenWalrus1\"\n            \"version\": \"47ef7fee1aeebeeae6bb183aa0728267\",\n            \"user_id\": \"5264dc23-a339-40db-bb84-e0849ded4e68\",\n            \"create_time\": \"2022-01-21T13:21:44Z\",\n            \"update_time\": \"2022-01-21T13:23:01Z\",\n            \"url\": \"stopmotion/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus\"\n        }\n</code></pre>"},{"location":"1-implementation/Like%28Heart%29-Button-and-OBJECT/#final-code","title":"Final Code","text":"<pre><code> async getServerObject(collection, userID, maxItems) {\n    Promise.all([listObjects(collection, userID, maxItems)])\n      .then(response =&gt; {\n        console.log(\"collection\", collection)\n        console.log(\"response\", response)\n\n        //check if the object exists\n        if (response[0].length &gt; 0) {\n          //the object exists: addressbook\n\n          // check if the right object exists: addressbook_user_id\n          let filteredResponse = response[0].filter(element =&gt; {\n            console.log(collection + \"_\" + ManageSession.userProfile.id, typeof collection)\n            console.log(\"element\", element)\n            return element.key == collection + \"_\" + ManageSession.userProfile.id\n          }\n          )\n          console.log(\"filteredResponse\", filteredResponse)\n\n          if (filteredResponse.length &gt; 0) {\n            //the right collection object exists, but check if there is data in de object, in the expected format\n\n            if (typeof filteredResponse[0].value[collection] != \"undefined\") {\n              //the object is in the right format (object.value.object), we assign our local copy\n              ManageSession[collection] = filteredResponse[0].value\n              console.log(\"ManageSession.\" + collection, ManageSession[collection])\n            } else {\n              //when the right addressbook does not exist: make an empty one\n              //addressbook_userid.value exists but .addressbook  \n              this.createEmptyServerObject(collection)\n            }\n\n          } else {\n            //when the right addressbook does not exist: make an empty one\n            this.createEmptyServerObject(collection)\n\n          }\n          console.log(\"ManageSession.\" + collection, ManageSession[collection])\n\n        } else {\n          //the addressbook does not exist: make an empty one\n          this.createEmptyServerObject(collection)\n        }\n      })\n  }\n\n  async createEmptyServerObject(collection) {\n    //general method of creating an array inside an object with the argument of the method\n    console.log(\"createEmptyServerObject\")\n    console.log(collection)\n\n    ManageSession[collection] = { [collection]:[] }\n\n    const type = collection\n    const name = type + \"_\" + ManageSession.userProfile.id\n    const pub = 2\n    const value = ManageSession[collection]\n    console.log(\" ManageSession. empty\", ManageSession[collection])\n    updateObject(type, name, value, pub)\n  }\n</code></pre>"},{"location":"1-implementation/Locations-OBJECT/","title":"Locations OBJECT","text":"<p>Locations is being stored as an object in the database, with a collection name(the group where all these specific items get stored in), a key( to specify specifically that object) and the user Id. All 3 are mandatory to create, delete and find locations.</p> <p>That means you can have multiple locations, within the same collection and with the same key, but from a different user. This for instance makes it possible to search for all \"userhouses\" in \"locationA\".</p>"},{"location":"1-implementation/Locations-OBJECT/#list-locations","title":"list Locations","text":"<p><code>listObjects(type, userID, limit)</code></p> <p>response example:</p> <pre><code>[\n {\n  \"collection\": \"home\",\n  \"key\": \"test\",\n \"permission_read\": 2,\n \"permission_write\": 1,\n \"value\": {\n   \"posX\": 12345,\n   \"posY\": 12345\n   },\n  \"version\": \"e9a4463161b584c4f8ff1ab98d3b5932\",\n  \"user_id\": \"4bd9378d-8b5b-4ea3-b683-6c3324792afe\",\n  \"create_time\": \"2021-12-09T11:06:16Z\",\n  \"update_time\": \"2021-12-09T11:32:30Z\"\n }\n]\n</code></pre>"},{"location":"1-implementation/Locations-OBJECT/#createupdate-locations","title":"create/update locations","text":"<p>if you are admin(this gives you the possibility to create locations for other users):</p> <p><code>updateObjectAdmin(id, type, name, value, pub)</code></p> <p>if not admin:</p> <p><code>updateObject(type, name, value, pub)</code></p>"},{"location":"1-implementation/Locations-OBJECT/#delete-object","title":"delete object","text":"<p>if admin:</p> <p><code>deleteObjectAdmin(id, type, name);</code></p> <p>if not admin:</p> <p><code>deleteObject(type, name)</code></p>"},{"location":"1-implementation/Movement---player/","title":"Movement   player","text":"<p>Sending the movement over the network is now optimized: we send a moveTo command. With double tapping and swiping this is straight foreward: the player moves to a target. With keyboard moving this is not that obvious so keyboardmoving is not enabled at the moment.</p> <p>Because we don't want to move when we are painting on a Graffitiwall, we added a graphic in the background that detects mousePresses, everything that should disable playerMovement is above that layer.</p> <p>This layer sets ManageSession.playerMove to true</p> <p>Methods in our Move.js class</p> <p>moveByCursor()  Sets .cursorKeyIsDown to true or false when either one of the keyboard moving keys is down    </p> <p>movingAnimation()  Plays the appropiate animation according to the movement flag that is set maybe better with events! </p> <p>moveByKeyboard()  moves player with keyboard commands    </p> <p>MoveObjectToTarget()  General method to move the player to a goal and detect when it has arrived     this.updatePositionHistory(scene) // update the url and historyTracker   ManageSession.sendMoveMessage(scene, target.x, target.y, \"moveTo\") //set movement over network    </p> <p>checkIfPlayerReachedMoveGoal  stops the player when it reached the goal (with a tolerance that is speed dependent)  stops the player animation when the player reached   also shaked the camera when the player reaches the end of the world   </p> <p>updatePositionHistory  update the url when the player moved   update the position in the history tracker aswell    </p> <p>moveBySwiping()  move by swiping with mouse or finger   </p> <p>moveByTapping()  move by double tapping with finger or mouse    </p> <p>sendMovement()  send movement over the network    </p> <p>Links with information:</p> <p>physics.moveto example: https://phaser.io/examples/v3/view/physics/arcade/move-to</p> <p>scroll camera example: https://phaser.io/examples/v3/view/camera/scroll-view</p> <p>World Camera example: https://labs.phaser.io/edit.html?src=src/camera/world%20camera.js&amp;v=3.55.2</p> <ul> <li>config parameters for the camera (acceleration, drag, maxSpeed)</li> </ul> <p>Get world point from camera: http://labs.phaser.io/edit.html?src=src/camera/get%20world%20point.js</p> <p>Move And Stop At Position: https://phaser.io/examples/v3/view/physics/arcade/move-and-stop-at-position</p> <p>Virtual Joystick https://codepen.io/rexrainbow/pen/oyqvQY</p> <p>Swipe discussion https://www.html5gamedevs.com/topic/39661-creating-swiping-mechanism/</p> <p>Swipe example https://www.thepolyglotdeveloper.com/2020/09/include-touch-cursor-gesture-events-phaser-game/</p>"},{"location":"1-implementation/Movement---player/#swipe-movement-works-really-well","title":"Swipe movement (works really well!)","text":"<pre><code>playerMovingBySwiping() {\n    if (!this.input.activePointer.isDown &amp;&amp; this.isClicking == true) {\n      const playerX = this.player.x\n      const playerY = this.player.y\n\n      const swipeX = this.input.activePointer.upX - this.input.activePointer.downX\n      const swipeY = this.input.activePointer.upY - this.input.activePointer.downY\n      // console.log(\"swipeX:\")\n      // console.log(swipeX)\n      // console.log(\"swipeY:\")\n      // console.log(swipeY)\n      this.swipeAmount.x = swipeX\n      this.swipeAmount.y = swipeY\n\n      const moveSpeed = this.swipeAmount.length()\n      console.log(\"moveSpeed:\")\n      console.log(moveSpeed)\n\n      // console.log(\"this.swipeAmount:\")\n      // console.log(this.swipeAmount.x)\n      // console.log(this.swipeAmount.y)\n      // console.log(\"\")\n      //if (Math.abs(swipeX &gt; 10) || Math.abs(swipeY &gt; 10)) {\n      this.playerIsMovingByClicking = true; // trigger moving animation\n\n\n      this.target.x = playerX + swipeX\n      this.target.y = playerY + swipeY\n      this.physics.moveToObject(this.player, this.target, moveSpeed * 1.5);\n      this.isClicking = false;\n\n\n      //     if (this.input.activePointer.upY &lt; this.input.activePointer.downY) {\n      //       this.swipeDirection = \"up\";\n      //     } else if (this.input.activePointer.upY &gt; this.input.activePointer.downY) {\n      //       this.swipeDirection = \"down\";\n      //     }\n\n    } else if (this.input.activePointer.isDown &amp;&amp; this.isClicking == false) {\n      this.isClicking = true;\n    }\n    this.distance = Phaser.Math.Distance.Between(this.player.x, this.player.y, this.target.x, this.target.y);\n    //  4 is our distance tolerance, i.e. how close the source can get to the target\n    //  before it is considered as being there. The faster it moves, the more tolerance is required.\n    if (this.playerIsMovingByClicking) {\n      if (this.distance &lt; 10) {\n        this.player.body.reset(this.target.x, this.target.y);\n        this.playerIsMovingByClicking = false\n      } else {\n        this.sendPlayerMovement();\n      }\n    }\n  }\n</code></pre>"},{"location":"1-implementation/Movement--onlinePlayer/","title":"Movement  onlinePlayer","text":"<p>In ManageSession we get onlinePlayer movement via the socket, with:</p> <pre><code>this.socket.onstreamdata = (streamdata) =&gt; {\n      let data = JSON.parse(streamdata.data)\n</code></pre> <p>The data we get is:</p> <p><code>{ location: \"ArtworldAmsterdam\", posX: 50, posY: 50, user_id: \"5264dc23-a339-40db-bb84-e0849ded4e68\" }</code></p>"},{"location":"1-implementation/Network-Flow-Client-Side/","title":"Network Flow Client Side","text":""},{"location":"1-implementation/Network-Flow-Client-Side/#graphical-flow-of-the-network","title":"Graphical flow of the network:","text":""},{"location":"1-implementation/Network-Flow-Client-Side/#figma-network-flow-client","title":"Figma: network flow client","text":""},{"location":"1-implementation/Network-Flow-Client-Side/#1-appsvelte-is-the-session-empty","title":"1. App.Svelte Is the Session empty?","text":"<p>session (https) -&gt; token, expiration</p>"},{"location":"1-implementation/Network-Flow-Client-Side/#2-yes-the-session-is-empty","title":"2. yes, the Session is empty:","text":"<p>login.Svelte session.js</p> <pre><code>let storedSession = localStorage.getItem(\"Session\")\n\nexport const Session = writable(storedSession ? JSON.parse(storedSession) : null);\n\nSession.subscribe((value) =&gt; {\n    if (value) {\n        manageSession.sessionStored = value; //! push the Session with url to manageSession\n        localStorage.setItem('Session', JSON.stringify(value))\n     }\n    else localStorage.removeItem('Session'); // for logout\n  })\n\n\nlet profileStore = localStorage.getItem(\"profile\")\nexport const Profile = writable(profileStore ? JSON.parse(profileStore) : null);\nProfile.subscribe((value) =&gt; {\n        localStorage.setItem('profile', JSON.stringify(value));\n        manageSession.userProfile = value //! push the profile with url to manageSession\n        // console.log(\"Profile.subscribe((value)\")\n        // console.log(value)\n    }\n    else localStorage.removeItem('profile'); // for logout\n</code></pre> <pre><code>client.authenticateEmail(email, password, create)\n    .then((response)=&gt; { \u2028Session.set(session)\ngetAccount()}\n</code></pre>"},{"location":"1-implementation/Network-Flow-Client-Side/#session-object","title":"Session object:","text":"<pre><code>Session$1 \n{\ncreated_at: \u201c1636024979\u201d,\n\nexpires_at: \u201c1636032179\u201d,\n\ntoken: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI1MjY0ZGMyMy1hMzM5LTQwZGItYmI4NC1lMDg0OWRlZDRlNjgiLCJ1c24iOiJ1c2VyMTEiLCJleHAiOjE2MzYwMzIxNzl9.HVT1r90Ud5cHd-I5PcqxIuygHmTlDRWBhN-7FeHhQSA\"\n\nuser_id: \"5264dc23-a339-40db-bb84-e0849ded4e68\",\n\nusername: \"user11\",\n\nvars: undefined\n}\n</code></pre>"},{"location":"1-implementation/Network-Flow-Client-Side/#profile-object-without-url","title":"Profile Object without URL","text":"<pre><code>$Profile\n{\navatar_url: \"avatar/5264dc23-a339-40db-bb84-e0849ded4e68/current.png\"\ncreate_time: \"2021-10-16T17:28:59Z\"\nedge_count: 4\nid: \"5264dc23-a339-40db-bb84-e0849ded4e68\"\nlang_tag: \"en\"\nmeta: {azc: 'Amsterdam', posX: 528, posY: 800, role: 'speler', user_id: '', \u2026}\nmetadata: \"{\\\"azc\\\": \\\"Amsterdam\\\", \\\"posX\\\": 528, \\\"posY\\\": 800, \\\"role\\\": \\\"speler\\\", \\\"user_id\\\": \\\"\\\", \\\"location\\\": \\\"location1\\\"}\"\nupdate_time: \"2021-11-03T16:00:14Z\"\nusername: \"user11\"\n}\n</code></pre>"},{"location":"1-implementation/Network-Flow-Client-Side/#profile-object-with-url","title":"Profile Object WITH URL","text":"<pre><code>$Profile\n{\navatar_url: \"avatar/5264dc23-a339-40db-bb84-e0849ded4e68/current.png\"\ncreate_time: \"2021-10-16T17:28:59Z\"\nedge_count: 4\nid: \"5264dc23-a339-40db-bb84-e0849ded4e68\"\nlang_tag: \"en\"\nmeta: {azc: 'Amsterdam', posX: 528, posY: 800, role: 'speler', user_id: '', \u2026}\nmetadata: \"{\\\"azc\\\": \\\"Amsterdam\\\", \\\"posX\\\": 528, \\\"posY\\\": 800, \\\"role\\\": \\\"speler\\\", \\\"user_id\\\": \\\"\\\", \\\"location\\\": \\\"location1\\\"}\"\nupdate_time: \"2021-11-03T16:00:14Z\"\nurl: \"https://artworldstudioplay.s3.eu-central-1.amazonaws.com/avatar/5264dc23-a339-40db-bb84-e0849ded4e68/current.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAR7FDNFNP252ENA7M%2F20211104%2Feu-central-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20211104T120408Z&amp;X-Amz-Expires=86400&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=f85d6c618c85f2561803d2fcb86a5a2288d6b8bf7325d0c7effe8268df36d26c\"\nusername: \"user11\"\n}\n</code></pre>"},{"location":"1-implementation/Network-Flow-Client-Side/#3-no-the-session-is-not-empty-mainmenujs","title":"3. No the Session is not empty -&gt; MainMenu.js","text":"<pre><code>   //* check if the user profile is loaded, to be able to send the player to the right location\n    if (typeof (manageSession.userProfile.meta.location) != \"undefined\") {\n      this.launchLocation = manageSession.userProfile.meta.location + \"_Scene\"\n      console.log(this.launchLocation)\n\n      this.checkSceneExistence()\n    } else {\n      getAccount(\"\", true)\n        .then(rec =&gt; {\n          manageSession.freshSession = rec\n          //! only set the menu button visible if the user data is downloaded!\n          this.launchLocation = manageSession.freshSession.meta.location\n+ \"_Scene\"\n          this.checkSceneExistence()\n        })\n    }\n  } //create\n\n  checkSceneExistence() {\n    //check if this.launchLocation exists in SCENES\n    const locationExists = SCENES.includes(this.launchLocation)\n    //if location does not exists; launch default location\n    if (!locationExists) {\n      //set to fail-back scene\n      manageSession.location = \"location1\"\n      manageSession.launchLocation = manageSession.location + \"_Scene\"\n    } else {\n      manageSession.location = manageSession.userProfile.meta.location\n    }\n    this.playBtn.setVisible(true)\n  }\n</code></pre>"},{"location":"1-implementation/Network-Flow-Client-Side/#4a-networkboot_scenejs","title":"4A. networkBoot_Scene.js","text":"<pre><code>manageSession.createPlayer = true\n\n await manageSession.createSocket()\n      .then(rec =&gt; {\n        console.log(manageSession.launchLocation)\n        this.scene.launch(manageSession.launchLocation)\n})\n</code></pre>"},{"location":"1-implementation/Network-Flow-Client-Side/#4b-managesessionjs","title":"4B. manageSession.js","text":"<pre><code>createSocket\n\nsocket.connect\n\ngetStreamUsers (\u201cjoin\u201d, this.location)\n\nsocket.onstreampresence\n</code></pre>"},{"location":"1-implementation/Network-Flow-Client-Side/#5-locationx_scenejs","title":"5. locationX_Scene.js","text":"<pre><code>manageSession.createPlayer = true\n\nloadAndCreatePlayerAvatar()\nattachtAvatarToPlayer()\n\ncreateOnlinePlayers()\nattachtAvatarToOnlinePlayer(player, preExisting)\n</code></pre>"},{"location":"1-implementation/Network-Flow-Client-Side/#6-change-locations","title":"6. CHANGE LOCATIONS","text":"<p>LocationA: <pre><code>manageSession.socket.rpc(\"leave\", locationA)\n\n\n setTimeout(() =&gt; {\n      manageSession.location = location\n      manageSession.createPlayer = true\n      manageSession.getStreamUsers(\"join\", locationB)\n      this.scene.start(locationScene)\n    }, 1000)\n</code></pre> LocationB: <pre><code>manageSession.createPlayer = true\n\nloadAndCreatePlayerAvatar()\nattachtAvatarToPlayer()\n\ncreateOnlinePlayers()\nattachtAvatarToOnlinePlayer(player, preExisting)\n</code></pre></p>"},{"location":"1-implementation/PNG-Compression-percentages/","title":"PNG Compression percentages","text":"<p>to create the best looking, smallest png files with transparency:</p>"},{"location":"1-implementation/PNG-Compression-percentages/#1-step","title":"1-step","text":"<ol> <li>pngquant:</li> </ol> <pre><code>pngquant 64 --force  --skip-if-larger  *.png\n</code></pre> <p>Total reduction: 70.67%</p> <p>Script to run in a folder:</p> <pre><code>#!/bin/bash\n\n# Check if pngquant is installed\nif ! command -v pngquant &amp;&gt; /dev/null\nthen\n    echo \"pngquant could not be found. Please install it first.\"\n    exit\nfi\n\n# Run pngquant command\npngquant 64 --force --skip-if-larger *.png\n</code></pre>"},{"location":"1-implementation/PNG-Compression-percentages/#2-step-no-file-size-difference-to-1-step-but-added-for-documentation","title":"2-step  (no file size difference to 1-step, but added for documentation.)","text":"<ol> <li>pngcrush</li> </ol> <p>pngcrush is a PNG (Portable Network Graphics) file optimizer. It reduces the file size of the image by passing it through various compression methods and filters.</p> <p>Debian/Ubuntu users can run the following command for installation.</p> <p>sudo apt get install pngcrush Users of other Linux distributions can install it using their standard installation commands followed by pngcrush.</p> <p>After the installation is done, we can reduce the size of PNG file by running:</p> <p>pngcrush -brute   Reduce Image Size Pngcrush Reducing PNG file size The '-brute' option takes the file through 114 filter/compression methods. The extended process consumes few seconds. Instead of applying the brute force approach, users can select filters, levels and strategies for optimization. <p>The types of filters and other properties can be learnt through the manual pages - man pngcrush.</p> <p>-d [output dir]</p> <p>Average reduction in size: 18%</p> <ol> <li>After that reduce color with pngquant: pngquant 64 --force  --skip-if-larger  *.png</li> </ol> <p>Average reduction in size: 68.25%</p> <p>Total reduction: 70.67%</p>"},{"location":"1-implementation/Parsing-URL-Parameters---Phaser-onboarding/","title":"Parsing URL Parameters   Phaser onboarding","text":"<p>https://docs.google.com/drawings/d/19rJP5XxY_8ZWCcD-bzCNEFJ0sJDMKTL9rEqBGvq5y14/edit?usp=sharing</p> <p></p>"},{"location":"1-implementation/Phaser-error-handling/","title":"Phaser error handling","text":"<p>Now I using a queue to load details about the function the file is loaded in:</p> <pre><code>this.resolveErrorObjectArray = []\n\n    async getHomeImages(url, element, index, homeImageKey, scene) {\n        console.log(\"getHomeImages\")\n        await convertImage(url, \"128\", \"png\")\n            .then((rec) =&gt; {\n                //console.log(\"rec\", rec)\n                // load all the images to phaser\n                scene.load.image(homeImageKey, rec)\n                    .on(`filecomplete-image-${homeImageKey}`, (homeImageKey) =&gt; {\n                        //delete from this.resolveErrorObjectArray\n                        this.resolveErrorObjectArray = this.resolveErrorObjectArray.filter((obj) =&gt; obj.imageKey !== homeImageKey)\n                        console.log(\"this.resolveErrorObjectArray\", this.resolveErrorObjectArray)\n                        //create the home\n                        this.createHome(element, index, homeImageKey, scene)\n                    }, this)\n                // put the file in the loadErrorCache, incase it doesn't load\n                this.resolveErrorObjectArray.push({ loadFunction: \"getHomeImage\", element: element, index: index, imageKey: homeImageKey })\n                scene.load.start() // start loading the image in memory\n            })\n    }\n\n    resolveLoadError(offendingFile) {\n\n        let resolveErrorObject = this.resolveErrorObjectArray.find(obj =&gt; obj.imageKey == offendingFile.key)\n\n        let loadFunction = resolveErrorObject.loadFunction\n        let element = resolveErrorObject.element\n        let index = resolveErrorObject.index\n        let imageKey = offendingFile.key\n        let scene = ManageSession.currentScene\n\n        switch (loadFunction) {\n            case (\"getHomeImage\"):\n                console.log(\"load offendingFile again\", imageKey, offendingFile)\n\n                scene.load.image(imageKey, './assets/ball_grey.png')\n                    .on(`filecomplete-image-${imageKey}`, (imageKey) =&gt; {\n                        //delete from this.resolveErrorObjectArray\n                        this.resolveErrorObjectArray = this.resolveErrorObjectArray.filter((obj) =&gt; obj.imageKey !== imageKey)\n                        console.log(\"this.resolveErrorObjectArray\", this.resolveErrorObjectArray)\n\n                        //create the home\n                        this.createHome(element, index, imageKey, scene);\n                    }, this)\n                scene.load.start()\n                break\n\n            default:\n                console.log(\"please state fom which function the loaderror occured!\")\n        }\n    }\n</code></pre> <p>Was using this:   </p> <p><pre><code>scene.load.image(homeImageKey, rec)\n                    .on(`filecomplete-image-${homeImageKey}`, (homeImageKey) =&gt; {\n                        //create the home\n                        this.createHome(element, index, homeImageKey, scene)\n                    }, this)\n                    .on(`loaderror`, (offendingFile) =&gt; { this.resolveLoadError(element, index, homeImageKey, offendingFile, scene) }, this)\n                scene.load.start()\n</code></pre> But the .on('loaderror) callback is for the whole scene, so it is difficult to create a callback specific for a method.</p> <p>On way to do it maybe is to only add to the queue when a method is finished. So to use to load queue per loading method/ sequence...</p> <p>Async loader plugin:  https://pablo.gg/en/blog/games/how-to-load-assets-asynchronously-with-phaser-3/</p> <p>Maybe a useful methode:   https://phaser.discourse.group/t/loading-audio/1306/4</p> <pre><code>async create() {\n\n  const asyncLoader = loaderPlugin =&gt; {\n    return new Promise(resolve =&gt; {\n      loaderPlugin.on('filecomplete', () =&gt; resolve()).on('loaderror', () =&gt; resolve())\n      loaderPlugin.start()\n    })\n  }\n\n  await asyncLoader(this.load.audio('song', ['assets/sounds/0781.ogg']))\n  this.sound.add('song').play()\n}\n</code></pre>"},{"location":"1-implementation/Phaser-event-system/","title":"Phaser event system","text":"<p>subscribe to the event:   <code>this.events.on('gameEditMode', this.gameEditModeSign, this)</code></p> <p>send the event with arguments:   <code>scene.events.emit('gameEditMode', 'off')</code></p> <p>callbackFunction with arguments:   <code>gameEditModeSign(arg) {</code> <code>console.log(\"gameEditMode received\", arg)</code> <code>}</code></p> <p>Use case: doubble click -&gt; move player to specific location, an other object should also be able to subscribe on that moveTo</p> <p>If you move a GameObject with a tween, then the progression of the tween event can be 'read', and calledback.</p>"},{"location":"1-implementation/Phaser-event-system/#scene-event-senders-and-listeners","title":"Scene event senders and listeners","text":"<p>Here is our event listener, the 'handler' function. The 'this' argument is the context.</p> <pre><code>    this.events.on('chatsubo', this.handler, this)\n</code></pre> <p>We'll use the Scenes own EventEmitter to dispatch our event</p> <pre><code>    this.events.emit('chatsubo')\n</code></pre>"},{"location":"1-implementation/Phaser-event-system/#event-arguments","title":"Event arguments","text":"<p>The event sends 2 arguments: 200 and 300</p> <pre><code>this.events.emit('addImage', 200, 300)\n</code></pre> <p>The event handles sends the arguments on to the handler function</p> <p>```this.events.on('addImage', handler, this)</p> <p>function handler (x, y) {     this.add.image(x, y, 'plush') } <pre><code>### Create Event Emitter\n</code></pre> //  Create our own EventEmitter instance var emitter = new Phaser.Events.EventEmitter();</p> <p>//  Set-up an event handler emitter.on('addImage', this.handler, this);</p> <p>//  Emit it a few times with varying arguments emitter.emit('addImage', 200, 300); emitter.emit('addImage', 400, 300); emitter.emit('addImage', 600, 300);     }</p> <p>handler (x, y)     {         this.add.image(x, y, 'plush');     } ```</p>"},{"location":"1-implementation/Phaser-event-system/#once-vs-on","title":"Once vs On","text":"<p>This handler will only be called once, no matter how many times the event fires</p> <pre><code>    this.events.once('addImage', this.handler, this)\n</code></pre> <p>background info:</p> <p>Events dispatch class </p> <p>ONMOVE event example https://labs.phaser.io/edit.html?src=src/input/game%20object/on%20move%20event.js&amp;v=3.55.2</p> <p>Object emits event https://labs.phaser.io/edit.html?src=src/events/listen%20to%20game%20object%20event.js&amp;v=3.55.2</p> <p>Move gameObject to mouse click (\"click to move\" movement\") using tween https://stackoverflow.com/questions/69759621/phaser-3-move-gameobject-to-mouse-click-click-to-move-movement-using-twee</p> <p>https://stackoverflow.com/questions/28522568/how-can-i-get-the-object-on-which-the-tween-in-acting-inside-the-oncomplete-call</p> <p>Tween handlers https://rexrainbow.github.io/phaser3-rex-notes/docs/site/tween/#play-task</p> <p>https://phasergames.com/phaser-3-snippets/phaser-3-tween-snippets/</p>"},{"location":"1-implementation/SERVEROBJECT-achievements/","title":"SERVEROBJECT achievements","text":"<p>The achievements object stores an array of timers</p> <p>(should this be objects?)</p> <p>For the achievement itemsbar item we use an achievementObject to store the achievements we reached, and their icons The timer object should be called achievementTimer Object? </p>"},{"location":"1-implementation/SERVEROBJECT-addressbook/","title":"SERVEROBJECT addressbook","text":"<p>We create an <code>addressbook</code> object as:</p> <pre><code>{\ncollection: \"addressbook\",\ncreate_time: \"2022-02-04T10:19:30Z\",\nkey: \"b9ae6807-1ce1-4b71-a8a3-f5958be4d340\",\npermission_read: 2,\npermission_write: 1,\nupdate_time: \"2022-02-04T10:19:30Z\",\nuser_id: \"5264dc23-a339-40db-bb84-e0849ded4e68\",\nvalue: {},\nversion: \"247e6735883b9170eed471dd411095cb\"\n}\n</code></pre> <p>value of the addressbook objects:   <pre><code>user_id: \"b9ae6807-1ce1-4b71-a8a3-f5958be4d340\"\nuser_name: \"user1\"\n</code></pre></p> <ul> <li>show empy addressbook when array is empty</li> <li>when deleting the last friend, show empty addressbook</li> </ul>"},{"location":"1-implementation/SERVEROBJECT-liked/","title":"SERVEROBJECT liked","text":"<pre><code>{\ncollection: \"drawing\"\nkey: \"1646914921380_witParelhoen\"\nurl: \"drawing/f42eb28f-9f4d-476c-9788-2240bac4cf48/0_1646914921380_witParelhoen.png\"\nuser_id: \"f42eb28f-9f4d-476c-9788-2240bac4cf48\"\n}\n</code></pre>"},{"location":"1-implementation/ServerCallsFormat/","title":"ServerCallsFormat","text":""},{"location":"1-implementation/ServerCallsFormat/#uploadimagename-type-json-img-statusversion-displayname","title":"uploadImage(name, type, json, img, status,version, displayName)","text":"<p>this function:  - gets upload URL for json and png - uploads blobs to aws - send an object to nakama containing: <pre><code>{\n  \"url\": \"drawing/5264dc23-a339-40db-bb84-e0849ded4e68/4_blauwSpotlijster.png\",\n  \"json\": \"drawing/5264dc23-a339-40db-bb84-e0849ded4e68/4_blauwSpotlijster.json\",\n  \"version\": 4,\n  \"displayname\": \"blauwSpotlijster\"\n}\n</code></pre> no response on succes</p>"},{"location":"1-implementation/ServerCallsFormat/#getuploadurltype-name-filetypeversion","title":"getUploadURL(type, name, filetype,version)","text":"<p>this function creates a signed upload url for file upload to AWS</p>"},{"location":"1-implementation/ServerCallsFormat/#usage-example","title":"usage example","text":"<pre><code>var version = 1 \nvar [jsonURL, jsonLocation] = await getUploadURL(\"home\", \"current\", \"json\", version)\n// creates route on aws \"/home/user_id/1_current.json\"\n</code></pre>"},{"location":"1-implementation/ServerCallsFormat/#updatetitlecollection-key-name-userid","title":"updateTitle(collection, key, name, userID)","text":"<p>this function: - picks up object - updates object.value.displayname - pushes object back to server</p>"},{"location":"1-implementation/ServerCallsFormat/#example","title":"example","text":"<pre><code>updateTitle(\"drawing\", \"12345345_geelkoe\", \"nieuwe naam\", \"`1231hh3123dasda\")\n</code></pre>"},{"location":"1-implementation/ServerCallsFormat/#updateobjecttype-name-value-pub-userid","title":"updateObject(type, name, value, pub, userID)","text":"<p>userID is optional, only necessary for admin and moderator functions.</p>"},{"location":"1-implementation/ServerCallsFormat/#example-addressbook","title":"Example (addressbook):","text":"<pre><code>const type = \"addressbook\"\nconst name = type + \"_\" + ManageSession.userProfile.id\nconst value = '{\"user_id\": \"b9ae6807-1ce1-4b71-a8a3-f5958be4d340\", \"posX\": \"500\", \"posY\": \"110\"}'\nconst pub = 2\n\nupdateObject(type, name, value, pub)\n</code></pre>"},{"location":"1-implementation/ServerCallsFormat/#getaccountid-avatar","title":"getAccount(id, avatar)","text":"<p><pre><code>0:[\n{\navatar_url: \"avatar/f42eb28f-9f4d-476c-9788-2240bac4cf48/current.png\",\ncreate_time: \"2021-10-11T11:32:02Z\",\ndisplay_name: undefined,\nedge_count: 0,\nfacebook_id: undefined,\ngamecenter_id: undefined,\ngoogle_id: undefined,\nid: \"f42eb28f-9f4d-476c-9788-2240bac4cf48\",\nlang_tag: \"en\",\nlocation: undefined,\nmetadata:{\n          azc: \"Amsterdam\",\n          location: \"ArtworldAmsterdam\",\n          posX: -122.62672,\n          posY: 22.468008,\n          role: \"speler\",\n          user_id: \"\",\n}\nonline: true,\nsteam_id: undefined,\ntimezone: undefined,\nupdate_time: \"2022-02-08T13:02:37Z\",\nurl: \"https://artworldstudioplay.s3.eu-central-1.amazonaws.com/avatar/f42eb28f-9f4d-476c-9788-2240bac4cf48/current.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAR7FDNFNP252ENA7M%2F20220208%2Feu-central-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20220208T130243Z&amp;X-Amz-Expires=86400&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=fbf4c90016829b9ad0376fd0b7c96b563a0dfd16d46f0d6289287a444fa8604c\",\nusername: \"user33\",\n},\n]\n</code></pre> The url is the actual avatar url, the url is called via getAccount, getUrl, but with a couple of await functions it takes a bit for the url to load via the getAccount function.</p>"},{"location":"1-implementation/ServerCallsFormat/#getavataravatar_url","title":"getAvatar(avatar_url)","text":""},{"location":"1-implementation/ServerCallsFormat/#uploadavatardata","title":"uploadAvatar(data)","text":""},{"location":"1-implementation/ServerCallsFormat/#deletefiletypefileuser","title":"deleteFile(type,file,user)","text":""},{"location":"1-implementation/ServerCallsFormat/#adding-data-eg-locations-to-the-backend","title":"adding data (eg locations) to the backend","text":"<p><code>function updateObject(type, name, value, pub)</code></p> <p>Example: type: \"home\" (collection) name = \"hansjes huisje\" (key) value = object with keys (value) pub: permission_read (pub)  </p> <p>updateObject(\"location\", name, value, true)</p>"},{"location":"1-implementation/ServerCallsFormat/#listobjectstype-userid-limit-page","title":"listObjects(type, userID, limit, page)","text":"<p>type = \"location\"</p> <p>userID = per user, null to get all users</p> <p>limit = how many you want to get(standard 100)</p> <p>page = index of limit(if limit = 100, index 0 = 1 - 100, index 1 = 101 -200, index 2 = 202 - 300 etc...)</p>"},{"location":"1-implementation/ServerCallsFormat/#examples","title":"examples","text":"<p>getting a users home object</p> <pre><code>listObjects('home','5264dc23-a339-40db-bb84-e0849ded4e68')\n</code></pre> <p>returns the object:</p> <pre><code>[\n  {\n    \"collection\": \"home\",\n    \"key\": \"Amsterdam\",\n    \"permission_read\": 2,\n    \"permission_write\": 1,\n    \"value\": {\n      \"url\": \"home/5264dc23-a339-40db-bb84-e0849ded4e68/current.png\",\n      \"posX\": 228.16,\n      \"posY\": 57.66,\n      \"userName\": \"user11\"\n    },\n    \"version\": \"d1be852d6a66654ec9faa878fcb41b7d\",\n    \"user_id\": \"5264dc23-a339-40db-bb84-e0849ded4e68\",\n    \"create_time\": \"2022-01-12T12:31:53Z\",\n    \"update_time\": \"2022-01-13T15:45:02Z\"\n  }\n]\n</code></pre>"},{"location":"1-implementation/ServerCallsFormat/#convert-images","title":"convert images","text":"<p><code>convertImage(path,size, format)</code></p> <p>output:</p> <p><code>\"https://d3hkghsa3z4n1z.cloudfront.net/fit-in/64x64/filters:trim()/avatar/4ced8bff-d79c-4842-b2bd-39e9d9aa597e/current.png?signature=cbda2578e5612c70c009ebc6e0424e9025078aa94517543b310bf01eedefb167\"</code></p> <p>size and format at not both required to work, either one or both will also function for example:</p> <p><code>convertImage(path,, format)</code> </p> <p>This is a replacement for getAvatar()</p> <p>if needed more filters can be added in the future, see: https://docs.aws.amazon.com/solutions/latest/serverless-image-handler/thumbor-filters.html</p>"},{"location":"1-implementation/ServerCallsFormat/#listallobjectstype-id-limit-cursor","title":"listAllObjects(type, id, limit, cursor)","text":"<p><code>type</code> is eg drawing, location, etc ...   <code>id</code> is userID(or <code>undefined</code>, but not <code>null</code> or <code>\"\"</code>)   <code>limit</code> is the max number of objects you want to receive (either by page or in total)   <code>cursor</code> is on the first call ```undefined```` (just empty), when supplied, it defines the next page of limit-number of objects. The cursor is the last objects update time, so: objects[limit - 1].update_time    </p> <p>Results come back within .objects array:    </p> <pre><code>[\n{\ncollection: \"drawing\"\ndownloaded: true\nkey: \"2023-01-02T21_50_42_GeelAvoceta\"\npermission_read: 1\nread: 1\nupdate_time: \"2023-01-20T16:55:15.02286+01:00\"\nuser_id: \"f011a5dc-901a-42c0-9589-587b389d1e3e\"\nusername: \"user11\"\nvalue: \n      displayname: \"bloem\"\n      url: \"drawing/f011a5dc-901a-42c0-9589-587b389d1e3e/0_2023-01-02T21_50_42_GeelAvoceta.png\"\n      version: \"0\"\n},\n.....\n]\n</code></pre> <p><code>update_time: \"2023-01-20T16:55:15.02286+01:00\"</code> of the last object is used as the cursor to get the next page of objects.</p>"},{"location":"1-implementation/ServerCallsFormat/#validatestringtypeinput","title":"validate(string,type,input)","text":""},{"location":"1-implementation/ServerCallsFormat/#types","title":"types","text":"<p>email - validates email adresses</p> <p>password - validates length is betweenm 5 and 10 characters</p> <p>repeat password - checks if password and repeat password are identical</p> <p>special - checks if the value contains no special characters</p>"},{"location":"1-implementation/ServerCallsFormat/#examples_1","title":"examples:","text":"<p>can be used in 2 ways, inline, automatically sets border to red if fail</p> <pre><code>&lt;input\n    type=\"text\"\n    placeholder=\"Enter Username\"\n    name=\"username\"\n    id=\"username\"\n    bind:value={username}\n    on:keyup={async input =&gt; {await validate(username,\"special\",input)}}\n    required\n/&gt;\n</code></pre> <p>or can used within a function as following: <pre><code>if(await validate(email,\"email\")){\n// run action if valid\n} else {\n// run if invalid\n)\n</code></pre></p>"},{"location":"1-implementation/ServerCallsFormat/#setloaderstate","title":"setLoader(state)","text":"<p><code>setLoader(true)</code> sets loading screen on</p> <p><code>setLoader(false)</code> sets loading screen off</p>"},{"location":"1-implementation/ServerCallsFormat/#getallhouseslocationuser_id","title":"getAllHouses(location,user_id)","text":"<p>Gives you all the houses objects within the location, optionally add a user_id example result: <pre><code>[\n  {\n    \"read\": 2,\n    \"artworks\": {\n      \"stopmotion\": 1,\n      \"drawing\": 3\n    },\n    \"username\": \"user6\",\n    \"key\": \"Amsterdam\",\n    \"collection\": \"home\",\n    \"update_time\": \"2022-08-08T15:17:06.817697+02:00\",\n    \"permission_read\": 2,\n    \"value\": {\n      \"username\": \"user6\",\n      \"url\": \"home/fcbcc269-a109-4a4b-a570-5ccafc5308d8/5_current.png\",\n      \"posX\": -904.9999877562127,\n      \"posY\": 72.49999139457941,\n      \"version\": 5\n    },\n    \"user_id\": \"fcbcc269-a109-4a4b-a570-5ccafc5308d8\"\n  },\n</code></pre></p>"},{"location":"1-implementation/Steps-to-add-a-new-world/","title":"Steps to add a new world","text":"<p>Making a new world:</p> <ol> <li>CHECK THAT nakama.js is SET TO ARTWORLD SERVER!! on the register page it is visible on which server you are</li> <li>make assets smaller (compress)    a. jpeg for the background: 5000x5000pix, jpeg quality 60%, aim is 1.3Mb file size max.    b. run the png script for pngs</li> <li>make assets folder (world_xxx) in public&gt;assets and place assets in folder</li> <li>making a new scene file (duplicate previous world )</li> <li>change the names inside the scene file</li> <li>put assets in world, with the correct keys</li> <li>adding the scene to the constans.js file</li> <li>adding the scene to gameConfig.js</li> <li>add the new portal to artworld.js    a. this.load.image for the portal    b. locationVector and new GenerateLocation    c. correct position and size of portal in artworld with gameEdit mode (shift alt e f)</li> <li>correct portal to artworld with gameEdit mode</li> <li>a. make sure the scene is added to the gameconfig.js file    b. make QR codes with the right nakama server    c. paste users in google sheet    d. save QR images    e. load QR sheets with 24 images</li> <li>place all houses in world with gameEdit mode, save with U key (nakama.js must be set to ARTWORLD otherwise the data is not saved in the right database!)</li> <li>push new code to github</li> <li>deploy new code to server</li> </ol>"},{"location":"1-implementation/Storage.js/","title":"Storage.js","text":"<p>Storage.js is there to create a bridge between local storage(svelte sessions and accessible arrays for Phaser) and the server storage.</p>"},{"location":"1-implementation/Storage.js/#achievements","title":"Achievements","text":""},{"location":"1-implementation/Storage.js/#likes","title":"Likes","text":""},{"location":"1-implementation/Storage.js/#addressbook","title":"Addressbook","text":""},{"location":"2-research-notes/Icons-and-svg-FREE/","title":"Icons and svg FREE","text":""},{"location":"2-research-notes/Icons-and-svg-FREE/#free","title":"Free","text":"<p>https://www.svgrepo.com/</p> <p>https://icons8.com/icons/set/svg</p> <p>https://freeicons.io/</p> <p>https://uxwing.com/</p> <p>https://simpleicons.org/</p>"},{"location":"2-research-notes/Icons-and-svg-FREE/#payed","title":"Payed","text":"<p>https://www.flaticon.com/</p> <p>https://www.freepik.com/</p>"},{"location":"2-research-notes/phaser3/A-canvas-can-be-used-as-a-Texture/","title":"A canvas can be used as a Texture","text":"<p>addCanvas(key, source [, skipCache])</p> <p>Creates a new Canvas Texture object from an existing Canvas element and adds it to this Texture Manager, unless skipCache is true.</p> <p>Parameters:</p> <p>Name    Type    Argument    Default Description key string          The unique string-based key of the Texture. source  HTMLCanvasElement           The Canvas element to form the base of the new Texture. skipCache   boolean   false   Skip adding this Texture into the Cache? Example: https://phaser.io/examples/v3/view/textures/create-canvas <p>addGLTexture(key, glTexture [, width] [, height])</p> <p>Takes a WebGL Texture and creates a Phaser Texture from it, which is added to the Texture Manager using the given key.</p> <p>This allows you to then use the Texture as a normal texture for texture based Game Objects like Sprites.</p> <p>If the width and height arguments are omitted, but the WebGL Texture was created by Phaser\u2019s WebGL Renderer and has glTexture.width and glTexture.height properties, these values will be used instead.</p> <p>This is a WebGL only feature.</p> <p>addImage(key, source [, dataSource])</p> <p>Adds a new Texture to the Texture Manager created from the given Image element.</p> <p>dataSource  HTMLImageElement | HTMLCanvasElement</p> <p>addRenderTexture(key, renderTexture)</p> <p>Adds a Render Texture to the Texture Manager using the given key. This allows you to then use the Render Texture as a normal texture for texture based Game Objects like Sprites.</p> <p>renderTexture   Phaser.GameObjects.RenderTexture</p>"},{"location":"2-research-notes/phaser3/Add-3D-to-Phaser/","title":"Add 3D to Phaser","text":"<p>Build fake 3D HTML5 games with Phaser, Arcade physics, three.js and Phaser 3D library</p> <p>https://enable3d.io/docs.html</p> <p>https://enable3d.io/examples.html</p> <p>https://enable3d.io/examples/custom-setup.html</p> <p>https://enable3d.io/examples/isometric-game-orthographic-camera.html</p> <p>https://enable3d.io/examples/load-and-use-textures.html</p> <p>https://enable3d.io/examples/shape-showcase.html</p> <p>https://enable3d.io/examples/fbx-loader-and-animations.html</p> <p>discussion:  https://phaser.discourse.group/t/phaser-in-3d-with-physics-yes-it-works-using-enable3d/4610/35</p> <p>Sync 2D to 3D https://enable3d.io/examples/sync-2d-to-3d.html</p> <p>Sync 3D to 2D https://enable3d.io/examples/sync-3d-to-2d.html</p>"},{"location":"2-research-notes/phaser3/Add-a-plugin-to-a-scene/","title":"Add a plugin to a scene","text":"<p>Global Plugin:</p> <p>https://phaser.io/examples/v3/view/plugins/global-scene-plugin</p>"},{"location":"2-research-notes/phaser3/Add-scene-on-the-fly/","title":"Add scene on the fly","text":"<p>https://phaser.io/examples/v3/view/scenes/scene-add </p> <p>Add Scene After Game, with passing on data </p> <p>Add Scene From Another Scene </p> <p>Add and start Scene</p> <p>Scene Files Payload  Files specified in the Scene config files payload will be loaded in before the Scene is started, meaning they're available before even the Scene.preload function (if set) is called</p> <p>This is perfect for loading in small JSON config files for example, or a tiny amount of preloader assets that the preloader itself needs to use.</p>"},{"location":"2-research-notes/phaser3/Automatic-Scene-loading-flag/","title":"Automatic Scene loading flag","text":"<pre><code>super({ key: \u201cAZC1_Scene\u201d, active: true});\n</code></pre> <p>when there is a active: true flag, the scene gets loaded even when it is not the first in line.</p> <p>Scenes get loaded in order of the config scenes: [scene1, scene2, scene3]</p> <p>scene1 gets loaded first, but scene2 get loaded after that when active: true, default is: active: false</p>"},{"location":"2-research-notes/phaser3/Camera-effects%2C-colors%2C-fade/","title":"Camera effects, colors, fade","text":"<p>Fade camera out from color: <pre><code>this.cameras.main.fadeFrom(2000, Phaser.Math.Between(50, 255), Phaser.Math.Between(50, 255), Phaser.Math.Between(50, 255));\n\n    this.cameras.main.on('camerafadeoutcomplete', function () {\n\n        this.scene.restart();\n\n    }, this);\n</code></pre> Fade camera in to color:</p> <pre><code>var red = Phaser.Math.Between(50, 255);\nvar green = Phaser.Math.Between(50, 255);\nvar blue = Phaser.Math.Between(50, 255);\n\nthis.cameras.main.fade(2000, red, green, blue);\n</code></pre>"},{"location":"2-research-notes/phaser3/Camera-follow/","title":"Camera follow","text":"<p>Camera follows player with:</p> <pre><code>this.gameCam = this.cameras.main; \n\nthis.gameCam.startFollow(this.player);\n</code></pre> <p>//setBounds has to be set before follow, otherwise the camera doesn\u2019t follow!</p> <p>Order is:</p> <pre><code>this.gameCam = this.cameras.main;\n\nthis.gameCam.setBounds(0, 0, map.widthInPixels, map.heightInPixels);\n\nthis.gameCam.startFollow(this.player);\n</code></pre>"},{"location":"2-research-notes/phaser3/Change-Gravity-per-sce/","title":"Change Gravity per sce","text":"<p>You can specify the gravity for a particular scene by redefining the physics settings in the scene\u2019s constructor method. <pre><code>class FirstScene extends Phaser.Scene {\n  constructor() {\n    super({\n      key: 'first',\n      physics: {\n        default: 'arcade',\n        arcade: { \n          gravity: { y: 2000 }\n        }\n      }\n    });\n} \n</code></pre></p> <p>Check out the API Docs to see what else can be configured on a scene-by-scene basis.</p>"},{"location":"2-research-notes/phaser3/Changing-the-collision-shape%2C-size%2C-mouse-input-events/","title":"Changing the collision shape, size, mouse input events","text":"<p>All collision examples:</p> <p>http://labs.phaser.io/index.html?dir=physics/arcade/&amp;q=</p> <p></p> <p>The video explains how to set the size of the collision rectangle</p> <p>Eg star object set the box to 100, 200 pix, true sets it in the middle <pre><code>star.body.setSize(100,200, true);\n</code></pre> Change the shape to a circle: <pre><code>star.body.setCircle(100, -100 + star.body.halfHeight, -100 + star.body.halfWidth)\n</code></pre></p> <p>Center the circle</p> <p>https://phaser.discourse.group/t/circular-collider-using-setcircle-is-not-centred-properly/8263/3</p> <p>.setInteractive is to get pointer input events. Change the shape/ hit area like this:</p> <pre><code>let star = this.add.image(100,100, \u201cstar\u201d)\nvar shape = new Phaser.Geom.Polygon([ 0, 143, 200, 143, 220, 200, 0, 200 ]);\nstar.setInteractive(shape, Phaser.Geom.Polygon.Contains);\nthis.input.on(\u2018gameobjectover\u2019, function (pointer, gameObject) {\ngameObject.setTint(0x7878ff); console.log(\u201cmouse over\u201d)\n});\nthis.input.on(\u2018gameobjectout\u2019, function (pointer, gameObject) {\ngameObject.clearTint();\n});\n// Draw the polygon var graphics = this.add.graphics({ x: star.x, y: star.y});\ngraphics.lineStyle(2, 0x00aa00);\ngraphics.beginPath();\ngraphics.moveTo(shape.points[0].x, shape.points[0].y);\nfor (var i = 1; i &lt; shape.points.length; i++) { graphics.lineTo(shape.points[i].x, shape.points[i].y); }\ngraphics.closePath(); graphics.strokePath();\n</code></pre> <p></p> <p>mousing over the green shape makes the start change color</p> <p>Mouse input with setInteractive, input area, attach input to GameObject: <pre><code>this.location2DialogBox = this.add.graphics();\n\nthis.location2DialogBox.fillStyle(0xfffff00, 0.4)\n\nthis.location2DialogBox.fillRoundedRect(0, 0, mainWidth, mainHeight, 32) this.location2DialogBox.setVisible(false)\n\nthis.realtimeTexture = this.add.renderTexture(0, 0, mainWidth, mainHeight);\n\nthis.realtimeTexture.draw(this.location2DialogBox);\n\nthis.realtimeTexture.setInteractive(new Phaser.Geom.Rectangle(0, 0, mainWidth, mainWidth), Phaser.Geom.Rectangle.Contains)\n\nthis.realtimeTexture.on(\u2018pointerdown\u2019, () =&gt; { this.enterLocation2Scene() });\n</code></pre></p> <p>Add an existing GameObject to the physics</p> <p>this.physics.add.existing(Gameobject)</p> <p>Works also with graphics</p> <p>using matter physics:</p> <p>https://www.thepolyglotdeveloper.com/2020/08/use-matterjs-physics-sprite-collisions-phaser-game/</p>"},{"location":"2-research-notes/phaser3/Check-world-bounds/","title":"Check world bounds","text":""},{"location":"2-research-notes/phaser3/Check-world-bounds/#to-enable-the-player-to-collide-with-the-world-bounds-in-player","title":"To enable the player to collide with the world bounds (in Player):","text":"<pre><code>        scene.player.setCollideWorldBounds(true)\n        scene.player.onWorldBounds = true\n\n        scene.player.body.onWorldBounds = true\n        scene.player.body.checkCollision.up = true\n        scene.player.body.checkCollision.down = true\n        scene.player.body.checkCollision.left = true\n        scene.player.body.checkCollision.right = true\n</code></pre>"},{"location":"2-research-notes/phaser3/Check-world-bounds/#to-catch-the-collided-object-with-the-world-bounds-in-the-scene","title":"To catch the collided object with the world bounds (in the scene):","text":"<pre><code>    this.physics.world.on('worldbounds', (collidingObject) =&gt; {\n\n    })\n</code></pre>"},{"location":"2-research-notes/phaser3/DOM-elements-in-phaser-and-as-input/","title":"DOM elements in phaser and as input","text":"<p>Css Text</p> <p>https://phaser.io/examples/v3/view/game-objects/dom-element/css-text</p> <p>Css Style Object</p> <p>https://phaser.io/examples/v3/view/game-objects/dom-element/css-style-object</p> <p>All dome examples:</p> <p>https://phaser.io/examples/v3/category/game-objects/dom-element</p>"},{"location":"2-research-notes/phaser3/Datamanager-system-registry/","title":"Datamanager system registry","text":"<p>A reference to the global registry. This is a game-wide instance of the Data Manager, allowing you to exchange data between Scenes via a universal and shared point.</p> <p>In the default set-up you can access this from within a Scene via the this.registry property.</p> <p>Example: Central Data Storage and exchange between Scenes with Data Registry</p>"},{"location":"2-research-notes/phaser3/Dragging/","title":"Dragging","text":""},{"location":"2-research-notes/phaser3/Dragging/#via-general-purpose-thisinputondrag","title":"Via general purpose this.input.on(\u2018drag\u2019","text":"<pre><code>var container = this.add.container(400, 300, [ bg, text ]);\n\ncontainer.setSize(bg.width, bg.height);\n\ncontainer.setInteractive();\n\nthis.input.setDraggable(container);\n\nthis.input.on('drag', function (pointer, gameObject, dragX, dragY) {\n\ngameObject.x = dragX;\ngameObject.y = dragY;\n\n});\n</code></pre>"},{"location":"2-research-notes/phaser3/Dragging/#2-via-per-object-setinteractive-draggable-true","title":"2. Via per object .setInteractive( { draggable: true })","text":"<pre><code>this.mario_star.setInteractive({ draggable: true })\n\nthis.mario_star.on('dragstart', function (pointer) {\n        this.setTint(0xff0000);\n    })\n\nthis.mario_star.on('drag', function (pointer, dragX, dragY) {\n        this.x = dragX;\n        this.y = dragY;\n    })\n\nthis.mario_star.on('dragend', function (pointer) {\n\n        this.clearTint();\n\n    })\n</code></pre>"},{"location":"2-research-notes/phaser3/Dragging/#3-via-general-input-check-but-with-with-checking-turning-onoff-listeners","title":"3. Via general input check but with with checking, turning on/off listeners","text":"<p>https://www.youtube.com/watch?v=t56DvozbZX4&amp;ab_channel=WClarkson</p> <pre><code>var dot = this.add.image(xx, yy, \"dot\" +i\ndot.setInteractive()\n}\nthis.input.on('pointerdown', this.startDrag, this)\n}\n\nstartDrag(pointer, targets){\nthis.input.off('pointerdown', this.startDrag, this) // turn off input when there is already a target(!)\nthis.dragObj = targets[0] //first gameObject that is hit by the mouse pointer\nthis.input.on('pointermove', this.doDrag, this)\nthis.input.on('pointerup', this.stopDrag, this)\n}\n\ndoDrag(pointer) {\nthis.dragObj.x = pointer.x\nthis.dragObj.y = pointer.y\n}\n\nstopDrag(){\nthis.input.on('pointerdown', this.startDrag, this) // turn back on input for pointerdown(!)\nthis.input.off('pointermove', this.doDrag, this) // turn off drag\nthis.input.off('pointerup', this.stopDrag, this)\n}\n</code></pre>"},{"location":"2-research-notes/phaser3/Drawing-ideas-and-examples-Phaser/","title":"Drawing ideas and examples Phaser","text":"<p>Drawing with rope: https://phaser.io/examples/v3/view/game-objects/rope/draw-rope-gradient</p> <p>Draw on live texture: https://phaser.io/examples/v3/view/game-objects/render-texture/draw-on-texture</p> <p>erase part of texture: https://phaser.io/examples/v3/view/game-objects/render-texture/erase-part-of-render-texture</p> <p>Draw with sprites: https://phaser.io/examples/v3/view/input/pointer/draw-sprites</p> <p>color picker:</p> <p>https://phaser.io/examples/v3/view/game-objects/shapes/iso-draw</p> <p>Draw with interpolation:</p> <p>https://phaser.io/examples/v3/view/game-objects/render-texture/paint-interpolated</p>"},{"location":"2-research-notes/phaser3/Drawing-ideas-and-examples-Phaser/#draw-with-mouse-or-shapes-in-a-rendertexture","title":"Draw (with mouse or shapes) in a RenderTexture","text":"<p>A Render Texture is a special texture that allows any number of Game Objects to be drawn to it. You can take many complex objects and draw them all to this one texture, which can they be used as the texture for other Game Object\u2019s. It\u2019s a way to generate dynamic textures at run-time that are WebGL friendly and don\u2019t invoke expensive GPU uploads.</p> <p>Note that under WebGL a FrameBuffer, which is what the Render Texture uses internally, cannot be anti-aliased. This means that when drawing objects such as Shapes to a Render Texture they will appear to be drawn with no aliasing, however this is a technical limitation of WebGL. To get around it, create your shape as a texture in an art package, then draw that to the Render Texture.</p> <p>https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.RenderTexture.htmlhttps://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.RenderTexture.html</p> <p>Example: https://phaser.io/examples/v3/view/game-objects/render-texture/shape-to-render-texture#</p> <p>Draw on live texture: https://phaser.io/examples/v3/view/game-objects/render-texture/draw-on-texture</p>"},{"location":"2-research-notes/phaser3/Experimenting-with-different-backgrounds/","title":"Experimenting with different backgrounds","text":""},{"location":"2-research-notes/phaser3/Experimenting-with-different-backgrounds/#grid","title":"Grid","text":"<p>var g1 = this.add.grid(0, 0, 3200, 3200, 32, 32, 0xFFFFFF)</p>"},{"location":"2-research-notes/phaser3/Experimenting-with-different-backgrounds/#map-with-dot-as-tileset","title":"Map with dot as Tileset","text":"<p>The map is still generated as an image, so there is no benefit when zooming in.</p>"},{"location":"2-research-notes/phaser3/Experimenting-with-different-backgrounds/#dot-repeating-with-grid-methods","title":"Dot repeating with grid methods","text":"<p><pre><code>let group = this.add.group({ key: 'dot', repeat: 8000, setX: { x: 0, y: 0, stepX: 64 } });\n\nPhaser.Actions.GridAlign(group.getChildren(), { width: 100, height: 200, cellWidth: 64, cellHeight: 64, x: 16, y: 16 });\n</code></pre> There is not a sharpness advantage, because the SVG is being converted to an image when loading. You can preload the SVG scaled, that will actually create a scaled up image. See: https://phaser.io/examples/v3/view/loader/svg/load-svg-with-scale</p>"},{"location":"2-research-notes/phaser3/Experimenting-with-different-backgrounds/#graphics-elements","title":"graphics elements","text":"<pre><code>let circles = [] &lt;br&gt;&lt;br&gt;const graphics = this.add.graphics();&lt;br&gt;&lt;br&gt;graphics.fillStyle(0xffffff); &lt;br&gt;graphics.fillRect(0, 0, 3000, 3000);&lt;br&gt;&lt;br&gt;graphics.fillStyle(color, alpha);\n\nconst offset = 50 &lt;br&gt;for (let i = 0; i &amp;lt; 2000; i += offset) { &lt;br&gt;for (let j = 0; j &amp;lt; 2000; j += offset) { &lt;br&gt;circles[i] = graphics.fillCircle(i, j, 2); \n</code></pre> <p>This works but there is slowness when loading the array, and when the player is moving accross the field the graphics scrolling is not smooth</p>"},{"location":"2-research-notes/phaser3/Experimenting-with-different-backgrounds/#this-works-really-well","title":"This works really well:","text":""},{"location":"2-research-notes/phaser3/Experimenting-with-different-backgrounds/#here-is-a-way-to-generate-patterns-on-a-texture-with-an-array","title":"Here is a way to generate patterns on a texture with an array:","text":"<p><pre><code>et cross = [\n'.....',\n '..1..',\n '.111.',\n '..1..',\n '.....',\n ]\n\n//generate the texture from the array \n\nthis.textures.generate('cross', { data: cross, pixelWidth: 4 });\n\n//display the texture on an image \n\nconst gridWidth = 4000 \nconst offset = 40\n\nfor (let i=0;i&lt; gridWidth; i += offset){ for (let j=0;j&lt; gridWidth; j += offset){ this.add.image(i, j, 'cross').setOrigin(0, 1); } }\n</code></pre> </p> <p>Draw a shape to a texture, and repeat it there.</p> <p>Slow to generate, but fast after that.</p> <p></p> <pre><code>// //display the texture on an image\n    const gridWidth = 4000\n    const offset = 50\n\n    let rt = this.add.renderTexture(0, 0, gridWidth, gridWidth);\n    let circle = this.add.circle(-1000, -1000, 6, 0x6666ff)\n    for (let i = 0; i &lt; gridWidth; i += offset) {\n      for (let j = 0; j &lt; gridWidth; j += offset) {\n        rt.draw(circle, i, j);\n      }\n    }\n</code></pre> <p></p> <pre><code>let cross = [\n      '.....',\n      '..1..',\n      '.111.',\n      '..1..',\n      '.....',\n\n    ]\n\n    //generate the texture from the array\n    this.textures.generate('cross', { data: cross, pixelWidth: 2 });\n\n    //display the texture on an image\n    const gridWidth = 4000\n    const offset = 50\n\n    for (let i = 0; i &lt; gridWidth; i += offset) {\n      for (let j = 0; j &lt; gridWidth; j += offset) {\n        this.add.image(i, j, 'cross').setOrigin(0, 1);\n      }\n    }\n\n    let graphics = this.add.graphics();\n\n    graphics.fillStyle(0x0000ff, 1);\n\n    graphics.fillCircle(800, 300, 200);\n\n    for (let i = 0; i &lt; 250; i += 60) {\n      graphics.lineStyle(5, 0xFF00FF, 1.0);\n      graphics.beginPath();\n      graphics.moveTo(800, 200 + i);\n      graphics.lineTo(1200, 200 + i);\n      graphics.closePath();\n      graphics.strokePath();\n    }\n\n\n    for (let i = 0; i &lt; 250; i += 60) {\n      graphics.lineStyle(5, 0xFF00FF, 1.0);\n      graphics.beginPath();\n      graphics.moveTo(900 + i, 150);\n      graphics.lineTo(900 + i, 550);\n      graphics.closePath();\n      graphics.strokePath();\n    }\n\n\n\n    let rectangle = this.add.graphics();\n    rectangle.setVisible(false);\n    rectangle.fillGradientStyle(0xff0000, 0xff0000, 0xffff00, 0xffff00, 1);\n    rectangle.fillRect(0, 0, 400, 400);\n\n    let rt = this.add.renderTexture(200, 100, 600, 600);\n    let rt2 = this.add.renderTexture(100, 600, 600, 600);\n\n    rt.draw(rectangle);\n    rt2.draw(rectangle);\n\n    let eraser = this.add.circle(0, 0, 190, 0x000000);\n    eraser.setVisible(false);\n\n    rt.erase(eraser, 200, 200);\n\n    rt2.erase(rt, 0, 0)\n\n    rt2.x = 400\n    rt2.y = 600\n</code></pre>"},{"location":"2-research-notes/phaser3/Groups-vs-containers/","title":"Groups vs containers","text":"<p>We want to get a list of all Network Players. getChildren() can be called</p> <p>Groups can be used to get the members with getChildren() Children of the group can\u2019t be moved with the grouping</p> <p>Containers can be used to move members.</p> <p>does not work: * this.getChildren() * this.scene.getChildren() * this.Scene.getChildren() Works: * Group.getChildren()</p> <pre><code>group.create(400, 300, \u2018phaser\u2019);\n//  The above is a short-cut for:\n//  var sprite = this.add.sprite(400, 300, 'phaser');\n//  group.add(sprite);\n</code></pre> <p>Sprite pool example</p> <p>https://phaser.io/examples/v3/view/game-objects/group/sprite-pool</p> <p>Group createCallback</p> <pre><code>group = this.add.group({\ndefaultKey: \u2018alien\u2019,\nmaxSize: 100,\ncreateCallback: function (alien) {\nalien.setName(\u2018alien\u2019 + this.getLength());\nconsole.log(\u2018Created\u2019, alien.name);\n},\nremoveCallback: function (alien) {\nconsole.log(\u2018Removed\u2019, alien.name);\n}\n</code></pre> <pre><code>this.time.addEvent({\ndelay: 100,\nloop: true,\ncallback: addAlien\n});\n</code></pre> <p>group.children.iterate</p> <pre><code>// Find first inactive sprite in group or add new sprite, and set position\nconst alien = group.get(x, y);\n</code></pre>"},{"location":"2-research-notes/phaser3/How-to-manage-lots-of-particle-emitter-managers/","title":"Note: How to manage lots of Particle Emitter (Managers)?","text":"<p>https://phaser.discourse.group/t/how-to-manage-lots-of-particle-emitter-managers/12654</p> <p>You could pool them, but you might not have to.</p> <p>For most situations you need only one manager per particle texture. You can create as many emitters as you need from one manager. Remove an emitter you never want to use again. To disable an emitter temporarily, you can set its\u00a0<code>on = false</code>\u00a0and\u00a0<code>visible = false</code>.</p>"},{"location":"2-research-notes/phaser3/Infinite-world/","title":"Infinite world","text":"<p>Top-down Infinite Terrain Generation with Phaser 3</p> <p>https://learn.yorkcs.com/2019/02/25/top-down-infinite-terrain-generation-with-phaser-3/</p> <p>How to Create an Infinite Climbing Game in Phaser</p> <p>https://www.joshmorony.com/how-to-create-an-infinite-climbing-game-in-phaser/</p> <p>How to Make an Infinitely Scrolling Game with Phaser</p> <p>https://gamedevacademy.org/how-to-make-an-infinitely-scrolling-game-with-phaser/</p> <p>Performance of really big tile maps https://phaser.discourse.group/t/performance-of-really-big-tile-maps/1192/9</p>"},{"location":"2-research-notes/phaser3/LoaderPlugin-feedback/","title":"LoaderPlugin feedback","text":""},{"location":"2-research-notes/phaser3/LoaderPlugin-feedback/#loaderplugin","title":"LoaderPlugin","text":"<p>Good info: https://rexrainbow.github.io/phaser3-rex-notes/docs/site/loader/</p> <p>When queue has loaded and completed, it can be found through the key of the event listener:</p> <pre><code>this.load.once(\"complete\", (key) =&gt; {})\n</code></pre> <p>The key shows properties such as:</p> <pre><code>totalToLoad: 5\ntotalFailed: 0\ntotalComplete: 5\n</code></pre>"},{"location":"2-research-notes/phaser3/LoaderPlugin-feedback/#getting-loading-completion-feedback","title":"Getting loading completion feedback","text":"<p>this.load.image(key) will put the file in the queue</p> <p>this.load.start() starts the queue</p> <pre><code>this.load.image('cakewalk');\nthis.load.image('flectrum');\nthis.load.image('fork');\n\nthis.load.start()\n</code></pre> <p>this.load.on('complete', ...) fires when the queue is done loading all the images.</p> <pre><code>this.load.on('complete', subLoadCompleted, this);\n\nfunction subLoadCompleted ()\n{\n    console.log('Load Complete')\n}\n</code></pre> <p>Feedback about the download progress of  a specific file <pre><code> this.load.on('fileprogress', function (file, value) {\n\n        if (file.key === 'goldrunner')\n        {\n            progress.clear();\n            progress.fillStyle(0xffffff, 0.4);\n            progress.fillRect(450, 500 - (value * 400), 200, value * 400);\n        }\n    })\n</code></pre></p> <pre><code>    this.load.on('complete', function () {\n        progress.destroy()\n    })\n</code></pre>"},{"location":"2-research-notes/phaser3/LoaderPlugin-feedback/#get-filecomplete-on-a-specific-file-name","title":"Get filecomplete on a specific file name!!!","text":"<pre><code>this.load.on('filecomplete-image-taikodrummaster', addImage, this)\n\nfunction addImage (key, file)\n{\n    this.add.image(400, 300, key)\n}\n</code></pre> <p>For a spritesheet:</p> <pre><code>this.load.on('filecomplete-spritesheet-GAMEOVERExplosion', function (key, type, data) {\n    // Your handler code\n})\n</code></pre> <p>Phaser.Loader.Events FILE_COMPLETE</p> <p>https://phaser.io/examples/v3/view/loader/loader-events/file-complete-event-with-key</p> <p>https://phaser.io/examples/v3/view/loader/loader-events/file-complete-event#</p>"},{"location":"2-research-notes/phaser3/LoaderPlugin-feedback/#loader-key-object","title":"Loader key object","text":"<pre><code>animation: \u0192 (key, url, dataKey, xhrSettings)\naseprite: \u0192 (key, textureURL, atlasURL, textureXhrSettings, atlasXhrSettings)\natlas: \u0192 (key, textureURL, atlasURL, textureXhrSettings, atlasXhrSettings)\natlasXML: \u0192 (key, textureURL, atlasURL, textureXhrSettings, atlasXhrSettings)\naudio: \u0192 (key, urls, config, xhrSettings)\naudioSprite: \u0192 (key, jsonURL, audioURL, audioConfig, audioXhrSettings, jsonXhrSettings)\nbaseURL: \"\"\nbinary: \u0192 (key, url, dataType, xhrSettings)\nbitmapFont: \u0192 (key, textureURL, fontDataURL, textureXhrSettings, fontDataXhrSettings)\ncacheManager: CacheManager {game: Game, binary: BaseCache, bitmapFont: BaseCache, json: BaseCache, physics: BaseCache, \u2026}\ncrossOrigin: undefined\ncss: \u0192 (key, url, xhrSettings)\nglsl: \u0192 (key, url, shaderType, xhrSettings)\nhtml: \u0192 (key, url, xhrSettings)\nhtmlTexture: \u0192 (key, url, width, height, xhrSettings)\nimage: \u0192 (key, url, xhrSettings)\ninflight: Set {entries: Array(0)}\njson: \u0192 (key, url, dataKey, xhrSettings)\nlist: Set {entries: Array(0)}\nmaxParallelDownloads: 32\nmultiKeyIndex: 0\nmultiatlas: \u0192 (key, atlasURL, path, baseURL, atlasXhrSettings)\nobj: \u0192 (key, objURL, matURL, flipUVs, xhrSettings)\npack: \u0192 (key, url, packKey, xhrSettings)\npath: \"\"\nplugin: \u0192 (key, url, start, mapping, xhrSettings)\nprefix: \"\"\nprogress: 1\nqueue: Set {entries: Array(0)}\nscene: ArtworldAmsterdam {sys: Systems, worldSize: Vector2, debug: false, gameStarted: false, phaser: ArtworldAmsterdam, \u2026}\nsceneFile: \u0192 (key, url, xhrSettings)\nsceneManager: SceneManager {game: Game, keys: {\u2026}, scenes: Array(12), _pending: Array(0), _start: Array(0), \u2026}\nscenePlugin: \u0192 (key, url, systemKey, sceneKey, xhrSettings)\nscript: \u0192 (key, url, xhrSettings)\nscripts: \u0192 (key, url, xhrSettings)\nspritesheet: \u0192 (key, url, frameConfig, xhrSettings)\nstate: 3\nsvg: \u0192 (key, url, svgConfig, xhrSettings)\nsystems: Systems {scene: ArtworldAmsterdam, config: 'ArtworldAmsterdam', settings: {\u2026}, game: Game, sceneUpdate: \u0192, \u2026}\ntext: \u0192 (key, url, xhrSettings)\ntextureManager: TextureManager {_events: Events, _eventsCount: 0, game: Game, name: 'TextureManager', list: {\u2026}, \u2026}\ntilemapCSV: \u0192 (key, url, xhrSettings)\ntilemapImpact: \u0192 (key, url, xhrSettings)\ntilemapTiledJSON: \u0192 (key, url, xhrSettings)\ntotalComplete: 5\ntotalFailed: 0\ntotalToLoad: 5\nunityAtlas: \u0192 (key, textureURL, atlasURL, textureXhrSettings, atlasXhrSettings)\nvideo: \u0192 (key, urls, loadEvent, asBlob, noAudio, xhrSettings)\nxhr: {responseType: '', async: true, user: '', password: '', timeout: 0, \u2026}\nxml: \u0192 (key, url, xhrSettings)\n_deleteQueue: Set {entries: Array(0)}\n_events: Events {progress: Array(2), fileprogress: Array(2), complete: Array(2)}\n_eventsCount: 3\n</code></pre>"},{"location":"2-research-notes/phaser3/Loading-and-preloading/","title":"Loading and preloading","text":"<p>Create a preloading scene, show percentage loaded:</p> <p>https://gamedevacademy.org/creating-a-preloading-screen-in-phaser-3/?a=13</p> <p>dealing cards example https://blog.ourcade.co/posts/2020/phaser3-load-images-dynamically/</p> <p>phaser loader events https://newdocs.phaser.io/docs/3.55.2/events</p> <p>FILE_KEY_COMPLETE event https://newdocs.phaser.io/docs/3.55.2/Phaser.Loader.Events.FILE_KEY_COMPLETE</p> <p>FILE_PROGRESS event https://newdocs.phaser.io/docs/3.55.2/Phaser.Loader.Events.FILE_PROGRESS</p>"},{"location":"2-research-notes/phaser3/Loading-and-preloading/#loading-user-avatar-during-runtime","title":"Loading User Avatar - during runtime","text":"<p>his.load.image( this.playerAvatarName, manageSession.playerObjectSelf.url ); }</p> <p>this.load.once(Phaser.Loader.Events.COMPLETE, () =&gt; { // texture loaded so use instead of the placeholder this.player.setTexture(this.playerAvatarKey) console.log(\u201cplayer avatar has loaded \u201c) }) }</p> <p>this.load.start(); // load the image in memory</p> <p>The event to load a image or sprite works.</p> <p>I need to see if my method is save enough; I set a flag when the player is created (this.createdPlayer = true)</p> <p>Maybe it is saver to first create a general player, and then when the avatar is loaded, replace the image or sprite with this.player.setTexture(key, frame)</p> <p>heart1.setTexture(key [, frame]) </p> <p>https://www.html5gamedevs.com/topic/41170-how-can-i-change-the-image-of-a-sprite-during-update-function/</p> <p>img.setTexture(key, frame)</p> <p>https://phaser.discourse.group/t/how-to-switch-sprites-of-a-game-object/297/3</p> <p>See also phaser API:</p> <p>https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.Image.html</p> <p>https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.Sprite.html</p>"},{"location":"2-research-notes/phaser3/No-Physics-possible-between-Scenes/","title":"No Physics possible between Scenes","text":"<p>are separate in that way... (tried it)</p>"},{"location":"2-research-notes/phaser3/Pause-and-resume-a-scene/","title":"Pause and resume a scene","text":"<p>sleep and wake scene</p> <p>https://phaser.io/examples/v3/view/scenes/sleep-and-wake</p>"},{"location":"2-research-notes/phaser3/Pausing-game-engine/","title":"Note:  Pausing game engine","text":"<p>The closest would be</p> <pre><code>this.game.loop.sleep();\n</code></pre> <p>in v3.60 there will be</p> <pre><code>this.game.pause();\n</code></pre> <p>https://phaser.discourse.group/t/pausing-game-engine/12793/4</p>","tags":["game","pause"]},{"location":"2-research-notes/phaser3/Phaser---timed-Events/","title":"Phaser   timed Events","text":"<p>Run a function on a timer, optionally looped</p> <pre><code>timedEvent = this.time.addEvent({ delay: 50, callback: reduceHealth, callbackScope: this, loop: true });\n</code></pre> <p>Remove the timed event:</p> <pre><code>timedEvent.remove();\n</code></pre> <p>Pass extra arguments to the timed event:</p> <pre><code>this.time.addEvent({ delay: 2000, callback: this.enterLocationDialogBox, args: [player, location, show], loop: false })\n</code></pre> <p>standard javascript delay:</p> <pre><code>setTimeout(this.enterLocationDialogBox(player, location, show), 5000);\n</code></pre> <p>Rex Plugin: https://rexrainbow.github.io/phaser3-rex-notes/docs/site/timer/</p>"},{"location":"2-research-notes/phaser3/Physics---overlap/","title":"Physics   overlap","text":"<p>Standard use: GameObject1, GameObject2, functions, (processCallback), scope</p> <p>function: An optional callback function that is called if the objects collide.</p> <p>processCallback An optional callback function that lets you perform additional checks against the two objects if they collide. If this is set then collideCallback will only be called if this callback returns true.</p> <p>Example:</p> <pre><code>this.physics.add.overlap(this.player, this.location2, this.confirmEnterLocation, null, this);\n</code></pre> <p>The 2 Objects are automatically passed as arguments, the sprite as the first (https://phaser.discourse.group/t/passing-argments-into-functions/4411/2) So this is passed on to the function as such:</p> <p><pre><code>confirmEnterLocation(player, location) {\nconsole.log(player) //Object 1\nconsole.log(location) //Object 2\n}\n</code></pre> OVERLAP ZONE:</p> <p>https://phaser.io/examples/v3/view/physics/arcade/overlap-zone</p>"},{"location":"2-research-notes/phaser3/Scaling-the-game---res-and-ppi/","title":"Scaling the game   res and ppi","text":"<p>The best summary: https://www.joshmorony.com/how-to-scale-a-game-for-all-device-sizes-in-phaser/</p> <p><code>game = new Phaser.Game(   window.innerWidth * window.devicePixelRatio,   window.innerHeight * window.devicePixelRatio,   Phaser.CANVAS,   'gameArea' ); <pre><code>Scaling Game Assets\nThe other issue we run into when scaling is with the size of graphical assets (i.e player sprites, objects and so on). If you create some object at 300 x 300 pixels and it looks great on a device with a DPR of 1 (i.e your desktop computer or an iPhone 4) it will probably look teeny tiny on devices with a higher DPR.\n\nTake the iPhone 5 for example again, although the object is 300 x 300 pixels it will only look like it's 150 x 150 pixels. We need the asset to be twice as big for iPhone 5's, so how do we handle this?\n\nWhat you can do is create the object to suit the highest DPR you are supporting, which will likely be 3. This means that your 300 x 300 object should actually be 900 x 900. Then we scale it down in game to suit the device that it is actually on. On a device with a DPR of 3 we do nothing, with a DPR of 2 we will scale it down to 2/3rds of it's original size and for a device with a DPR of 1 we will scale it down to 1/3rd of its original size.\n\nTo do this, first you need to figure out what this scaleRatio is. Create a new globally stored variable with the following code:\n</code></pre> scaleRatio = window.devicePixelRatio / 3 <pre><code>and now whenever you add a new asset to the game, call the following method to scale it appropriately:\n</code></pre> myAsset.scale.setTo(scaleRatio, scaleRatio)</code> Now your asset will scale appropriately no matter what device your game is loaded on.</p> <p>many examples of fitting and scaling, resizing:</p> <p>https://phaser.io/examples/v3/category/scalemanager</p> <p>Basics to Deal with Multiple Resolutions &amp; Device Pixel Density in Phaser 3</p> <p></p>"},{"location":"2-research-notes/phaser3/Sending-data-to-scenes/","title":"Sending data to scenes","text":"<p>passing data to a scene</p> <p>https://phaser.io/examples/v3/view/scenes/passing-data-to-a-scene</p> <p>sending events to scenes: https://phaser.io/examples/v3/view/scenes/ui-scene</p>"},{"location":"2-research-notes/phaser3/Separate-UI-with-a-overlay-Scene/","title":"Separate UI with a overlay Scene","text":"<p>More on mixing scenes:</p> <p>https://phaser.io/examples/v3/view/input/dragging/multiple-scene-drag\"&gt;https://phaser.io/examples/v3/view/input/dragging/multiple-scene-drag</p>"},{"location":"2-research-notes/phaser3/Speech-bubble-GRAPHIC-across-SCENES/","title":"Speech bubble GRAPHIC across SCENES","text":"<pre><code>function createSpeechBubble (scene, x, y, width, height, quote)\n{\n    var bubbleWidth = width;\n    var bubbleHeight = height;\n    var bubblePadding = 10;\n    var arrowHeight = bubbleHeight / 3;\n\n    var bubble = scene.add.graphics({ x: x, y: y });\n\n    //  Bubble shadow\n    bubble.fillStyle(0x222222, 0.5);\n    bubble.fillRoundedRect(6, 6, bubbleWidth, bubbleHeight, 16);\n\n    //  Bubble color\n    bubble.fillStyle(0xffffff, 1);\n\n    //  Bubble outline line style\n    bubble.lineStyle(4, 0x565656, 1);\n\n    //  Bubble shape and outline\n    bubble.strokeRoundedRect(0, 0, bubbleWidth, bubbleHeight, 16);\n    bubble.fillRoundedRect(0, 0, bubbleWidth, bubbleHeight, 16);\n\n    //  Calculate arrow coordinates\n    var point1X = Math.floor(bubbleWidth / 4);\n    var point1Y = bubbleHeight;\n    var point2X = Math.floor((bubbleWidth / 4) * 1.4);\n    var point2Y = bubbleHeight;\n    var point3X = Math.floor(bubbleWidth / 4);\n    var point3Y = Math.floor(bubbleHeight + arrowHeight);\n\n    //  Bubble arrow shadow\n    bubble.lineStyle(4, 0x222222, 0.5);\n    bubble.lineBetween(point2X - 1, point2Y + 6, point3X + 2, point3Y);\n\n    //  Bubble arrow fill\n    bubble.fillTriangle(point1X, point1Y, point2X, point2Y, point3X, point3Y);\n    bubble.lineStyle(2, 0x565656, 1);\n    bubble.lineBetween(point2X, point2Y, point3X, point3Y);\n    bubble.lineBetween(point1X, point1Y, point3X, point3Y);\n\n    var content = scene.add.text(0, 0, quote, { fontFamily: 'Arial', fontSize: 20, color: '#000000', align: 'center', wordWrap: { width: bubbleWidth - (bubblePadding * 2) } });\n\n    var b = content.getBounds();\n\n    content.setPosition(bubble.x + (bubbleWidth / 2) - (b.width / 2), bubble.y + (bubbleHeight / 2) - (b.height / 2));\n\n    var container = scene.add.container();\n\n    container.add([ bubble, content ]);\n\n    return container;\n}\n\nclass SceneA extends Phaser.Scene {\n\n    constructor ()\n    {\n        super('sceneA');\n    }\n\n    preload ()\n    {\n        this.load.atlas('jellies', 'assets/atlas/jellies.png', 'assets/atlas/jellies.json');\n    }\n\n    create ()\n    {\n        let jelly = this.add.image(150, 500, 'jellies', 'WithShadow/Jelly1').setScale(0.5);\n        let bubble1 = createSpeechBubble(this, 20, 30, 220, 80, \"Scene A\\nKey.on\").setVisible(false);\n        let bubble2 = createSpeechBubble(this, 20, 160, 220, 80, \"Scene A\\nkeydown_SPACE\").setVisible(false);\n        let bubble3 = createSpeechBubble(this, 20, 290, 220, 80, \"Scene A\\nkeydown\").setVisible(false);\n\n        let spaceKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);\n\n        //  Phase 1: Key event.\n        //  Emits only when the SPACE BAR is pressed down, and dispatches from the local Key object.\n        //  Call stopImmediatePropagation to stop it reaching the two global handlers in this Scene.\n        //  Call stopPropagation to stop it reaching any other Scene.\n\n        spaceKey.on('down', function (key, event) {\n\n            // event.stopPropagation();\n            // event.stopImmediatePropagation();\n\n            bubble1.setVisible(true);\n\n        });\n\n        //  Phase 2: Global keydown + keycode handler.\n        //  Emits only on the SPACE BAR keycode event, but dispatches globally.\n        //  Call stopImmediatePropagation to stop it reaching the global handler in this Scene.\n        //  Call stopPropagation to stop it reaching any other Scene.\n\n        this.input.keyboard.on('keydown_SPACE', function (event) {\n\n            // event.stopPropagation();\n            // event.stopImmediatePropagation();\n\n            bubble2.setVisible(true);\n\n        });\n\n        //  Phase 3: Global keydown handler.\n        //  Fires on ANY key press, so we need to check the keyCode internally.\n        //  Calling stopImmediatePropagation has no effect here, as it's the least specific handler in this Scene.\n        //  Call stopPropagation to stop it reaching any other Scene.\n\n        this.input.keyboard.on('keydown', function (event) {\n\n            if (event.keyCode === Phaser.Input.Keyboard.KeyCodes.SPACE)\n            {\n                // event.stopPropagation();\n\n                bubble3.setVisible(true);\n            }\n\n        });\n\n        //  Launch the other 2 Scenes, so they are running in parallel to SceneA.\n        this.scene.launch('sceneB');\n        this.scene.launch('sceneC');\n    }\n\n}\n\nclass SceneB extends Phaser.Scene {\nconstructor ()\n{\n    super('sceneC');\n}\n\ncreate ()\n{\n    let jelly = this.add.image(650, 500, 'jellies', 'WithShadow/Jelly3').setScale(0.5);\n    let bubble1 = createSpeechBubble(this, 560, 30, 220, 80, \"Scene C\\nKey.on\").setVisible(false);\n    let bubble2 = createSpeechBubble(this, 560, 160, 220, 80, \"Scene C\\nkeydown_SPACE\").setVisible(false);\n    let bubble3 = createSpeechBubble(this, 560, 290, 220, 80, \"Scene C\\nkeydown\").setVisible(false);\n\n    let spaceKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);\n\n    //  Phase 1: Key event.\n    //  Emits only when the SPACE BAR is pressed down, and dispatches from the local Key object.\n    //  Call stopImmediatePropagation to stop it reaching the two global handlers in this Scene.\n    //  Call stopPropagation to stop it reaching any other Scene.\n\n    spaceKey.on('down', function (key, event) {\n\n        // event.stopPropagation();\n        // event.stopImmediatePropagation();\n\n        bubble1.setVisible(true);\n\n    });\n\n    //  Phase 2: Global keydown + keycode handler.\n    //  Emits only on the SPACE BAR keycode event, but dispatches globally.\n    //  Call stopImmediatePropagation to stop it reaching the global handler in this Scene.\n    //  Call stopPropagation to stop it reaching any other Scene.\n\n    this.input.keyboard.on('keydown_SPACE', function (event) {\n\n        // event.stopPropagation();\n        // event.stopImmediatePropagation();\n\n        bubble2.setVisible(true);\n\n    });\n\n    //  Phase 3: Global keydown handler.\n    //  Fires on ANY key press, so we need to check the keyCode internally.\n    //  Calling stopImmediatePropagation has no effect here, as it's the least specific handler in this Scene.\n    //  Call stopPropagation to stop it reaching any other Scene.\n\n    this.input.keyboard.on('keydown', function (event) {\n\n        if (event.keyCode === Phaser.Input.Keyboard.KeyCodes.SPACE)\n        {\n            // event.stopPropagation();\n\n            bubble3.setVisible(true);\n        }\n\n    });\n}\n\n}\n\nclass SceneC extends Phaser.Scene {\n\n    constructor ()\n    {\n        super('sceneC');\n    }\n\n    create ()\n    {\n        let jelly = this.add.image(650, 500, 'jellies', 'WithShadow/Jelly3').setScale(0.5);\n        let bubble1 = createSpeechBubble(this, 560, 30, 220, 80, \"Scene C\\nKey.on\").setVisible(false);\n        let bubble2 = createSpeechBubble(this, 560, 160, 220, 80, \"Scene C\\nkeydown_SPACE\").setVisible(false);\n        let bubble3 = createSpeechBubble(this, 560, 290, 220, 80, \"Scene C\\nkeydown\").setVisible(false);\n\n        let spaceKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);\n\n        //  Phase 1: Key event.\n        //  Emits only when the SPACE BAR is pressed down, and dispatches from the local Key object.\n        //  Call stopImmediatePropagation to stop it reaching the two global handlers in this Scene.\n        //  Call stopPropagation to stop it reaching any other Scene.\n\n        spaceKey.on('down', function (key, event) {\n\n            // event.stopPropagation();\n            // event.stopImmediatePropagation();\n\n            bubble1.setVisible(true);\n\n        });\n\n        //  Phase 2: Global keydown + keycode handler.\n        //  Emits only on the SPACE BAR keycode event, but dispatches globally.\n        //  Call stopImmediatePropagation to stop it reaching the global handler in this Scene.\n        //  Call stopPropagation to stop it reaching any other Scene.\n\n        this.input.keyboard.on('keydown_SPACE', function (event) {\n\n            // event.stopPropagation();\n            // event.stopImmediatePropagation();\n\n            bubble2.setVisible(true);\n\n        });\n\n        //  Phase 3: Global keydown handler.\n        //  Fires on ANY key press, so we need to check the keyCode internally.\n        //  Calling stopImmediatePropagation has no effect here, as it's the least specific handler in this Scene.\n        //  Call stopPropagation to stop it reaching any other Scene.\n\n        this.input.keyboard.on('keydown', function (event) {\n\n            if (event.keyCode === Phaser.Input.Keyboard.KeyCodes.SPACE)\n            {\n                // event.stopPropagation();\n\n                bubble3.setVisible(true);\n            }\n\n        });\n    }\n\n}\n\nconst config = {\n    type: Phaser.AUTO,\n    width: 800,\n    height: 600,\n    parent: 'phaser-example',\n    backgroundColor: '#0072bc',\n    scene: [ SceneA, SceneB, SceneC ]\n};\n\nlet game = new Phaser.Game(config);\n\n    constructor ()\n    {\n        super('sceneB');\n    }\n\n    create ()\n    {\n        let jelly = this.add.image(400, 500, 'jellies', 'WithShadow/Jelly2').setScale(0.5);\n        let bubble1 = createSpeechBubble(this, 290, 30, 220, 80, \"Scene B\\nKey.on\").setVisible(false);\n        let bubble2 = createSpeechBubble(this, 290, 160, 220, 80, \"Scene B\\nkeydown_SPACE\").setVisible(false);\n        let bubble3 = createSpeechBubble(this, 290, 290, 220, 80, \"Scene B\\nkeydown\").setVisible(false);\n\n        let spaceKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);\n\n        //  Phase 1: Key event.\n        //  Emits only when the SPACE BAR is pressed down, and dispatches from the local Key object.\n        //  Call stopImmediatePropagation to stop it reaching the two global handlers in this Scene.\n        //  Call stopPropagation to stop it reaching any other Scene.\n\n        spaceKey.on('down', function (key, event) {\n\n            // event.stopPropagation();\n            // event.stopImmediatePropagation();\n\n            bubble1.setVisible(true);\n\n        });\n\n        //  Phase 2: Global keydown + keycode handler.\n        //  Emits only on the SPACE BAR keycode event, but dispatches globally.\n        //  Call stopImmediatePropagation to stop it reaching the global handler in this Scene.\n        //  Call stopPropagation to stop it reaching any other Scene.\n\n        this.input.keyboard.on('keydown_SPACE', function (event) {\n\n            // event.stopPropagation();\n            // event.stopImmediatePropagation();\n\n            bubble2.setVisible(true);\n\n        });\n\n        //  Phase 3: Global keydown handler.\n        //  Fires on ANY key press, so we need to check the keyCode internally.\n        //  Calling stopImmediatePropagation has no effect here, as it's the least specific handler in this Scene.\n        //  Call stopPropagation to stop it reaching any other Scene.\n\n        this.input.keyboard.on('keydown', function (event) {\n\n            if (event.keyCode === Phaser.Input.Keyboard.KeyCodes.SPACE)\n            {\n                // event.stopPropagation();\n\n                bubble3.setVisible(true);\n            }\n\n        });\n    }\n\n}\n\nclass SceneC extends Phaser.Scene {\n\n    constructor ()\n    {\n        super('sceneC');\n    }\n\n    create ()\n    {\n        let jelly = this.add.image(650, 500, 'jellies', 'WithShadow/Jelly3').setScale(0.5);\n        let bubble1 = createSpeechBubble(this, 560, 30, 220, 80, \"Scene C\\nKey.on\").setVisible(false);\n        let bubble2 = createSpeechBubble(this, 560, 160, 220, 80, \"Scene C\\nkeydown_SPACE\").setVisible(false);\n        let bubble3 = createSpeechBubble(this, 560, 290, 220, 80, \"Scene C\\nkeydown\").setVisible(false);\n\n        let spaceKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);\n\n        //  Phase 1: Key event.\n        //  Emits only when the SPACE BAR is pressed down, and dispatches from the local Key object.\n        //  Call stopImmediatePropagation to stop it reaching the two global handlers in this Scene.\n        //  Call stopPropagation to stop it reaching any other Scene.\n\n        spaceKey.on('down', function (key, event) {\n\n            // event.stopPropagation();\n            // event.stopImmediatePropagation();\n\n            bubble1.setVisible(true);\n\n        });\n\n        //  Phase 2: Global keydown + keycode handler.\n        //  Emits only on the SPACE BAR keycode event, but dispatches globally.\n        //  Call stopImmediatePropagation to stop it reaching the global handler in this Scene.\n        //  Call stopPropagation to stop it reaching any other Scene.\n\n        this.input.keyboard.on('keydown_SPACE', function (event) {\n\n            // event.stopPropagation();\n            // event.stopImmediatePropagation();\n\n            bubble2.setVisible(true);\n\n        });\n\n        //  Phase 3: Global keydown handler.\n        //  Fires on ANY key press, so we need to check the keyCode internally.\n        //  Calling stopImmediatePropagation has no effect here, as it's the least specific handler in this Scene.\n        //  Call stopPropagation to stop it reaching any other Scene.\n\n        this.input.keyboard.on('keydown', function (event) {\n\n            if (event.keyCode === Phaser.Input.Keyboard.KeyCodes.SPACE)\n            {\n                // event.stopPropagation();\n\n                bubble3.setVisible(true);\n            }\n\n        });\n    }\n\n}\n\nconst config = {\n    type: Phaser.AUTO,\n    width: 800,\n    height: 600,\n    parent: 'phaser-example',\n    backgroundColor: '#0072bc',\n    scene: [ SceneA, SceneB, SceneC ]\n};\n\nlet game = new Phaser.Game(config);\n</code></pre>"},{"location":"2-research-notes/phaser3/Starting-and-stopping-scenes/","title":"Starting and stopping scenes","text":"<p>scenes can be loaden on top of each other</p> <p>Data can be sent and gotten from a scene</p> <p>Scenes can be paused, restarted, launched or transitioned to</p> <p>https://rexrainbow.github.io/phaser3-rex-notes/docs/site/scenemanager/</p>"},{"location":"2-research-notes/phaser3/TextureManager/","title":"TextureManager","text":"<p>The problem with loading players avatars was that they are stored in cache after load. So we have to check whether the image is already in cache.</p> <p>We have to find a way to check the cache</p> <p>Images are stored in the TextureManager</p> <p>The list of all loaded assets in the TextureManager can be get with:</p> <p>this.textures.list</p> <p>This returns an object, will all the kays</p> <p>We can check against existing loaded images with:</p> <pre><code>this.textures.exists(keyName))\n</code></pre> <p>You can get the raw image data like this:</p> <pre><code>var tex = this.textures.get('key');\n\ntex.getSourceImage();\n</code></pre> <p>You can pass getSourceImage a frame key, should the texture span multiple image files (like in a multi-texture set-up)</p> <p>If you\u2019ve assigned an image asset to a game object, you can find it in object.texture.source[0].image</p> <p>Assign a new image to an existing GameObject with:</p> <pre><code>GameObject.setTexture(KeyName)\n</code></pre> <p>https://blog.ourcade.co/posts/2020/phaser3-load-images-dynamically/</p>"},{"location":"2-research-notes/phaser3/Using-classes-for-GameObjects-and-extending-Phaser-Classes/","title":"Using classes for GameObjects and extending Phaser Classes","text":"<p>Phaser example extending arcade sprite:</p> <p>https://phaser.io/examples/v3/view/physics/arcade/extending-arcade-sprite</p> <p>Extending sprite with object as arguments:</p> <p>https://phasergames.com/extend-a-sprite-in-phaser-3/?mc_cid=3f4ee26e5d&amp;mc_eid=a4d9ee0291</p> <p>Creating a button with the extended container class:</p> <p>https://braelynnn.medium.com/extending-a-phaser-class-to-make-reusable-game-objects-93c11326787e</p>"},{"location":"3-features/done/Download-flipbooks/","title":"Feature: download FLIPBOOKS","text":"<ol> <li> <p>download stopmotion</p> </li> <li> <p>put stopmotion in memory</p> </li> <li> <p>cut stopmotion in frames</p> </li> <li> <p>repeat the frames at least until 24 total, and finish the last remainder     (24/x ) round up = pages</p> </li> <li> <p>per frame indicate sheet no / cell no with dots also</p> </li> <li> <p>make a sheet per 8</p> </li> <li> <p>download all sheets</p> </li> </ol> <p>flipbook calculations</p> <p>https://docs.google.com/spreadsheets/d/1VdhPDLWH2CBSFVM77cHzO1YU78DRSl_G1FIJza1O4qE/edit#gid=0</p> <p>old version, new version below:</p> <pre><code> async function downloadFlipbook() {\n      // we put the user name and displayName in the file name\n    // retrieve those details\n      const userProfile = get(Profile);\n\n      let filename = `${userProfile.username}`;\n      // if a display_name exists we also add that to the filename\n      if (userProfile.display_name) {\n        filename += `_${userProfile.display_name}`;\n      }\n\n      filename += `_${file.key}_${displayName}.png`;\n\n      await saveFlipbookHandler(filename);\n    } \n\nexport async function saveFlipbookHandler(filename) {\n    const flipbookCanvasWidth = 2480;\n    const flipbookCanvasHeight = 3508;\n\n    const numRows = 4;\n    const numCols = 2;\n\n    let currentTemplateFrame = 0;\n    const offsetX = 468;\n    const offsetY = 123;\n    const templateImageWidth = 730;\n    // const totalCanvases = 1;\n    const totalCanvases = Math.ceil((numRows * numCols) / framesArray.length);\n\n    dlog('totalCanvases: ', totalCanvases);\n\n    /* load all images before the loop to avoid waiting\n        first we load the flipbooktemplate image\n        then  we load the frames into a new array\n    */\n    const flipbookTemplate = new Image();\n\n    await new Promise((resolve) =&gt; {\n      flipbookTemplate.onload = function () {\n        resolve();\n      };\n      flipbookTemplate.src = './assets/printSheet/fb_00_leeg.png';\n    });\n\n    const imgPromises = framesArray.map((frame) =&gt; new Promise((resolve) =&gt; {\n      const img = new Image();\n      img.onload = () =&gt; {\n        resolve(img);\n      };\n      img.src = frame;\n    }));\n\n    const images = await Promise.all(imgPromises);\n\n    const mainContainer = document.querySelector('.drawing-app');\n\n    for (let i = 0; i &lt; totalCanvases; i++) {\n      const canvas = document.createElement('canvas');\n      canvas.className = 'flipbook-canvas'; // Set the class name\n      canvas.id = (i + 1).toString(); // Set the id\n\n      // Hide the canvas\n      canvas.style.display = 'none';\n\n      if (mainContainer) {\n        mainContainer.parentNode.insertBefore(canvas, mainContainer);\n      }\n\n      const ctx = canvas.getContext('2d');\n      canvas.width = flipbookCanvasWidth; // Set canvas width\n      canvas.height = flipbookCanvasHeight; // Set canvas height\n\n      // /* load the template image into the canvas */\n      ctx.drawImage(\n        flipbookTemplate,\n        0,\n        0,\n      );\n\n      for (let j = 0; j &lt; numRows; j++) {\n        for (let k = 0; k &lt; numCols; k++) {\n          const x = k * templateImageWidth + offsetX * (k + 1);\n          const y = j * templateImageWidth + offsetY * (j + 1);\n\n          ctx.drawImage(\n            images[currentTemplateFrame],\n            x,\n            y,\n            templateImageWidth,\n            templateImageWidth,\n          );\n\n          currentTemplateFrame++;\n          if (currentTemplateFrame === framesArray.length) currentTemplateFrame = 0;\n        }\n      }\n\n      // Create a button element for downloading the canvas\n      const downloadButton = document.createElement('button');\n      downloadButton.textContent = `flipbook_${canvas.id}`;\n      downloadButton.style.position = 'absolute';\n      const topDistance = `${canvas.id}00px`;\n      downloadButton.style.top = topDistance;\n\n      downloadButton.addEventListener('click', () =&gt; {\n        downloadFlipbookCanvas(canvas, `_${canvas.id}_FB_${filename}`);\n        // Remove the download button and canvas after download\n        downloadButton.remove();\n        canvas.remove();\n      });\n\n\n      // Append the container to the mainContainer\n      mainContainer.appendChild(downloadButton);\n\n      // Trigger a click event on the download button\n      downloadButton.click();\n    }\n  }\n\n\n  function downloadFlipbookCanvas(canvas, downloadFileName) {\n    canvas.toBlob((blob) =&gt; {\n      const link = document.createElement('a');\n      link.download = downloadFileName;\n      link.href = URL.createObjectURL(blob);\n      link.click();\n    }, 'image/png');\n  }\n</code></pre> <p>New version:</p> <pre><code> async function downloadFlipbook() {\n      // we put the user name and displayName in the file name\n    // retrieve those details\n      const userProfile = get(Profile);\n\n      let filename = `${userProfile.username}`;\n      // if a display_name exists we also add that to the filename\n      if (userProfile.display_name) {\n        filename += `_${userProfile.display_name}`;\n      }\n\n      filename += `_${file.key}_${displayName}.png`;\n\n      await saveFlipbookHandler(filename);\n    } \n\nexport async function saveFlipbookHandler(filename) {\n    const flipbookCanvasWidth = 2480;\n    const flipbookCanvasHeight = 3508;\n\n    const numRows = 4;\n    const numCols = 2;\n    const minNumSheets = 3; // printing 3 sheets of stopmotion was the norm\n\n    let currentTemplateFrame = 0;\n    const offsetX = 468;\n    const offsetY = 123;\n    const templateImageWidth = 730;\n\n    // how many repeats fit in 3 sheets, then round up\n    const repeatsRoundedUp = Math.ceil((numRows * numCols * minNumSheets) / framesArray.length);\n\n    // total of frames we will be using\n    const framesTotal = repeatsRoundedUp * framesArray.length;\n\n    let framesTotalSoFar = 0;\n    const totalCanvases = Math.ceil(framesTotal / (numRows * numCols));\n    // const totalCanvases = Math.ceil((numRows * numCols) / framesArray.length);\n\n    /* load all images before the loop to avoid waiting\n        first we load the flipbooktemplate image\n        then  we load the frames into a new array\n    */\n    const flipbookTemplate = new Image();\n\n    await new Promise((resolve) =&gt; {\n      flipbookTemplate.onload = function () {\n        resolve();\n      };\n      flipbookTemplate.src = './assets/printSheet/fb_00_leeg.png';\n    });\n\n    const imgPromises = framesArray.map((frame) =&gt; new Promise((resolve) =&gt; {\n      const img = new Image();\n      img.onload = () =&gt; {\n        resolve(img);\n      };\n      img.src = frame;\n    }));\n\n    const images = await Promise.all(imgPromises);\n\n    const mainContainer = document.querySelector('.drawing-app');\n\n    for (let i = 0; i &lt; totalCanvases; i++) {\n      const canvas = document.createElement('canvas');\n      canvas.className = 'flipbook-canvas'; // Set the class name\n      canvas.id = (i + 1).toString(); // Set the id\n\n      // Hide the canvas\n      canvas.style.display = 'none';\n\n      if (mainContainer) {\n        mainContainer.parentNode.insertBefore(canvas, mainContainer);\n      }\n\n      const ctx = canvas.getContext('2d');\n      canvas.width = flipbookCanvasWidth; // Set canvas width\n      canvas.height = flipbookCanvasHeight; // Set canvas height\n\n      /* load the template image into the canvas */\n      ctx.drawImage(\n        flipbookTemplate,\n        0,\n        0,\n      );\n\n      for (let j = 0; j &lt; numRows; j++) {\n        for (let k = 0; k &lt; numCols; k++) {\n          const x = k * templateImageWidth + offsetX * (k + 1);\n          const y = j * templateImageWidth + offsetY * (j + 1);\n\n          // if we reach the framesTotal, we stop adding frames to the sheet\n          if (framesTotalSoFar &gt;= framesTotal) break;\n\n          ctx.drawImage(\n            images[currentTemplateFrame],\n            x,\n            y,\n            templateImageWidth,\n            templateImageWidth,\n          );\n\n          // if we reach the framesTotal, we stop adding frames to the sheet\n          framesTotalSoFar++;\n\n          // we cycle through the available frames of the stopmotion\n          currentTemplateFrame++;\n          if (currentTemplateFrame === framesArray.length) currentTemplateFrame = 0;\n        }\n      }\n\n      // Create a button element for downloading the canvas\n      const downloadButton = document.createElement('button');\n      downloadButton.textContent = `flipbook_${canvas.id}`;\n      downloadButton.style.position = 'absolute';\n      const topDistance = `${canvas.id}00px`;\n      downloadButton.style.top = topDistance;\n\n      downloadButton.addEventListener('click', () =&gt; {\n        downloadFlipbookCanvas(canvas, `_${canvas.id}_FB_${filename}`);\n        // Remove the download button and canvas after download\n        downloadButton.remove();\n        canvas.remove();\n      });\n\n\n      // Append the container to the mainContainer\n      mainContainer.appendChild(downloadButton);\n\n      // Trigger a click event on the download button\n      downloadButton.click();\n    }\n  }\n\n\n  function downloadFlipbookCanvas(canvas, downloadFileName) {\n    canvas.toBlob((blob) =&gt; {\n      const link = document.createElement('a');\n      link.download = downloadFileName;\n      link.href = URL.createObjectURL(blob);\n      link.click();\n    }, 'image/png');\n  }\n</code></pre>"},{"location":"3-features/done/Illustrations-fire-world/","title":"Illustrations Fire World","text":"<p>hier zijn de illustraties voor de vuurwereld. voorlopig is het nog niet voorbereid op animatie ingedeeld in layers.</p> <p>https://drive.google.com/drive/folders/1uCgWzyLWe-trLsBn9nQiLLIK74ENrlIH?usp=sharing</p>"},{"location":"3-features/done/Illustrations-robot-world/","title":"Illustrations Robot World","text":"<p>hier zijn de illustraties voor de wereld Robot.</p> <p>In de map \"_ZonderAnimatie_robot wereld\" staan alle elementen die niet meer geanimeerd kunnen worden/hoeven te worden.</p> <p>In de andere mappen zijn de elementen die geanimeerd kunnen worden onderverdeeld in hun layers.</p> <p>Wereld ROBOT:</p> <p>https://drive.google.com/drive/folders/1ETYE80FGyhTbHacqqwOdqHHSYnuslp3N?usp=sharing</p>"},{"location":"3-features/done/Implement-robotworld-2022-12-20/","title":"Log: implement RobotWorld 2022.12.20","text":""},{"location":"3-features/done/Implement-robotworld-2022-12-20/#3de8bc","title":"3de8bc","text":""},{"location":"3-features/done/Implement-robotworld-2022-12-20/#169876","title":"169876","text":"<p>In RobotWorld:</p> <ul> <li> <p>backPortal</p> </li> <li> <p>background Gradient</p> </li> <li> <p>place objects</p> </li> <li> <p>place lines</p> </li> </ul>"},{"location":"3-features/done/Merging-2023-01-20/","title":"Merging 2023-01-20","text":"<p>ChallengeFlowerField = removal of unnecessary code</p> <p>Artworld = Amsterdam -&gt; GreenSquare</p> <p>Player = Amsterdam -&gt; GreenSquare</p> <p>animalChallenge: dlog off</p> <p>house.svelte: Amsterdam -&gt; GreenSquare</p> <p>update.svelte: import { SCENE_INFO } from '../../constants'; let Azc = 'GreenSquare'; const Locaties = SCENE_INFO.map((i) =&gt; i.scene);</p> <p>do last check with</p> <pre><code>  async function update() {\n    // get metadata\n\n    if ($Profile.meta.Role.toLowerCase() === 'admin') {\n      meta.Azc = Azc;\n      meta.Role = role;\n    }\n    dlog('meta', meta); // check if the update happens correctly!!!\n    // await setFullAccount(id, username, password, email, meta);\n  }\n</code></pre> <p>Check Moderate.svelte! for linting! and: import { runInNewContext } from 'vm';</p> <p>Check Update.svelte for import { runInNewContext } from 'vm';</p> <p>admin.svelte import { SCENE_INFO } from '../../constants'; const Locaties = SCENE_INFO.map((i) =&gt; i.scene);  </p> <p>profile.svelte: $Profile.meta.Azc || 'GreenSquare',</p> <p>nakama.svelte: betworld</p> <p>TEST</p> <p>imagePicker: stock house and stock avatar BUG</p> <p>update Account (in console) PASSED</p> <p>admin page bug</p> <p></p>"},{"location":"3-features/done/Physics-debug-in-gameedit-mode/","title":"Log: feature - physics debug in gameEdit mode","text":"<p>https://phaser.discourse.group/t/turn-on-off-debug-at-runtime/3681</p> <p>Implemented in GameEdit Mode.</p>"},{"location":"3-features/done/Place-visitor-next-to-house/","title":"Log: feature - place visitor next to house","text":"<p>current user -&gt; profile:</p> <ol> <li> <p>{id: 'f011a5dc-901a-42c0-9589-587b389d1e3e', username: 'user11', avatar_url: 'avatar/f011a5dc-901a-42c0-9589-587b389d1e3e/0_2023-01-03T21_08_17_WitKaaiman.png', lang_tag: 'en', metadata: '{\"Azc\": \"GreenSquare\", \"PosX\": -1635, \"PosY\": 749,\u2026eAnimalGarden\", \"TotalPlayTime\": 398437367465947}',\u00a0\u2026}</p> <ol> <li> <p>avatar_url: \"avatar/f011a5dc-901a-42c0-9589-587b389d1e3e/0_2023-01-03T21_08_17_WitKaaiman.png\"</p> </li> <li> <p>create_time: \"2022-05-11T12:18:13Z\"</p> </li> <li> <p>edge_count: 2</p> </li> <li> <p>id: \"f011a5dc-901a-42c0-9589-587b389d1e3e\"</p> </li> <li> <p>lang_tag: \"en\"</p> </li> <li> <p>meta:</p> <ol> <li> <p>Azc: \"GreenSquare\"</p> </li> <li> <p>Location: \"ChallengeAnimalGarden\"</p> </li> <li> <p>PosX: -1635</p> </li> <li> <p>PosY: 749</p> </li> <li> <p>Role: \"speler\"</p> </li> <li> <p>TotalPlayTime: 398437367465947</p> </li> <li> <p>User_id: \"\"</p> </li> <li> <p>[[Prototype]]: Object</p> </li> </ol> </li> <li> <p>metadata: \"{\\\"Azc\\\": \\\"GreenSquare\\\", \\\"PosX\\\": -1635, \\\"PosY\\\": 749, \\\"Role\\\": \\\"speler\\\", \\\"User_id\\\": \\\"\\\", \\\"Location\\\": \\\"ChallengeAnimalGarden\\\", \\\"TotalPlayTime\\\": 398437367465947}\"</p> </li> <li> <p>update_time: \"2023-01-09T14:39:58Z\"</p> </li> <li> <p>url: \"https://d1p8yo0yov6nht.cloudfront.net/fit-in/1800x150/filters:format(png)/avatar/f011a5dc-901a-42c0-9589-587b389d1e3e/0_2023-01-03T21_08_17_WitKaaiman.png?signature=67efc42a243ded09f3acde439217b6d4abf81f6f71694dd4bfd4dd23b4e8a547\"</p> </li> <li> <p>username: \"user11\"</p> </li> </ol> </li> </ol> <p>'Other' user: nakama object house with user id</p> <p>$SelectedOnlinePlayer =&gt; in svelte store in session.js</p> <p>$SelectedOnlinePlayer.meta.Azc = 'Greensquare' $SelectedOnlinePlayer.meta.PosX = 10 $SelectedOnlinePlayer.meta.PosY = -30</p> <p>In selectedOnlinePlayerBar.svelte</p> <p>Cases where we click on a house and want to be taken next to house</p> <ol> <li> <p>itemsBar currentPlayer, left, house icon</p> </li> <li> <p>itemsBar selectedOnlinePlayer, house icon</p> </li> </ol> <p>Case 1: current player</p> <p>itemsbar.svelte</p> <pre><code>     &lt;button\n        on:click=\"{() =&gt; {\n          goHome();\n        }}\"\n        class=\"avatar\"\n      &gt;\n        &lt;img src=\"{$myHome.url}\" alt=\"My Home\" /&gt;\n      &lt;/button&gt;\n</code></pre> <pre><code>  async function goHome(id) {\n    if (typeof id === 'string') {\n      SceneSwitcher.switchScene('DefaultUserHome', id);\n    } else if ($ShowItemsBar) {\n      SceneSwitcher.switchScene(\n        'DefaultUserHome',\n        ManageSession.userProfile.id,\n      );\n    }\n  }\n</code></pre> <p>We can switch to the scene where the home is (Profile.meta.Azc), we can get the PosX and PosY of the home by querying the Home object, then pass</p> <pre><code>push(`/?location=${SCENE}&amp;x=0&amp;y=0`);\n</code></pre> <p>Home Object is being loaded in the beginning as userHouseObject</p> <pre><code>userHouseObject = {\n    \"collection\": \"home\",\n    \"key\": \"GreenSquare\",\n    \"permission_read\": 2,\n    \"permission_write\": 1,\n    \"value\": {\n        \"url\": \"house/f011a5dc-901a-42c0-9589-587b389d1e3e/0_2023-01-03T21_08_34_BlauwChirurgVis.png\",\n        \"posX\": -1085.2499376200167,\n        \"posY\": 84.58334073217338,\n        \"version\": 2,\n        \"username\": \"user11\"\n    },\n    \"version\": \"c812e30ac619377abdf4522374739a7f\",\n    \"user_id\": \"f011a5dc-901a-42c0-9589-587b389d1e3e\",\n    \"create_time\": \"2022-08-07T09:20:32Z\",\n    \"update_time\": \"2023-01-03T21:09:04Z\"\n} \n</code></pre> <p>There is a bug in switching user from location to location that has to be fixed first</p> <p>https://artworlddev.maartenvanderglas.com/?p=180</p> <p>This bug has been fixed. Switching Scenes is maybe a bit 'too reactive' still in some cases</p>"},{"location":"3-features/done/Save-an-ARTWORK-as-an-other-OBJECT/","title":"Feature: save an ARTWORK as an other OBJECT","text":"<p>For example:</p> <ul> <li> <p>save a drawing as a house</p> </li> <li> <p>a house as a drawing</p> </li> <li> <p>a stopmotion as an avatar</p> </li> <li> <p>a stopmotion as an animal</p> </li> <li> <p>an avatar as a stopmotion etc</p> </li> </ul> <p>There should be a concept about what is a drawing and what is a stopmotion</p> <p>stopmotion object example</p> <pre><code>userID: f011a5dc-901a-42c0-9589-587b389d1e3e\n\nkey:1661448025760_zilverBear\n\nvalue: {\n\"url\":\"stopmotion/f011a5dc-901a-42c0-9589-587b389d1e3e/4_1661448025760_zilverBear.png\",\n\n\"version\":\"0\",\n\n\"previewUrl\":\"https://d1p8yo0yov6nht.cloudfront.net/fit-in/1800x150/filters:format(png)/stopmotion/f011a5dc-901a-42c0-9589-587b389d1e3e/4_1661448025760_zilverBear.png?signature=c43f701a0e54c74b5ff9fcc201b1f298ace3b40bc871ea68caa8e593f40b2e6f\",\n\n\"displayname\":\"holiMoly\"\n}\n</code></pre> <p>drawing object example</p> <pre><code>userID: f011a5dc-901a-42c0-9589-587b389d1e3e\n\nkey:2023-02-15T11_50_40_GroenVleermuis\n\nvalue: \n{\"url\":\"drawing/f011a5dc-901a-42c0-9589-587b389d1e3e/0_2023-02-15T11_50_40_GroenVleermuis.png\",\n\n\"version\":0,\n\n\"previewUrl\":\"https://d1p8yo0yov6nht.cloudfront.net/fit-in/1800x150/filters:format(png)/drawing/f011a5dc-901a-42c0-9589-587b389d1e3e/0_2023-02-15T11_50_40_GroenVleermuis.png?signature=0099cb5599dff8836c2366ab5d00f2a1c2d0bf07e736582af47b01a728546c8a\",\n\n\"displayname\":\"GroenVleermuis\"\n}\n</code></pre> <p>house object example (the image for a home)</p> <pre><code>userID: f011a5dc-901a-42c0-9589-587b389d1e3e\n\nkey:2023-02-17T10_31_38_toren\n\nvalue: \n{\n\"url\":\"house/f011a5dc-901a-42c0-9589-587b389d1e3e/0_2023-02-17T10_31_38_toren.png\",\n\"version\":0,\n\"displayname\":\"toren\"\n}\n</code></pre> <p>avatar object example</p> <pre><code>userID: f011a5dc-901a-42c0-9589-587b389d1e3e\n\nkey:2023-01-02T14_29_17_WitKaaiman\n\nvalue: {\n\"url\":\"avatar/f011a5dc-901a-42c0-9589-587b389d1e3e/0_2023-01-02T14_29_17_WitKaaiman.png\",\n\n\"version\":0,\n\n\"displayname\":\"WitKaaiman\"\n}\n</code></pre> <p>drawing and stopmotion have a preview-url. When and where is that generated?</p> <p>clean way to transfer:</p> <ol> <li> <p>get the image data (raw, largest)</p> </li> <li> <p>save it with a new key, with same display name</p> </li> <li> <p>do the url's get generated?</p> </li> </ol> <p>In Apploader.svelte loading and making new files is handled</p> <p>A new function/ state should be defined: transferFile()</p> <p>currentFile contains all the information about the file</p> <p>CurrentApp should also contain animalGarden, flowerGarden etc</p> <pre><code>if (\n      isValidLoaderApp($CurrentApp) &amp;&amp; // Dont run on the game\n      isValidQuery(parsedQuery) // AND when the query is valid (to open an existing file)\n    ) {\n      loadFile();\n    } else if (isValidLoaderApp($CurrentApp)) {\n      newFile();\n    }\n  });\n</code></pre> <pre><code>  async function loadFile() {\n    currentFile.loaded = false;\n\n    const userId = parsedQuery?.userId ?? null;\n    const key = parsedQuery?.key ?? null;\n    const loadFromCollection = $CurrentApp;\n\n    currentFile = await getFileInformation(loadFromCollection, userId, key);\n    dlog('currentFile loaded: ', currentFile);\n  }\n</code></pre> <pre><code>  async function newFile() {\n    const saveToCollection = $CurrentApp;\n    displayName = await getRandomName();\n    const tempKey = await getDateAndTimeFormatted();\n    currentFile = {\n      userId: $Profile.id,\n      loaded: false,\n      new: true,\n      displayName,\n      key: `${tempKey}_${displayName}`,\n      type: saveToCollection,\n      status: PERMISSION_READ_PUBLIC,\n    };\n  }\n</code></pre> <p>in drawing.svelte the image data is loaded</p> <pre><code>function createframeBuffer(img) {\n    dlog('baseSize: ', baseSize);\n    loadCanvas.width = baseSize;\n    loadCanvas.height = baseSize;\n    const ctx = loadCanvas.getContext('2d');\n    for (let index = 0; index &lt; frames; index++) {\n      ctx.drawImage(\n        img,\n        index * img.height,\n        0,\n        img.height,\n        img.height,\n        0,\n        0,\n        baseSize,\n        baseSize,\n      );\n      framesArray[index] = loadCanvas.toDataURL('image/png');\n      // clear the loadingCanvas\n      ctx.clearRect(0, 0, baseSize, baseSize);\n    }\n</code></pre> <p>We don't need to create a frameBuffer (we don't need to devide the stopmotion in frames for example). We just need to load the image in a loadCanvas and then save it with the right info.</p> <pre><code>// Was there an image to load? Do so\n    if (file?.url) {\n      dlog('load file url drawing');\n      const img = new Image();\n      img.crossOrigin = 'anonymous';\n      img.onload = (e) =&gt; {\n        frames = Math.floor(e.target.width / e.target.height);\n        createframeBuffer(img); // disabled looking for error\n      };\n\n      img.src = file.url;\n      setLoader(false);\n    } else {\n      // new image\n      frames = 1;\n      setLoader(false);\n    }\n\nfunction createframeBuffer(img) {\n    dlog('baseSize: ', baseSize);\nloadCanvas.width = baseSize;\n    loadCanvas.height = baseSize;\n    const ctx = loadCanvas.getContext('2d');\n    for (let index = 0; index &lt; frames; index++) {\n      ctx.drawImage(\n        img,\n        index * img.height,\n        0,\n        img.height,\n        img.height,\n        0,\n        0,\n        baseSize,\n        baseSize,\n      );\n\n    }\n\n    // clear the loadingCanvas\n    ctx.clearRect(0, 0, baseSize, baseSize);\n\n    // make the loadingCanvas 0\n    loadCanvas.width = 0;\n</code></pre>"},{"location":"3-features/done/User-can-change-name/","title":"Feature: user can change name","text":"<p>user_name cannot be changed, but display_name can</p> <p>User can change display_name once, if there is a mistake admin or moderator can change it to \"\", then the user can set it's display_name again</p> <p>display_name shown in:</p> <ul> <li> <p>itemsBar &gt; profile.svelte</p> </li> <li> <p>in the game: the home discriptor</p> </li> <li> <p>in the selectedOnlinePlayerItemsBar</p> </li> <li> <p>in the friends list</p> </li> </ul>"},{"location":"3-features/done/User-can-change-name/#update-account","title":"Update account","text":"<p>https://heroiclabs.com/docs/nakama/concepts/user-accounts/</p> <p>When a user is registered most of their profile is setup with default values. A user can update their own profile to change fields but cannot change any other user\u2019s profile.</p> <p>CLIENT</p> <code>1 2 3 4 5</code><code>await client.updateAccount(session, { display_name: \"My new name\", avatar_url: \"http://graph.facebook.com/avatar_url\", location: \"San Francisco\" });</code> <p>Example code:</p> <pre><code>export async function setAvatar(avatar_url) {\n  const session = get(Session);\n  await client.updateAccount(session, {\n    avatar_url,\n  });\n  const Image = await convertImage(\n    avatar_url,\n    DEFAULT_PREVIEW_HEIGHT,\n    DEFAULT_PREVIEW_HEIGHT * STOPMOTION_MAX_FRAMES,\n    'png',\n  );\n  // Profile.update((n) =&gt; { n.url = Image; return n });\n  getAccount();\n  Success.set(true);\n  setLoader(false);\n  return Image;\n}\n</code></pre> <p>Try code:</p> <pre><code>export async function setDisplayName(display_name) {\n  const session = get(Session);\n  await client.updateAccount(session, {\n    display_name,\n  });\n\n  getAccount();\n  Success.set(true);\n  setLoader(false);\n}\n</code></pre> <p>Location of the code: profile.svelte</p> <p>I implemented if account.display_name is empty string, then the user can set the display_name.</p> <p>If a user has set a display_name, the display_name cannot be changed.</p> <p>nakamaHelpers.js &gt; getAllHouses includes user_displayname</p> <p>friends.svelte addFriend also with display_name -&gt; not possible without rewriting the search function, so the search is removed for now</p> <p>getAccount(id) krijgt nu meta en metadata terug, is dat nieuw? Voorheen was het altijd meta....</p> <p></p> <p>friends.svelte friends are listed with display_name or username</p> <pre><code>  const columns = [\n    {\n      key: 'status',\n      title: '',\n      value: (v) =&gt; {\n        if (v.user.online) {\n          return '&lt;div class=\"online\"/&gt;';\n        }\n        return '&lt;div class=\"offline\"/&gt;';\n      },\n    },\n    {\n      key: 'avatar',\n      title: '',\n      renderComponent: {\n        component: ArtworkLoader,\n        props: {},\n      },\n    },\n    {\n      key: 'Username',\n      title: 'Username',\n      value: (v) =&gt; `&lt;p class=\"link\"&gt;${v.user.display_name || v.user.username}&lt;p&gt;`,\n      sortable: true,\n    },\n    {\n      key: 'action',\n      title: '',\n      renderComponent: {\n        component: FriendAction,\n        props: {\n          load,\n        },\n      },\n    },\n  ];\n</code></pre>"},{"location":"3-features/ideas/Bug-no-home-object/","title":"Log: bug: no home Object","text":"<p>When there is no home object to load, then there is no home image to show.</p> <p>When going to edit the home image (the house) the plus button does not respond.</p> <p>But even if we would be able to draw a house (which should be possible), the admin still has to set the home position.</p> <p>So on this error an email has to be send to the admin account!</p>"},{"location":"3-features/working%20on/Update-phaser-from-3-55-to-3-70-0/","title":"Log: update Phaser from 3.55 to 3.70.0","text":"<p>The update from 3.55 to 3.60 is actually the breaking update.</p> <p>broken</p> <p>Fabric UPGRADE PHASER with Fabric</p> <p>Fabric with eraser breaks</p> <p>Possible solution:</p> <ul> <li> <p>https://github.com/fabricjs/fabric.js/issues/7171</p> </li> <li> <p>https://www.npmjs.com/package/fabric-with-erasing</p> </li> </ul> <p>RexPlugins</p> <p>Swiper Svelte</p> <p>Working: Vite + Phaser 3.70.0</p> <p>Breaking point:  </p> <p>ManageSession.js:48 Uncaught TypeError: Cannot read properties of undefined (reading 'Math') at new ManageSession (ManageSession.js:48:35) at ManageSession.js:399:16 ManageSession @ ManageSession.js:48 this.swipeAmount = new Phaser.Math.Vector2(0, 0); </p> <p>(anonymous) @ ManageSession.js:399</p> <p>fix: import * as Phaser from 'phaser'; replaced const { Phaser } = window; in many files import * as Phaser from 'phaser';</p> <p>Breaking point:  </p> <p>RegisterPostPipeline.js:4 Uncaught (in promise) TypeError: Cannot read properties of undefined (reading 'renderer') at RegisterPostPipeline (RegisterPostPipeline.js:4:17)</p> <p>Turned off Outliner plugin</p> <p>Breaking:  </p> <p>FlamengoWereld.js:85 Uncaught (in promise) TypeError: Cannot read properties of undefined (reading 'sizeX') at FlamengoWereld.create (FlamengoWereld.js:85:34)</p> <p>temp fix (hack): this.worldSize.x = 5500; this.worldSize.y = 5000;</p>"},{"location":"4-bugs/fixed/Bug-aanpassen-touch-targets-werelden-fixed/","title":"BugFix: Aanpassen \u2018touch targets\u2019 werelden [fixed]","text":"<p>this.location. width &amp; height =&gt; de width &amp; height van het originele plaatje this.location.displayWidth =&gt; de width hoe het getoond wordt scaleX en scaleY zetten de displayHeight correct</p> <p>de hitTarget wordt ook automatisch goed gezet, behalve bij de icoBox, die wordt daarom gecorrigeerd.</p> <p>=================================================================</p> <p>const hitAreaWidth = this.location.width; const hitAreaheight = this.location.height; if (hitAreaWidth !== hitAreaheight) { // Coordinates are relative from the top-left, so we want out hit area to be // an extra 60 pixels around the texture, so -30 from the x/y and + 60 to the texture width and height</p> <pre><code>  // extend the isobox hitarea\n  this.location.input.hitArea.setTo(\n    -hitAreaWidth / 3,\n    -hitAreaWidth / 1.3,\n    hitAreaWidth * 1.4,\n    hitAreaWidth * 1.5,\n  );\n}\n</code></pre> <p>=================================================================</p> <p>this.location.body height en width is de target tussen andere physics bodies</p> <p>=================================================================  </p> <p>TODO: naambordjes correct plaatsen [done]</p> <p>this.location.displayWidth: 300 this.location.width: 1141 width: 300 this.location.height: 629</p> <p></p> <p>this.location.displayWidth: 200 this.location.width: 720 width: 200 this.location.height: 720</p> <p></p> <p>this.location.displayWidth: 200.00000000000003 this.location.width: 699 width: 200 this.location.height: 860</p> <p></p> <p>this.location.displayWidth: 200 this.location.width: 482 width: 200 this.location.height: 755</p> <p></p> <p>this.location.displayWidth: 200 this.location.width: 200 width: 200 this.location.height: 142.85714285714286</p> <p></p>"},{"location":"4-bugs/fixed/Bug-cant-edit-avatar/","title":"Log: Bug - can't edit AVATAR","text":"<p>When loading an old avatar, and drawing over it. The Avatar does not get saved.</p> <p>Open OLD AVATAR</p> <p>Draw over the OLD AVATAR</p> <p>Save (close)</p> <p>We don't see the EDITED AVATAR in the Profile Page, we don't see it in the game</p> <p>We do see the EDITED AVATAR when we edit again, we do see it on AWS, and the OLD AVATAR is overwritten.</p> <p>When Saving and Edit should be: save under a new name</p> <p>(2) In AWS I still see a 0_ in front of the name, why is this? Versioning is abolished...</p> <p>(1) So the EDIT gets saved on server, but not on local STORE?</p> <p>When making a new avatar:</p> <p>Avatar saveData Upload currentFile.key, currentFile.type, currentFile.status, currentFile.displayName,: 2022-12-23T10_09_00_CyaanFregata avatar true CyaanFregata appLoader.svelte:141</p> <p>Avatar saveData Upload result: avatar/fcbcc269-a109-4a4b-a570-5ccafc5308d8/0_2022-12-23T10_09_00_CyaanFregata.png appLoader.svelte:143</p> <p>A NEW AVATAR is overwriting the previous AVATAR!!</p> <p>Not showing in the list</p> <p>EASY fix: make a new AVATAR when you edit the AVATAR</p> <pre><code>  async function newFile() {\n    const saveToCollection = $CurrentApp;\n    const displayName = await getRandomName();\n    currentFile = {\n      userId: $Profile.id,\n      loaded: false,\n      new: true,\n      displayName,\n      key: `${getDateMillis()}_${displayName}`,\n      type: saveToCollection,\n      status: true,\n    };\n</code></pre> <p>currentFile:</p> <pre><code>loaded: true\nnew: false\n</code></pre> <p>setting 'new' to true, so it load it as a new file</p> <p>Getting an error:</p> <pre><code>nakama-js.esm.mjs:618          PUT http://193.187.129.81:7350/v2/account? 400 (Bad Request)\n\nsetAvatarPromise error \n\nResponse {type: 'cors', url: 'http://193.187.129.81:7350/v2/account?', redirected: false, status: 400, ok: false, \u2026}\nbody\n: \n(...)\nbodyUsed\n: \nfalse\nheaders\n: \nHeaders {}\nok\n: \nfalse\nredirected\n: \nfalse\nstatus\n: \n400\nstatusText\n: \n\"Bad Request\"\ntype\n: \n\"cors\"\nurl\n: \n\"http://193.187.129.81:7350/v2/account?\"\n</code></pre> <p>Het werkt, alleen je moet 2x klikken op de close button, hij maakt dan wel 2x een avatar</p> <p>The problem is that the upload URL is not generated the first time</p> <p>Let's look how a successful save happens</p> <p>Apploader.svelte</p> <p>saveData()</p> <p>uploadPromise())</p> <p>blobData</p> <p>UploadImage(currentFile .key, type, blobData, status, 0 (version), displayName</p> <ol> <li> <p>displayName: \"PaarsInktvis\"</p> </li> <li> <p>key: \"2022-12-30T13_10_38_PaarsInktvis\"</p> </li> <li> <p>loaded: false</p> </li> <li> <p>new: true</p> </li> <li> <p>status: true</p> </li> <li> <p>type: \"stopmotion\"</p> </li> <li> <p>uploadUrl: \"stopmotion/fcbcc269-a109-4a4b-a570-5ccafc5308d8/0_2022-12-30T13_10_38_PaarsInktvis.png\"</p> </li> <li> <p>userId: \"fcbcc269-a109-4a4b-a570-5ccafc5308d8\"</p> </li> </ol> <p>-&gt; url</p> <p>jpegURL, stopmotion/fcbcc269-a109-4a4b-a570-5ccafc5308d8/0_2022-12-30T13_10_38_PaarsInktvis.png</p> <p>jpegLocation https://artworld01.s3.eu-central-1.amazonaws.com/stopmotion/fcbcc269-a109-4a4b-a570-5ccafc5308d8/0_2022-12-30T13_10_38_PaarsInktvis.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIA3VY3XUKP6SYAM4OK%2F20221230%2Feu-central-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20221230T131048Z&amp;X-Amz-Expires=900&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=80511b2db9dab86b9717b26d225c9fc256c95e38c6702fc3c2ec4c422898af96 stopmotion/fcbcc269-a109-4a4b-a570-5ccafc5308d8/0_2022-12-30T13_10_38_PaarsInktvis.png</p> <p>--&gt;resolve(url)</p> <p>When saving an AVATAR (edited) we begin with:</p> <ol> <li> <p>displayName: \"ZilverKikker\"</p> </li> <li> <p>frames: 1</p> </li> <li> <p>key: \"2022-12-30T13_33_40_ZilverKikker\"</p> </li> <li> <p>loaded: true</p> </li> <li> <p>new: true</p> </li> <li> <p>status: true</p> </li> <li> <p>type: \"avatar\"</p> </li> <li> <p>uploadUrl: \"avatar/fcbcc269-a109-4a4b-a570-5ccafc5308d8/0_2022-12-30T13_33_40_ZilverKikker.png\"</p> </li> <li> <p>url: \"https://artworld01.s3.eu-central-1.amazonaws.com/avatar/fcbcc269-a109-4a4b-a570-5ccafc5308d8/0_2022-12-30T12_57_56_ZilverKikker.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIA3VY3XUKP6SYAM4OK%2F20221230%2Feu-central-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20221230T133314Z&amp;X-Amz-Expires=86400&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=a8d50b2362c6980bcd953542664dd315690f0ddbe3a25ef45452ab7191873ee3\"</p> </li> <li> <p>userId: \"fcbcc269-a109-4a4b-a570-5ccafc5308d8\"</p> </li> </ol> <p>flagging an edited file as new</p> <ol> <li> <p>displayName: \"ZilverKikker\"</p> </li> <li> <p>frames: 1</p> </li> <li> <p>key: \"2022-12-30T13_33_40_ZilverKikker\"</p> </li> <li> <p>loaded: true</p> </li> <li> <p>new: true</p> </li> <li> <p>status: true</p> </li> <li> <p>type: \"avatar\"</p> </li> <li> <p>uploadUrl: \"avatar/fcbcc269-a109-4a4b-a570-5ccafc5308d8/0_2022-12-30T13_33_40_ZilverKikker.png\"</p> </li> <li> <p>url: \"https://artworld01.s3.eu-central-1.amazonaws.com/avatar/fcbcc269-a109-4a4b-a570-5ccafc5308d8/0_2022-12-30T12_57_56_ZilverKikker.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIA3VY3XUKP6SYAM4OK%2F20221230%2Feu-central-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20221230T133314Z&amp;X-Amz-Expires=86400&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=a8d50b2362c6980bcd953542664dd315690f0ddbe3a25ef45452ab7191873ee3\"</p> </li> <li> <p>userId: \"fcbcc269-a109-4a4b-a570-5ccafc5308d8\"</p> </li> </ol> <p>(so no change yet!)</p>"},{"location":"4-bugs/fixed/Bug-fix-players-are-lost-when-switching-location/","title":"Log: bug Fix - players are lost when switching location","text":"<p>Player are visible when first coming online (when the game is fresh). but when going to a new location players are lost.</p> <p>Reason: when switching locations they are not logged in to a stream</p> <pre><code> switchScene(targetScene, targetHouse) {\n    PlayerLocation.set({\n      house: targetHouse,\n      scene: targetScene,\n    });\n  }\n</code></pre> <p>What is the reactiveness on PlayerLocation?</p> <p>The problem is fixed</p> <p>in sceneSwitcher the switchScene function was missing doSwitchScene() at the end</p> <p>in the sceneSwitcher, added a function to switch nakama streams, with call back and used that function in 3 places. This fixed the home button bug where going back home didn't leave and join a stream as it should</p> <p>The sceneSwitcher is so reactive that it is firing twice in some cases, seems that then calling the function directly is not needed: find out when this happens</p> <p>The multiple firing of switching scene only happens when using the home (goto artworld in the middle) button.</p> <p>I think this is fixed: check</p>"},{"location":"4-bugs/fixed/Bug-load-assets-per-scene-with-error-handling/","title":"BugFix: load assets per scene, with error handling","text":"<p>I moved the this.load.on('loaderror') to each scene as it gave an error on scenes when it was in UIscene</p> <p>Possible solutions: 1. keep preloadscene running 2. this.load.on in UI scene 3. put a this.load.on('loaderror' in each scene</p> <p>ad 1.  If PreloadScene is running with the error handler, and I load a file in CloudWorld that doesn't resolve, it doesn't throw an error.</p> <p>I don't really understand why there is correct error handling in UserHomes</p> <p>ad 2.  does this catch all load errors?</p> <p>No it doesn't catch an error in CloudWorld for instance.</p> <p>ad 3.</p> <p>Now only on 'complete' there is a check if all images are downloaden</p> <p>We now have an 'onerror' checker in each scene.</p> <p>But we now can go back to prev scene when current scene is still loading... this gives errors.</p> <p>CHECK: https://rexrainbow.github.io/phaser3-rex-notes/docs/site/loader/</p> <p>'filecomplete-image-${filename}'.on -&gt; the files is not fully loaded when this fires!</p> <p>progress and complete are acting strange, and are not useful....</p> <p>My custom way of checking if all items of an array are loaded works best: before loading save the number of items. On 'complete' increment 'downloaded', when downloaded is the same size as the nrOfItems then it is finished</p> <p>Svelte is loading assets again and again. Maybe use this: https://github.com/bluwy/svelte-preprocess-import-assets</p>"},{"location":"4-bugs/fixed/Bug-load-assets-per-scene-with-error-handling/#offevent-fn-context-once","title":"off(event [, fn] [, context] [, once])","text":"<p>Remove the listeners of a given event.</p>"},{"location":"4-bugs/fixed/Bug-load-assets-per-scene-with-error-handling/#parameters","title":"Parameters:","text":"Name Type Argument Description <code>event</code> string\u00a0 \u00a0symbol <code>fn</code> function Only remove the listeners that match this function. <code>context</code> * Only remove the listeners that have this context. <code>once</code> boolean Only remove one-time listeners. <p>In a world with houses, when the loading of the houses is interrupted. There is an error when the image is already loaded, but the house is 'in the making'. We get a On Error: Uncaught TypeError: Cannot read properties of null (reading 'image')</p> <p>But we cannot help this: the images as loaded, but the creation of the houses is interrupted. We can't put a check on that.</p>"},{"location":"4-bugs/fixed/Bug-tracking-100-cpu-usage/","title":"Log: bug tracking 100% CPU usage","text":"<p>Solution: graphics shouldn't be bigger then 1024x1024. For a gradient background the solution is quite easy: make a 1024 square image and scale it up to the appropriate size.</p> <p>For the dotted background: create a tilemap with the dot as a tile.</p> <p>100% CPU, also on older branch from july 2022</p> <p>disabling:</p> <pre><code>      fixedStep: true,\n      fps: 60,\n</code></pre> <p>No change</p> <p>Changing the world size to 1000x1000 from 6000x6000 dramatically reduces CPU usage</p> <p>Investigate further: is it maybe the input feel within the big world. So make the world 6000x6000 again but disable input graphic</p> <p>disable handlePlayerMovement() in artworld.js but keep it big: again 100% CPU</p>"},{"location":"4-bugs/fixed/Bug-tracking-100-cpu-usage/#test-where-the-limit-of-the-world-size-is","title":"Test where the limit of the world size is","text":"<p>2000 x 2000</p> <p></p> <p>3000 x 3000</p> <p></p> <p>4000 x 4000</p> <p></p> <p>5000 x 5000</p> <p></p> <p>6000 x 6000</p> <p></p> <p>So setting a max of 2000 x 2000 for the world (effectively reducing it with factor 3) will increase performance dramatically.</p> <p>All assets have to be loaded 3x times smaller</p> <p>And the x and y also needs to be divided by 3.</p>"},{"location":"4-bugs/fixed/Bug-tracking-100-cpu-usage/#further-investigation-disabling-the-big-background-and-the-input-graphic","title":"Further investigation: disabling the big background and the input graphic","text":"<p>6000 x 6000</p> <p>No background with dots, and no input graphic</p> <p></p> <p>6000 x 6000</p> <p>No background, with input graphic</p> <p></p> <p>The input graphic seems ok, because it is not visible, so it is not rendered.</p> <p>When I turn off the dots but keep the white background:</p> <p></p> <p>With the dots the CPU is very high. I didn't expect that, as the dots are small images that are repeated many times</p> <p>when the background is a big rectangle:</p> <p></p> <p>Optimizing worlds and backgrounds: tilemaps</p> <p>create tilemaps on the fly</p> <p>https://labs.phaser.io/edit.html?src=src\\tilemap\\put%20tiles.js</p> <pre><code>// Creating a blank tilemap with the specified dimensions\nmap = this.make.tilemap({ tileWidth: 16, tileHeight: 16, width: 25, height: 20});\nvar tiles = map.addTilesetImage('tiles');\n\nvar layer = map.createBlankLayer('layer1', tiles);\nlayer.setScale(2);\n\n// Add a simple scene with some random element\nlayer.fill(58, 0, 13, 25, 1); // Surface of the water\nlayer.fill(77, 0, 14, 25, 5); // Body of the water\nlayer.randomize(0, 0, 25, 13, [ 44, 45, 46, 47, 48 ]); // Wall above the water\n</code></pre> <pre><code> switch (objectToPlace) {\n            case 'flower':\n                // You can place an individal tile by index (or by passing in a Tile object)\n                map.putTileAt(15, pointerTileX, pointerTileY);\n                break;\n            case 'platform':\n                // You can place a row of tile indexes at a location\n                map.putTilesAt([ 104, 105, 106, 107 ], pointerTileX, pointerTileY);\n                break;\n            case 'tiki':\n                // You can also place a 2D array of tiles at a location\n                map.putTilesAt([\n                    [ 49, 50 ],\n                    [ 51, 52 ]\n                ], pointerTileX, pointerTileY);\n                break;\n            default:\n                break;\n        }\n</code></pre> <p>To make a background with this method, would be:</p> <ol> <li> <p>create an image you want to repeat</p> </li> <li> <p>create an empty tilemap with the dimensions of the image</p> </li> <li> <p>create a layer in the map</p> </li> <li> <p>layer.fill to fill the map with images</p> </li> </ol> <p>tilemaps with arrays</p> <p>https://labs.phaser.io/edit.html?src=src\\tilemap\\create%20from%20array.js</p> <p>All TileMap examples</p> <p>https://labs.phaser.io/index.html?dir=tilemap/&amp;q=</p> <p>All the graphic elements where also a big problem: all the Houses had hit targets, name plates etc with graphics. So I refactored them to use prerendered images:</p> <p>To change to an image:</p> <p>base size rect: 256pix</p> <ul> <li> <p>enterArea (rectangle) - invisible</p> </li> <li> <p>debugRectXMargin (rect) - color1 0x7300ED</p> </li> <li> <p>debugRect(rect) - color2 - 0xE8E8E8</p> </li> <li> <p>namePlate (roundRect) - grey/beige 0xE8E8E8     .fillRoundedRect(     // 0 - (locationDescription.width + namePlateMargin) / 2,     // width / 2 - textPlateOffset,     // locationDescription.width + namePlateMargin, // text's width + 10 (to have space between border and text)     // namePlateMargin * 2,     // 10,     // ).setDepth(31);</p> </li> </ul> <p>baseSize Circle: 64</p> <ul> <li> <p>numberBubble (circle) - grey/beige 0xE8E8E8</p> </li> <li> <p>entershadow (circle) - purple 0x7300ED</p> </li> </ul> <p>greyCircle_64 purpleCircle_64 greySquare_264 purpleSquare_264</p> <p>On Android devices there is now still a crash: the big backgrounds still cause a problem. So try: make an 1024 x 1024 image and then scale that to the appropriate size. This works!</p> <p>This is the best solution for gradient backGrounds</p>"},{"location":"4-bugs/fixed/Bugfix-drawing-over-the-edge/","title":"Log: BugFix: Drawing over the edge","text":"<p>WE DONT HAVE ENOUGH TIME TO REFACTOR TO PAINTERRO</p> <p>so I am trying to implement a new solution:</p> <ol> <li> <p>DrawingCanvas</p> </li> <li> <p>SaveCanvas</p> </li> </ol> <p>This workes and is done, after this is it still good to refactor to Painterro, because performance is lacking on an iPad for instance.</p> <p>Working code so far:</p> <pre><code>var canvas = new fabric.Canvas(document.getElementById('canvasId'))\nvar canvas2 = new fabric.Canvas(document.getElementById('canvasId2'))\n\nvar canvas3 = new fabric.Canvas(document.getElementById('canvasId3'))\n\ncanvas.isDrawingMode = true;\ncanvas.freeDrawingBrush.width = 5;\ncanvas.freeDrawingBrush.color = '#00aeff';\n\ncanvas2.isDrawingMode = true;\ncanvas2.freeDrawingBrush.width = 10;\ncanvas2.freeDrawingBrush.color = '#ffaeff';\n\ncanvas.on('path:created', function(e) {\n  e.path.set();\n  canvas.renderAll();\n\n  const preview = canvas.toDataURL({\n        format: 'png',\n        height: 400,\n        width: 400,\n      });\n\n   fabric.Image.fromURL(preview, (img) =&gt; {      \n    canvas3.add(img.set({ left: 0, top: 0, height: 400,\n        width: 400 }))\n },{ crossOrigin: 'anonymous' },\n);\n\n});\n\ncanvas2.on('path:created', function(e) {\n  e.path.set();\n  canvas2.renderAll();\n\n  const preview2 = canvas2.toDataURL({\n        format: 'png',\n        height: 400,\n        width: 400,\n      });\n\n   fabric.Image.fromURL(preview2, (img) =&gt; {      \n    canvas3.add(img.set({ left: 400, top: 0, height: 400,\n        width: 400 }))\n },{ crossOrigin: 'anonymous' },\n);\n\n});\n</code></pre> <p></p> <p>code with 2 canvas and filtering out the last drawing (other wise fabric adds an image each time when having drawn, in effect creating an undo /redo stack!</p> <pre><code>var canvas = new fabric.Canvas(document.getElementById('canvasId'))\nvar clearCanvas = document.getElementById('clear-canvas');\n\n\nvar canvas2 = new fabric.Canvas(document.getElementById('canvasId2'))\n\nvar canvas3 = new fabric.Canvas(document.getElementById('canvasId3'))\n\ncanvas.isDrawingMode = true;\ncanvas.freeDrawingBrush.width = 5;\ncanvas.freeDrawingBrush.color = '#00aeff';\n\ncanvas2.isDrawingMode = true;\ncanvas2.freeDrawingBrush.width = 10;\ncanvas2.freeDrawingBrush.color = '#ffaeff';\n\n\nclearCanvas.onclick = function() { canvas.clear();         pushCanvasToPreview(canvas, 0);\n};\n\nfunction pushCanvasToPreview(_canvas, frameNumber) {\nconst previewCanvasObjects = canvas3.getObjects();\n\n    //remnove all objects with frame: frameNumber\n    // that way there is only 1; the last one\n    previewCanvasObjects.forEach((element) =&gt; {\n      if (element.frame === frameNumber){\n        canvas3.remove(element);\n      }\n    })\n\n  const leftOffset = frameNumber * 400\n\n  const preview = _canvas.toDataURL({\n        format: 'png',\n        height: 400,\n        width: 400,\n      });\n\n   fabric.Image.fromURL(preview, (img) =&gt; {      \n    canvas3.add(img.set({ left: leftOffset, top: 0, height: 400,\n        width: 400, frame: frameNumber}))\n },{ crossOrigin: 'anonymous' },\n);\n  const canvasObjects = canvas3.getObjects();\n  console.log(canvasObjects)\n  return preview;\n}\n\ncanvas.on('path:created', function(e) {\n  e.path.set();\n  canvas.renderAll();\n\n  pushCanvasToPreview(canvas, 0)\n\n});\n\ncanvas2.on('path:created', function(e) {\n  e.path.set();\n  canvas2.renderAll();\n\n  pushCanvasToPreview(canvas2, 1);\n});\n</code></pre> <p>Select between drawing canvas:</p> <pre><code>var canvas = new fabric.Canvas(document.getElementById('canvasId'))\nvar clearCanvas = document.getElementById('clear-canvas');\nvar selectedCanvas = 1;\n\nvar selectedCanvas1 = document.getElementById('selectCanvas1');\nvar selectedCanvas2 = document.getElementById('selectCanvas2');\n// var canvas2 = new fabric.Canvas(document.getElementById('canvasId2'))\n\nvar canvas3 = new fabric.Canvas(document.getElementById('previewCanvas'))\n\ncanvas.isDrawingMode = true;\ncanvas.freeDrawingBrush.width = 5;\ncanvas.freeDrawingBrush.color = '#00aeff';\n\ncanvas.on('path:created', function(e) {\n  e.path.set();\n  canvas.renderAll();\n\n  pushCanvasToPreview(canvas, selectedCanvas)\n\n});\n\nclearCanvas.onclick = function() { canvas.clear(); pushCanvasToPreview(canvas, selectedCanvas);\n};\n\nselectedCanvas1.onclick = function () {\n  selectedCanvas = 0; \n  canvas.clear();\n};\n\nselectedCanvas2.onclick = function () {\n  selectedCanvas = 1; \n  canvas.clear();                \n};\n\n\nfunction pushCanvasToPreview(_canvas, frameNumber) {\n  const previewCanvasObjects = canvas3.getObjects();\n    //remnove all objects with frame: frameNumber\n    // that way there is only 1 image layer; the last one\n    previewCanvasObjects.forEach((element) =&gt; {\n      if (element.frame === frameNumber){\n        canvas3.remove(element);\n      }\n    })\n\n  const leftOffset = frameNumber * 400\n\n  const preview = _canvas.toDataURL({\n        format: 'png',\n        height: 400,\n        width: 400,\n      });\n\n   fabric.Image.fromURL(preview, (img) =&gt; {      \n    canvas3.add(img.set({ left: leftOffset, top: 0, height: 400,\n        width: 400, frame: frameNumber}))\n },{ crossOrigin: 'anonymous' },\n);\n  const canvasObjects = canvas3.getObjects();\n  console.log(canvasObjects)\n  return preview;\n}\n</code></pre> <p>Working code for drawing canvas, SaveCanvas, can switch between canvas and keep drawing. Undo is disabled (filtered out), but could be turned on again</p> <pre><code>var canvas = new fabric.Canvas(document.getElementById('canvasId'))\nvar clearCanvas = document.getElementById('clear-canvas');\nvar selectedCanvas = 0;\n\nvar selectedCanvas1 = document.getElementById('selectCanvas1');\nvar selectedCanvas2 = document.getElementById('selectCanvas2');\n// var canvas2 = new fabric.Canvas(document.getElementById('canvasId2'))\n\nvar canvas3 = new fabric.Canvas(document.getElementById('previewCanvas'))\n\ncanvas.isDrawingMode = true;\ncanvas.freeDrawingBrush.width = 5;\ncanvas.freeDrawingBrush.color = '#00aeff';\n\ncanvas.on('path:created', function(e) {\n  e.path.set();\n  canvas.renderAll();\n  pushCanvasToPreview(canvas, selectedCanvas)\n});\n\nclearCanvas.onclick = function() { \n  canvas.clear(); \n  pushCanvasToPreview(canvas, selectedCanvas);\n};\n\nselectedCanvas1.onclick = function () {\n  selectedCanvas = 0; \n  canvas.clear();\n  // get the object for frame1 of the renderCanvas\n  pushImageFromSaveCanvasToDrawingCanvas()\n};\n\nselectedCanvas2.onclick = function () {\n  selectedCanvas = 1; \n  canvas.clear();\n  // get the object for frame1 of the renderCanvas\n  pushImageFromSaveCanvasToDrawingCanvas()\n};\n\nfunction pushImageFromSaveCanvasToDrawingCanvas(){\n    const previewCanvasObjects = canvas3.getObjects();\n    // remnove all objects with frame: frameNumber\n    // that way there is only 1 image layer; the last one\n    previewCanvasObjects.forEach((element) =&gt; {\n      if (element.frame === selectedCanvas){\n        const cloned = canvas3.clone(element);\n        canvas.add(element.set({ left: 0, top: 0, height: 400,\n        width: 400}))                    \n      }\n    })\n}\n\nfunction getCroppedImageFromCanvas(ToCanvas, frameNumber){\n  var cropped = new Image();\n    cropped.src = canvas3.toDataURL({\n        left: 400,\n        top: 0,\n        width: 400,\n        height: 400\n    });\n  fabric.Image.fromURL(preview, (img) =&gt; {      \n    ToCanvas.add(img.set({ left: 0, top: 0, height: 400,\n        width: 400}))\n },{ crossOrigin: 'anonymous' });\n};\n\n\nfunction pushCanvasToPreview(_canvas, frameNumber) {\n  const previewCanvasObjects = canvas3.getObjects();\n    //remnove all objects with frame: frameNumber\n    // that way there is only 1 image layer; the last one\n    previewCanvasObjects.forEach((element) =&gt; {\n      if (element.frame === frameNumber){\n        canvas3.remove(element);\n      }\n    })\n\n  const leftOffset = frameNumber * 400\n\n  const preview = _canvas.toDataURL({\n        format: 'png',\n        height: 400,\n        width: 400,\n      });\n\n   fabric.Image.fromURL(preview, (img) =&gt; {      \n    canvas3.add(img.set({ left: leftOffset, top: 0, height: 400,\n        width: 400, frame: frameNumber}))\n },{ crossOrigin: 'anonymous' }\n);\n  //show how many objects there are in canvas3\n  const canvasObjects = canvas3.getObjects();\n  console.log(canvasObjects)\n  return preview;\n}\n</code></pre> <p>Next step: make SaveCanvas invisible use it to make previews Load in imagebefore on the saveCanvas, then push a crop back to the drawCanvas</p> <pre><code>var canvas = new fabric.Canvas(document.getElementById('canvasId'))\nvar clearCanvas = document.getElementById('clear-canvas'); // button\nvar selectedCanvas = 0;\n\nvar selectedCanvas1 = document.getElementById('selectCanvas1'); // button\nvar selectedCanvas2 = document.getElementById('selectCanvas2'); // button\n\nvar saveCanvas = new fabric.Canvas(document.getElementById('previewCanvas'))\n\ncanvas.isDrawingMode = true;\ncanvas.freeDrawingBrush.width = 5;\ncanvas.freeDrawingBrush.color = '#00aeff';\n\ncanvas.on('path:created', function(e) {\n  e.path.set();\n  canvas.renderAll();\n  pushCanvasToPreview(canvas, selectedCanvas)\n});\n\nclearCanvas.onclick = function() { \n  canvas.clear(); \n  pushCanvasToPreview(canvas, selectedCanvas);\n};\n\nselectedCanvas1.onclick = function () {\n  selectedCanvas = 0; \n  canvas.clear();\n  // get the object for frame1 of the renderCanvas\n  // pushImageFromSaveCanvasToDrawingCanvas()\n  getCroppedImageFromCanvas(canvas, selectedCanvas)\n};\n\nselectedCanvas2.onclick = function () {\n  selectedCanvas = 1; \n  canvas.clear();\n  // get the object for frame1 of the renderCanvas\n  // pushImageFromSaveCanvasToDrawingCanvas()\n  getCroppedImageFromCanvas(canvas, selectedCanvas)\n};\n\nfunction pushImageFromSaveCanvasToDrawingCanvas(){\n    const previewCanvasObjects = saveCanvas.getObjects();\n    // remnove all objects with frame: frameNumber\n    // that way there is only 1 image layer; the last one\n    previewCanvasObjects.forEach((element) =&gt; {\n      if (element.frame === selectedCanvas){\n        const cloned = saveCanvas.clone(element);\n        canvas.add(element.set({ left: 0, top: 0, height: 400,\n        width: 400}))                    \n      }\n    })\n}\n\nfunction getCroppedImageFromCanvas(ToCanvas, frameNumber){\n  const leftOffset = frameNumber * 400\n  // var cropped = new Image();\n  const cropped = saveCanvas.toDataURL({\n        left: leftOffset,\n        top: 0,\n        width: 400,\n        height: 400\n    });\n  fabric.Image.fromURL(cropped, (img) =&gt; {      \n    ToCanvas.add(img.set({ left: 0, top: 0, height: 400,\n        width: 400}))\n },{ crossOrigin: 'anonymous' });\n};\n\n\nfunction pushCanvasToPreview(_canvas, frameNumber) {\n  const previewCanvasObjects = saveCanvas.getObjects();\n    //remnove all objects with frame: frameNumber\n    // that way there is only 1 image layer; the last one\n    previewCanvasObjects.forEach((element) =&gt; {\n      if (element.frame === frameNumber){\n        saveCanvas.remove(element);\n      }\n    })\n\n  const leftOffset = frameNumber * 400\n\n  const preview = _canvas.toDataURL({\n        format: 'png',\n        height: 400,\n        width: 400,\n      });\n\n   fabric.Image.fromURL(preview, (img) =&gt; {      \n    saveCanvas.add(img.set({ left: leftOffset, top: 0, height: 400,\n        width: 400, frame: frameNumber}))\n },{ crossOrigin: 'anonymous' }\n);\n  //show how many objects there are in canvas3\n  const canvasObjects = saveCanvas.getObjects();\n  console.log(canvasObjects)\n  return preview;\n}\n</code></pre> <p>HTML:</p> <pre><code>&lt;canvas id=\"canvasId\" width=\"400\" height=\"400\"&gt;&lt;/canvas&gt;\n&lt;button id=\"clear-canvas\" class=\"btn btn-info\"&gt;Clear&lt;/button&gt;&lt;br&gt;\n&lt;button id=\"selectCanvas1\" class=\"btn btn-info\"&gt;selectCanvas1&lt;/button&gt;&lt;br&gt;\n&lt;button id=\"selectCanvas2\" class=\"btn btn-info\"&gt;selectCanvas2&lt;/button&gt;&lt;br&gt;\n\n&lt;canvas hidden id=\"previewCanvas\" width=\"400\" height=\"400\" &gt;&lt;/canvas&gt;\n</code></pre> <p>This version works with cropping the SaveCanvas back to the DrawingCanvas: this should work with loaded images and the like;</p> <p>Konva was pretty slow, so not a good replacement.</p> <p>So we switched to: SPAINTER a basic paixel based canvas drawing framework.</p> <p>https://github.com/akoidan/spainter</p> <p>Painterro is also an option:</p> <p>https://github.com/devforth/painterro</p> <p></p> <p>I fixed the \"drawing over the border\" bug by by adding a clipPath to each frame, and then clipping each stroke to that clipPath (sort of a mask). That worked, but fell apart when erasing.</p> <p>The eraser also uses something like a clipPath, but it gets all wonky when erasing. The stack order doesn't make sense and the erase stroke is applied to other objects etc.</p> <p>And when I would turn off the clipPath before erasing, the eraser would be able to erase in the adjacent frames.</p> <p>I could try to implement eraser my self and see what is going on...</p> <p>I looked into creating a mask and using it both for the eraser and for the frame.</p> <p>But before trying that I tried another method: removing the points that are outside the frame after drawing. This works! But now also has to be implemented for the eraser. Because we are changing the paths after execution, we have to undo the erase and then do it again with the adjusted path.</p> <p>let lineWidth = 25; let drawingColor = '#000000'; let currentTab = null; make this pencil so we don't have to click twice in the beginning let applyBrush; where / for what is this used? let selectedBrush = 'Pencil';</p>"},{"location":"4-bugs/fixed/Bugfix-drawing-over-the-edge/#alternative-ideas","title":"Alternative ideas","text":"<p>Wat als je een verse clippath maakt nadat de eraser bezig is geweest? Dus bij het selecteren van een brush</p> <ul> <li> <ul> <li> <p>Dus: er is een clipPath en alles, er wordt geerased.</p> </li> <li> <p>Er wordt weer getekend: de clipPath wordt weer vers aangemaakt</p> <ul> <li>en op alle lijnen weer toegepast?</li> </ul> </li> </ul> </li> </ul> <p>Werkt niet, want: erasen over de clipPath, in het eerste frame wordt er sowieso een groot deel van de linkerbovenhoek af geknipt</p> <p>Dus dan zou de clipPath eerst op null gezet moeten worden als er erased wordt...</p> <p>Andere methode: esare = bush en die deel uit laten maken van clipPath group: https://jsfiddle.net/almozdmr/yjmx6751/</p> <p>Deze mask methode? https://jsfiddle.net/Fidel90/md6rwg4b/</p> <p>This does not work:</p> <pre><code>canvas.freeDrawingBrush.limitedToCanvasSize = true;\n</code></pre> <p>Because the canvas is spread across frames.</p> <p>Alternatief voor de erase tool?</p> <p>//eraser</p> <p>canvas.on('path:created', function (opt) {</p> <p>opt.path.globalCompositeOperation = 'destination-out';</p> <p>opt.path.lineWidth = strokeWidth;</p> <p>opt.path.stroke = 'rgba(0,0,0,0)';</p> <p>//opt.path.fill = 'black';</p> <p>canvas.requestRenderAll();</p> <p>});</p> <p>//draw</p> <p>canvas.on('path:created', function (opt) {</p> <p>opt.path.globalCompositeOperation = 'source-over';</p> <p>opt.path.lineWidth = strokeWidth;</p> <p>opt.path.stroke = 'black';</p> <p>//opt.path.fill = 'black';</p> <p>canvas.requestRenderAll();</p> <p>});</p> <p>Trying to implement the eraser as a special brush:</p> <pre><code> // Set frameNumber on object, to refer to when deleting frames\n    canvas.on('path:created', (e) =&gt; {\n      const idx = canvas.getObjects().length - 1;\n      const index = currentFrame - 1;\n\n      // is e and the last item the same? - no; e is the path of the item\n      console.log(\"canvas.item(idx), e\", canvas.item(idx), e)\n      const obj = e.path;\n      canvas.item(idx).frameNumber = currentFrame;\n      canvas.item(idx).eraser = 'false'\n\n      if (currentTab === 'erase'){\n        canvas.item(idx).eraser = 'true'\n      //   // console.log(\"eraser: canvas.item(idx)\", canvas.item(idx))\n      //   const top = canvas.item(idx).top;\n      //   const left = canvas.item(idx).left;\n\n      //   // de eraser vernietigen en weer maken met meer properties\n      //   canvas.remove(obj);\n      //   const newObj = new fabric.Path(obj.path, {\n      //   fill: '',\n      //   top: top,\n      //   left: left,\n      //   absolutePositioned: true,\n      //   stroke: 'white',\n      //   strokeWidth: lineWidth,\n      //   name: 'erase_clipPath',\n      //   hasControls: false,\n      //   hasBorders: false,\n      //   objectCaching: false,\n      //   // globalCompositionOperation: 'destination-out',\n      //   controlsAboveOverlay: true,\n      //   perPixelTargetFind: true,\n      // });\n      // canvas.add(newObj);\n\n      // const allCanvasObjects = canvas.getObjects()\n      // console.log(\"allCanvasObjects\", allCanvasObjects)\n      // allCanvasObjects.forEach((element) =&gt; {\n      //     if (element.frameNumber === currentFrame &amp;&amp; element.eraser === 'false'){\n      //       console.log(\"element\", element)\n      //       console.log(\"element.clipPath\", element.clipPath)\n      //       element.clipPath = null;\n      //       element.clipPath = newObj;\n      //     }\n      //   })\n      e.path.globalCompositionOperation = 'destination-out';\n      canvas.remove(canvas.item(idx));\n\n      const newObj = new fabric.Path(obj.path, {\n        fill: '',\n        // top: top,\n        // left: left,\n        // absolutePositioned: true,\n        stroke: 'white',\n        strokeWidth: lineWidth,\n        name: 'erase_clipPath',\n        hasControls: false,\n        hasBorders: false,\n        objectCaching: false,\n        globalCompositionOperation: 'destination-out',\n        controlsAboveOverlay: true,\n        perPixelTargetFind: true,\n      });\n      canvas.add(newObj);\n\n      } else if (currentTab ==='draw'){\n        // clip the path with the canvasClipper so as to not draw into the next frame\n        canvas.item(idx).clipPath = canvasClipperArray[index];\n        console.log(\"canvas.item(idx).clipPath\", canvas.item(idx).clipPath)\n      }\n\n\n\n      // start fix for drawing over the edge\n      // const obj = e.path;\n      // console.log(\"obj\", obj);\n      // console.log(\"selectedBrush\", selectedBrush)\n      // // different burshes have different line types\n      // let points\n      // if (selectedBrush === 'Pencil' || selectedBrush === 'Pattern'){\n      //   points = [...obj.path];\n      // } else if (selectedBrush === 'Circle' || selectedBrush === 'Spray'){\n      //   points = [...obj.lineCoords];\n      // }\n\n      // for (let i = 0; i &lt; points.length; i++) {\n      //   const element = points[i];\n\n      //   if (\n      //     element[1] &lt; baseSize * (currentFrame - 1) ||\n      //     element[2] &lt; 0 ||\n      //     element[1] &gt; baseSize * currentFrame ||\n      //     element[2] &gt; baseSize\n      //   ) {\n      //     console.log('points[i]', points[i]);\n      //     points.splice(i, 1);\n      //   }\n\n      //   if (\n      //     obj.left &lt; baseSize * (currentFrame - 1) ||\n      //       obj.top &lt; 0 ||\n      //       obj.left + obj.width &gt; baseSize * currentFrame ||\n      //       obj.top + obj.height &gt; baseSize\n      //   ) {\n      //   // clip borders\n      //     console.log('outside of acceptable borders');\n      //     for (let i = 0; i &lt; points.length; i++) {\n      //       const element = points[i];\n      //       if (\n      //       element[1] &lt; baseSize * (currentFrame - 1) ||\n      //       element[2] &lt; 0 ||\n      //       element[1] &gt; baseSize * currentFrame ||\n      //       element[2] &gt; baseSize\n      //       ) {\n      //         console.log('points[i]', points[i]);\n      //         points.splice(i, 1);\n      //       }\n      //     }\n      //   // update value if &gt; or &lt; then border, ajust value to border value ( -line width)\n      //   }\n      // }\n      // obj.set({ path: points });\n      // obj.setCoords();\n      // const modObj = obj;\n\n      // // console.log('after', obj.path.length);\n      // // console.log('obj', obj);\n      // // console.log('obj.path', obj.path);\n      // canvas.remove(obj);\n\n      // const newObj = new fabric.Path(modObj.path, {\n      //   fill: '',\n      //   stroke: drawingColor,\n      //   strokeWidth: lineWidth,\n      //   name: 'line',\n      //   hasControls: false,\n      //   hasBorders: false,\n      //   objectCaching: false,\n      // });\n      // canvas.add(newObj);\n\n\n    });\n</code></pre> <p>- perPixelTargetFind: true ?</p> <p>An other framework that has an eraser implemented: KONVA</p> <p>https://konvajs.org/docs/index.html</p> <p>Free drawing with erase: https://konvajs.org/docs/sandbox/Free_Drawing.html</p> <p>undo /redo : https://codesandbox.io/s/0o9xmkno0 </p> <p>Transparent layers/ groups: https://konvajs.org/docs/sandbox/Transparent_Group.html</p> <p>Zooming the stage</p> <p>https://longviewcoder.com/2021/07/12/konva-zooming-the-stage-under-the-mouse/</p> <p>https://konvajs.org/docs/sandbox/Zooming_Relative_To_Pointer.html</p> <p>https://konvajs.org/docs/sandbox/Responsive_Canvas.html</p>"},{"location":"4-bugs/fixed/Bugfix-drawing-over-the-edge/#flood-fill-and-line-tool-for-html-canvas-also-color-picker","title":"Flood Fill and Line Tool for HTML Canvas (also color picker)","text":"<p>https://cantwell-tom.medium.com/flood-fill-and-line-tool-for-html-canvas-65e08e31aec6</p> <p>https://ben.akrin.com/an-html5-canvas-flood-fill-that-doesnt-kill-the-browser/</p> <p>http://www.williammalone.com/projects/html5-canvas-javascript-drawing-app-with-bucket-tool/</p>"},{"location":"4-bugs/fixed/Bugfix-drawing-over-the-edge/#color-picker-in-svelte","title":"Color picker in svelte","text":"<p>https://www.npmjs.com/package/svelte-awesome-color-picker</p> <p>https://svelte.dev/repl/8b00804d417b4fe89f42f90d6ed485e7?version=3.47.0</p> <p>Chips oude implementatie van de stopmotion/ drawing app:</p> <p>git checkout 4d3f4a6be6e1659aa6175415e530fafb6fc9c5d4</p> <pre><code>&lt;script&gt;\n  import { fabric } from \"./fabric\";\n  import { location, replace } from \"svelte-spa-router\";\n  import { onMount, beforeUpdate, onDestroy } from \"svelte\";\n  import {\n    uploadImage,\n    user,\n    uploadAvatar,\n    uploadHouse,\n    getObject,\n    setLoader,\n    convertImage,\n    updateObject,\n  } from \"../../api.js\";\n  import { client } from \"../../nakama.svelte\";\n  import { Session, Profile, tutorial } from \"../../session.js\";\n  import { Achievements } from \"../../storage\";\n  import NameGenerator from \"../components/nameGenerator.svelte\";\n  import MouseIcon from \"svelte-icons/fa/FaMousePointer.svelte\";\n  import Avatar from \"../components/avatar.svelte\";\n  import ManageSession from \"../game/ManageSession\";\n\n  let scaleRatio, lastImg, lastValue, lastWidth;\n  let params = { user: $location.split(\"/\")[2], name: $location.split(\"/\")[3] };\n  let invalidTitle = true;\n  let history = [],\n    historyCurrent;\n  let canv, _clipboard, Cursor, cursor, drawingColorEl;\n  let saveCanvas, savecanvas, videoCanvas;\n  // saving = false;\n  let videoWidth;\n  let canvas,\n    video,\n    lineWidth = 25;\n  let json,\n    drawingColor = \"#000000\";\n  let shadowOffset = 0,\n    shadowColor = \"#ffffff\",\n    shadowWidth = 0;\n  let title,\n    answer,\n    showBackground = true;\n  let fillColor = \"#f00\",\n    fillTolerance = 2;\n  let current = \"draw\";\n  if (!!params.name) title = params.name;\n  let saved = false,\n    saveToggle = false,\n    savedURL = \"\",\n    colorToggle = true;\n  // const statussen = [true, false];\n  export let appType = $location.split(\"/\")[1];\n  let version = 0;\n  let optionbox = true;\n\n  let status = true;\n  let displayName;\n  let isDrawn = false;\n  let isPreexistingArt = false;\n  let isAlreadyUploaded = false;\n  let isTitleChanged = false;\n\n  let applyBrush; // declaring the variable to be available globally, onMount assinging a function to it\n  let selectedBrush = \"Pencil\"; // by default the Pencil is chosen\n\n  let Object = {};\n\n  let FrameObject = {\n    type: \"image\",\n    version: \"4.6.0\",\n    originX: \"left\",\n    originY: \"top\",\n    left: -1024,\n    top: 0,\n    width: 0,\n    height: 1024,\n    fill: \"rgb(0,0,0)\",\n    stroke: null,\n    strokeWidth: 0,\n    strokeDashArray: null,\n    strokeLineCap: \"butt\",\n    strokeDashOffset: 0,\n    strokeLineJoin: \"miter\",\n    strokeUniform: false,\n    strokeMiterLimit: 4,\n    scaleX: 1,\n    scaleY: 1,\n    angle: 0,\n    flipX: false,\n    flipY: false,\n    opacity: 1,\n    shadow: null,\n    visible: true,\n    backgroundColor: \"\",\n    fillRule: \"nonzero\",\n    paintFirst: \"fill\",\n    globalCompositeOperation: \"source-over\",\n    skewX: 0,\n    skewY: 0,\n    erasable: true,\n    cropX: 0,\n    cropY: 0,\n    src: \"\",\n    crossOrigin: \"anonymous\",\n    filters: [],\n  };\n\n  var fab = function (id) {\n    return document.getElementById(id);\n  };\n\n  function adaptCanvasSize() {\n    // the canvas size is set by the least of two (width / height)\n    const canvasSize =\n      window.innerWidth &gt; window.innerHeight\n        ? window.innerHeight\n        : window.innerWidth;\n\n    // setting default width and height\n    canvas.setWidth(canvasSize);\n    canvas.setHeight(canvasSize);\n    cursor.setWidth(canvasSize);\n    cursor.setHeight(canvasSize);\n\n    const canvasReductionAmount = 200;\n\n    // for medium screens\n    if (canvasSize &lt; 1008 &amp;&amp; canvasSize &gt; 640) {\n      canvas.setWidth(canvasSize - canvasReductionAmount);\n      canvas.setHeight(canvasSize - canvasReductionAmount);\n      cursor.setWidth(canvasSize - canvasReductionAmount);\n      cursor.setHeight(canvasSize - canvasReductionAmount);\n    }\n\n    // for mobile screens\n    if (canvasSize &lt;= 640) {\n      canvas.setWidth(canvasSize - canvasReductionAmount * 0, 55);\n      canvas.setHeight(canvasSize - canvasReductionAmount * 0, 55);\n      cursor.setWidth(canvasSize - canvasReductionAmount * 0, 55);\n      cursor.setHeight(canvasSize - canvasReductionAmount * 0, 55);\n    }\n\n    // for mobile screens\n    if (canvasSize &lt;= 540) {\n      canvas.setWidth(canvasSize - canvasReductionAmount * 0, 4);\n      canvas.setHeight(canvasSize - canvasReductionAmount * 0, 4);\n      cursor.setWidth(canvasSize - canvasReductionAmount * 0, 4);\n      cursor.setHeight(canvasSize - canvasReductionAmount * 0, 4);\n    }\n\n    // for correct and adapted scaling of the preexisting artworks\n    scaleRatio = Math.min(canvas.width / 1024, canvas.width / 1024);\n    cursor.setZoom(scaleRatio);\n    canvas.setZoom(scaleRatio);\n  }\n\n  onMount(() =&gt; {\n    setLoader(true);\n    const autosave = setInterval(() =&gt; {\n      if (!saved) {\n        let data = {};\n        data.type = appType;\n        data.name = title;\n        if (appType == \"drawing\" || appType == \"house\") {\n          data.drawing = canvas.toDataURL(\"image/png\", 1);\n        }\n\n        localStorage.setItem(\"Drawing\", JSON.stringify(data));\n        console.log(\"stored in localstorage\");\n      }\n    }, 20000);\n    cursor = new fabric.StaticCanvas(Cursor);\n    canvas = new fabric.Canvas(canv, {\n      isDrawingMode: true,\n    });\n\n    // always adapting the canvas size on screen size change\n    window.onresize = () =&gt; {\n      adaptCanvasSize();\n    };\n\n    MouseIcon;\n    savecanvas = new fabric.Canvas(saveCanvas, {\n      isDrawingMode: true,\n    });\n\n    getImage();\n    setLoader(false);\n\n    fabric.Object.prototype.transparentCorners = false;\n\n    var drawingModeEl = fab(\"drawing-mode\"),\n      selectModeEl = fab(\"select-mode\"),\n      //fillModeEl = fab(\"fill-mode\"),\n      drawingOptionsEl = fab(\"drawing-mode-options\"),\n      eraseModeEl = fab(\"erase-mode\"),\n      drawingColorEl = fab(\"drawing-color\"),\n      //drawingShadowColorEl = fab(\"drawing-shadow-color\"),\n      drawingLineWidthEl = fab(\"drawing-line-width\"),\n      //drawingShadowWidth = fab(\"drawing-shadow-width\"),\n      //drawingShadowOffset = fab(\"drawing-shadow-offset\");\n      clearEl = fab(\"clear-canvas\");\n\n    clearEl.onclick = function () {\n      // if anything is drawn on the canvas and it has not been uploaded,\n      // save the artwork and clear the canvas\n      if (isDrawn &amp;&amp; !isAlreadyUploaded) {\n        upload();\n        isDrawn = false;\n      }\n      canvas.clear();\n      localStorage.setItem(\"Drawing\", \"\");\n    };\n\n    drawingModeEl.onclick = function () {\n      // console.log(\"mouse is down\");\n      switchOption(\"draw\");\n      canvas.isDrawingMode = true;\n      console.log(drawingColor);\n      floodFill(false);\n    };\n\n    selectModeEl.onclick = function () {\n      canvas.isDrawingMode = false;\n      switchOption(\"select\");\n      floodFill(false);\n    };\n\n    // fillModeEl.onclick = function () {\n    //   current = \"fill\";\n    //   floodFill(true);\n    // };\n\n    eraseModeEl.onclick = function () {\n      // erase functie kapot? recompile: http://fabricjs.com/build/\n      var eraseBrush = new fabric.EraserBrush(canvas);\n      canvas.freeDrawingBrush = eraseBrush;\n      canvas.freeDrawingBrush.width =\n        parseInt(drawingLineWidthEl.value, 10) || 1;\n      canvas.isDrawingMode = true;\n      switchOption(\"erase\");\n      floodFill(false);\n    };\n\n    if (fabric.PatternBrush) {\n      var vLinePatternBrush = new fabric.PatternBrush(canvas);\n      vLinePatternBrush.getPatternSrc = function () {\n        var patternCanvas = fabric.document.createElement(\"canvas\");\n        patternCanvas.width = patternCanvas.height = 10;\n        var ctx = patternCanvas.getContext(\"2d\");\n\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = lineWidth;\n        ctx.beginPath();\n        ctx.moveTo(0, 5);\n        ctx.lineTo(10, 5);\n        ctx.closePath();\n        ctx.stroke();\n\n        return patternCanvas;\n      };\n\n      var hLinePatternBrush = new fabric.PatternBrush(canvas);\n      hLinePatternBrush.getPatternSrc = function () {\n        var patternCanvas = fabric.document.createElement(\"canvas\");\n        patternCanvas.width = patternCanvas.height = 10;\n        var ctx = patternCanvas.getContext(\"2d\");\n\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = lineWidth;\n        ctx.beginPath();\n        ctx.moveTo(5, 0);\n        ctx.lineTo(5, 10);\n        ctx.closePath();\n        ctx.stroke();\n\n        return patternCanvas;\n      };\n\n      var squarePatternBrush = new fabric.PatternBrush(canvas);\n      squarePatternBrush.getPatternSrc = function () {\n        var squareWidth = 10,\n          squareDistance = 2;\n\n        var patternCanvas = fabric.document.createElement(\"canvas\");\n        patternCanvas.width = patternCanvas.height =\n          squareWidth + squareDistance;\n        var ctx = patternCanvas.getContext(\"2d\");\n\n        ctx.fillStyle = this.color;\n        ctx.fillRect(0, 0, squareWidth, squareWidth);\n\n        return patternCanvas;\n      };\n\n      var diamondPatternBrush = new fabric.PatternBrush(canvas);\n      diamondPatternBrush.getPatternSrc = function () {\n        var squareWidth = 10,\n          squareDistance = 5;\n        var patternCanvas = fabric.document.createElement(\"canvas\");\n        var rect = new fabric.Rect({\n          width: squareWidth,\n          height: squareWidth,\n          angle: 45,\n          fill: this.color,\n        });\n\n        var canvasWidth = rect.getBoundingRect().width;\n\n        patternCanvas.width = patternCanvas.height =\n          canvasWidth + squareDistance;\n        rect.set({ left: canvasWidth / 2, top: canvasWidth / 2 });\n\n        var ctx = patternCanvas.getContext(\"2d\");\n        rect.render(ctx);\n\n        return patternCanvas;\n      };\n    }\n\n    // fab(\"drawing-mode-selector\").onchange = () =&gt; changebrush();\n\n    // function changebrush() {\n    //   brush = fab(\"drawing-mode-selector\");\n    //   console.log(brush);\n    //   if (brush.value === \"hline\") {\n    //     canvas.freeDrawingBrush = vLinePatternBrush;\n    //   } else if (brush.value === \"vline\") {\n    //     canvas.freeDrawingBrush = hLinePatternBrush;\n    //   } else if (brush.value === \"square\") {\n    //     canvas.freeDrawingBrush = squarePatternBrush;\n    //   } else if (brush.value === \"diamond\") {\n    //     canvas.freeDrawingBrush = diamondPatternBrush;\n    //   } else if (brush.value === \"texture\") {\n    //     canvas.freeDrawingBrush = texturePatternBrush;\n    //   } else {\n    //     canvas.freeDrawingBrush = new fabric[brush.value + \"Brush\"](canvas);\n\n    //   }\n\n    //   if (canvas.freeDrawingBrush) {\n    //     var brush = canvas.freeDrawingBrush;\n    //     brush.color = drawingColorEl.value;\n    //     if (brush.getPatternSrc) {\n    //       brush.source = brush.getPatternSrc.call(brush);\n    //     }\n    //     brush.width = parseInt(drawingLineWidthEl.value, 10) || 1;\n    //     // brush.shadow = new fabric.Shadow({\n    //     //   blur: parseInt(drawingShadowWidth.value, 10) || 0,\n    //     //   offsetX: 0,\n    //     //   offsetY: 0,\n    //     //   affectStroke: true,\n    //     //   color: drawingShadowColorEl.value,\n    //     // });\n    //   }\n    // }\n\n    drawingColorEl.onchange = function () {\n      var brush = canvas.freeDrawingBrush;\n      brush.color = this.value;\n      if (brush.getPatternSrc) {\n        brush.source = brush.getPatternSrc.call(brush);\n      }\n    };\n    // drawingShadowColorEl.onchange = function () {\n    //   canvas.freeDrawingBrush.shadow.color = this.value;\n    // };\n    drawingLineWidthEl.onchange = function () {\n      canvas.freeDrawingBrush.width = parseInt(this.value, 10) || 1;\n      this.previousSibling.innerHTML = this.value;\n    };\n\n\n    if (canvas.freeDrawingBrush) {\n      canvas.freeDrawingBrush.color = drawingColorEl.value;\n      // canvas.freeDrawingBrush.source = canvas.freeDrawingBrush.getPatternSrc.call(this);\n      canvas.freeDrawingBrush.width =\n        parseInt(drawingLineWidthEl.value, 10) || 1;\n      // canvas.freeDrawingBrush.shadow = new fabric.Shadow({\n      //   blur: parseInt(drawingShadowWidth.value, 10) || 0,\n      //   offsetX: 0,\n      //   offsetY: 0,\n      //   affectStroke: true,\n      //   color: drawingShadowColorEl.value,\n      // });\n    }\n    console.log(params);\n\n    canvas.on(\"mouse:up\", function () {\n      // once there is anything is drawn on the canvas\n      isDrawn = true;\n      isPreexistingArt = false;\n      isAlreadyUploaded = false;\n      mouseEvent();\n    });\n\n    //////////////// mouse circle ////////////////////////////\n\n    //mouse cursor layer\n\n    var cursorOpacity = 0.5;\n    //create cursor and place it off screen\n    var mousecursor = new fabric.Circle({\n      left: -100,\n      top: -100,\n      radius: canvas.freeDrawingBrush.width / 2,\n      fill: \"rgba(0,0,0,\" + cursorOpacity + \")\",\n      stroke: \"black\",\n      originX: \"center\",\n      originY: \"center\",\n    });\n\n    cursor.add(mousecursor);\n\n    //redraw cursor on new mouse position when moved\n    canvas.on(\"mouse:move\", function (evt) {\n      if (current == \"select\")\n        return mousecursor\n          .set({ top: -100, left: -100 })\n          .setCoords()\n          .canvas.renderAll();\n      var mouse = this.getPointer(evt.e);\n      mousecursor\n        .set({\n          top: mouse.y,\n          left: mouse.x,\n        })\n        .setCoords()\n        .canvas.renderAll();\n    });\n\n    //while brush size is changed show cursor in center of canvas\n    document.getElementById(\"drawing-line-width\").oninput = () =&gt; {\n      changeBrushSize();\n    };\n    document.getElementById(\"erase-line-width\").oninput = () =&gt; {\n      changeBrushSize();\n    };\n\n    function changeBrushSize() {\n      var size = parseInt(lineWidth, 10);\n      canvas.freeDrawingBrush.width = size;\n      mousecursor\n        // .center()\n        .set({\n          radius: size / 2,\n          top: 500,\n          left: 1300,\n        })\n        .setCoords()\n        .canvas.renderAll();\n    }\n\n    //change drawing color\n    drawingColorEl.onchange = function () {\n      console.log(\"color\");\n      canvas.freeDrawingBrush.color = this.value;\n      var bigint = parseInt(this.value.replace(\"#\", \"\"), 16);\n      var r = (bigint &gt;&gt; 16) &amp; 255;\n      var g = (bigint &gt;&gt; 8) &amp; 255;\n      var b = bigint &amp; 255;\n      //  mousecursor.fill = \"rgba(\" + [r,g,b,cursorOpacity].join(\",\") + \")\"\n\n      mousecursor\n        .set({\n          fill: \"rgba(\" + [r, g, b, cursorOpacity].join(\",\") + \")\",\n        })\n        .canvas.renderAll();\n    };\n\n    //////////////// mouse circle ////////////////////////////\n\n    //////////////// drawing challenge ////////////////////////\n    if (appType == \"drawingchallenge\") {\n      // each mouse-up event sends the drawing\n      canvas.on(\"mouse:up\", () =&gt; {\n        // get the drawing from the canvas in the format of SVG\n        const canvasData = canvas.toSVG();\n\n        // convert SVG into the HTML format in order to be able to manipulate inner data\n        const parsedSVG = new DOMParser().parseFromString(\n          canvasData,\n          \"text/html\"\n        );\n\n        // all &lt;g&gt; tags contain drawing action\n        const gTagElement = parsedSVG.getElementsByTagName(\"g\");\n\n        // loop through &lt;g&gt; tags, remove all previous drawings and leave only the last one\n        for (let i = gTagElement.length - 2; i &gt;= 0; --i) {\n          gTagElement[i].remove();\n        }\n\n        // get the position of the drawing\n        const positionObject = canvas.toJSON().objects;\n\n        // needed SVG is stored inside of body which we want to send only\n        const body = parsedSVG.getElementsByTagName(\"BODY\")[0].innerHTML;\n\n        // all data to send\n        const location = \"drawingchallenge\";\n        const JSONToSend = `{ \"action\": ${JSON.stringify(\n          body\n        )}, \"location\": \"${location}\", \"posX\": ${\n          positionObject[positionObject.length - 1].left\n        }, \"posY\": ${positionObject[positionObject.length - 1].top}}`;\n\n        // send data\n        ManageSession.socket.rpc(\"move_position\", JSONToSend);\n      });\n\n      // listening to the stream to get actions of other person's drawing\n      ManageSession.socket.onstreamdata = (streamdata) =&gt; {\n        let data = JSON.parse(streamdata.data);\n\n        if ($Session.user_id != data.user_id) {\n          // apply drawings to the canvas if only it is received from other participant\n          fabric.loadSVGFromString(data.action, function (objects) {\n            objects.forEach(function (svg) {\n              console.log(\"svg\", svg);\n              svg.set({\n                scaleX: 1,\n                scaleY: 1,\n                left: data.posX,\n                top: data.posY,\n              });\n              canvas.add(svg).renderAll();\n            });\n          });\n        } else {\n          console.log(\"The same user!\");\n        }\n      };\n    }\n    //////////////// drawing challenge ////////////////////////\n\n    adaptCanvasSize();\n\n    applyBrush = (brushType) =&gt; {\n      if (typeof brushType == \"string\") selectedBrush = brushType;\n      canvas.freeDrawingBrush = new fabric[selectedBrush + \"Brush\"](canvas);\n      if (canvas.freeDrawingBrush) {\n        var brush = canvas.freeDrawingBrush;\n        brush.color = drawingColorEl.value;\n        if (brush.getPatternSrc) {\n          brush.source = brush.getPatternSrc.call(brush);\n        }\n        brush.width = parseInt(drawingLineWidthEl.value, 10) || 1;\n      }\n    };\n  });\n  /////////////////// end onMount ///////////////////////\n\n  // to change visible/hidden status of the artwork\n  const changeVisibility = async () =&gt; {\n    setLoader(true);\n    status = !status;\n    if (isPreexistingArt) {\n      // we update the name of the preexisting artwork\n      await updateObject(Object.collection, Object.key, Object.value, status);\n    }\n    setLoader(false);\n  };\n\n  const upload = async () =&gt; {\n    if (!invalidTitle) return;\n\n    // we upload the artwork if either something added to the art itself or when it is title changed\n    if (isDrawn || isTitleChanged) {\n      version = version + 1; // with every new update of the artwork, it is version gets +1\n\n      setLoader(true);\n      if (appType == \"drawing\") {\n        var Image = canvas.toDataURL(\"image/png\", 1);\n        var blobData = dataURItoBlob(Image);\n        if (!!!title) {\n          title = Date.now() + \"_\" + displayName;\n        }\n        // replace(`${$location}/${$Session.user_id}/${displayName}`);\n        await uploadImage(\n          title,\n          appType,\n          blobData,\n          status,\n          version,\n          displayName\n        ).then((url) =&gt; {\n          // in every appType we assign url to the savedURL variable, it is needed for downloading\n          // by default savedURL equals \"\"\n          savedURL = url;\n          setLoader(false);\n        });\n      }\n      if (appType == \"house\") {\n        var Image = canvas.toDataURL(\"image/png\", 1);\n        var blobData = dataURItoBlob(Image);\n        await uploadHouse(blobData).then((response) =&gt; {\n          savedURL = response;\n        });\n        setLoader(false);\n      }\n      if (appType == \"stopmotion\") {\n        await createStopmotion();\n        setLoader(false);\n      }\n      if (appType == \"avatar\") {\n        createAvatar().then((resp) =&gt; {\n          setLoader(false);\n        });\n      }\n      isAlreadyUploaded = true; // once it is uploaded, we don't have to upload it again on the close button click\n      isTitleChanged = false;\n    }\n  };\n\n  onDestroy(() =&gt; {\n    // upload the artwork on the close button click,\n    // if it is not uploaded yet or if the title has been changed\n    if (!isAlreadyUploaded || isTitleChanged) {\n      upload();\n    }\n  });\n\n  async function download() {\n    // check first if we are dealing with preexisting artwork\n    // if it is the case, simply download from the url of the artwork on the addressbar\n    if (isPreexistingArt) {\n      if (!savedURL) {\n        let url = lastImg;\n        window.location = url;\n        return; // don't proceed\n      }\n    }\n\n    // start the process of downloading, only if something is drawn on the canvas\n    if (isDrawn) {\n      // if the user missed clicking the save button (upload function), then upload it first\n      if (!isAlreadyUploaded) {\n        await upload();\n      }\n      if (appType == \"stopmotion\") {\n        // the stopmotion function is not awaiting properly, a further investigation is needed (!)\n        // once fixed, there is no need to use setTimeout\n        setTimeout(async () =&gt; {\n          const url = await convertImage(savedURL);\n          window.location = url;\n        }, 4500);\n      } else {\n        // for the rest of appTypes no need to set Timeout\n        const url = await convertImage(savedURL);\n        window.location = url;\n      }\n    }\n  }\n\n  const updateFrame = () =&gt; {\n    frames[currentFrame] = canvas.toJSON();\n    console.log(\"currentFrame\", currentFrame)\n    frames = frames;\n\n    backgroundFrames[currentFrame] = canvas.toDataURL(\"image/png\", 1);\n    backgroundFrames = backgroundFrames;\n  };\n\n  const getImage = async () =&gt; {\n    let localStore = JSON.parse(localStorage.getItem(\"Drawing\"));\n    if (!!localStore) {\n      console.log(localStore);\n      console.log(\"store \" + localStore.name);\n      console.log(\"param \" + params.name);\n      if (localStore.name == params.name &amp;&amp; typeof params.name != \"undefined\") {\n        console.log(localStore.type);\n        // isDrawn = true;\n        // console.log(\"localstorage isDrawn\", isDrawn);\n        if (localStore.type == \"drawing\") {\n          console.log(\"test\");\n          // canvas.loadFromJSON(\n          //   localStore.drawing,\n          //   canvas.renderAll.bind(canvas)\n          // );\n          fabric.Image.fromURL(\n            localStore.drawing,\n            function (oImg) {\n              oImg.set({ left: 0, top: 0 });\n              oImg.scaleToHeight(1024);\n              oImg.scaleToWidth(1024);\n              canvas.add(oImg);\n            },\n            { crossOrigin: \"anonymous\" }\n          );\n        }\n\n        //     if (localStore.type == \"stopmotion\") {\n        //       frames = localStore.frames;\n        //       canvas.loadFromJSON(\n        //         localStore.frames[0],\n        //         canvas.renderAll.bind(canvas)\n        //       );\n        //     }\n      }\n    }\n\n    if (!!!params.name &amp;&amp; (appType == \"stopmotion\" || appType == \"drawing\"))\n      return setLoader(false);\n    console.log(\"appType\", appType);\n    // get images\n    if (appType == \"avatar\") {\n      lastImg = await convertImage($Profile.avatar_url, \"1024\", \"10000\");\n      isPreexistingArt = true;\n    } else if (appType == \"house\") {\n      let Object = await getObject(\"home\", $Profile.meta.Azc, $Profile.user_id);\n      lastImg = await convertImage(Object.value.url, \"1024\", \"1024\");\n      lastValue = Object.value;\n      title = Object.key;\n      status = Object.permission_read == 2 ? true : false;\n      isPreexistingArt = true;\n    } else {\n      Object = await getObject(appType, params.name, params.user);\n      console.log(\"object\", Object);\n      displayName = Object.value.displayname;\n      title = Object.key;\n      status = Object.permission_read == 2 ? true : false;\n      console.log(\"status in getImage\", status);\n      version = Object.value.version;\n      console.log(\"displayName\", displayName);\n      lastImg = await convertImage(Object.value.url);\n      isPreexistingArt = true;\n    }\n    // put images on canvas\n    if (appType == \"avatar\" || appType == \"stopmotion\") {\n      console.log(\"avatar\");\n      let frameAmount;\n      var framebuffer = new Image();\n      framebuffer.src = lastImg;\n      framebuffer.onload = function () {\n        console.log(\"img\", this.width);\n        lastWidth = this.width;\n        frameAmount = lastWidth / 1024;\n\n        FrameObject.src = lastImg;\n        FrameObject.width = lastWidth;\n        frames = [];\n        for (let i = 0; i &lt; frameAmount; i++) {\n          FrameObject.left = 0;\n          FrameObject.width = 1024;\n          FrameObject.cropX = i * 1024;\n          // FrameObject.clipTo = function (ctx) {\n          //   // origin is the center of the image\n          //   // var x = rectangle.left - image.getWidth() / 2;\n          //   // var y = rectangle.top - image.getHeight() / 2;\n          //   // ctx.rect(i * -1024, 1024, (i * -1024)+1024, 1024);\n          //   ctx.rect(0,-1024,1024,1024)\n          // };\n          // FrameObject.setCoords();\n          frames.push({\n            version: \"4.6.0\",\n            objects: [{ ...FrameObject }],\n          });\n        }\n        frames = frames;\n        console.log(\"frames\", frames);\n        currentFrame = 0;\n        canvas.loadFromJSON(frames[0], function () {\n          canvas.renderAll.bind(canvas);});\n      };\n    }\n    if (appType == \"drawing\" || appType == \"house\") {\n      fabric.Image.fromURL(\n        lastImg,\n        function (oImg) {\n          oImg.set({ left: 0, top: 0 });\n          oImg.scaleToHeight(1024);\n          oImg.scaleToWidth(1024);\n          canvas.add(oImg);\n        },\n        { crossOrigin: \"anonymous\" }\n      );\n    }\n\n    if (!!!params.user) {\n      console.log(window.location.pathname);\n      replace(\"/\" + appType + \"/\" + $Session.user_id + \"/\" + displayName);\n    }\n\n    setLoader(false);\n  };\n\n  function dataURItoBlob(dataURI) {\n    var binary = atob(dataURI.split(\",\")[1]);\n    var array = [];\n    for (var i = 0; i &lt; binary.length; i++) {\n      array.push(binary.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(array)], { type: \"image/png\" });\n  }\n\n  async function getDataUrl(img) {\n    //  // Set width and height\n    //  savecanvas.width = img.width;\n    //  savecanvas.height = img.height;\n    //  // Draw the image\n    //  savecanvas.drawImage(img, 0, 0);\n    //  return savecanvas.toDataURL('image/jpeg');\n\n    // Create canvas\n    let image;\n    console.log(\"img\", img);\n    await fabric.Image.fromURL(img, function (oImg) {\n      oImg.set({ left: 0, top: 0 });\n      oImg.scaleToHeight(1024);\n      oImg.scaleToWidth(1024);\n      console.log(oImg);\n      console.log(canvas);\n      savecanvas.add(oImg);\n    });\n    image = savecanvas.toDataURL(\"image/png\", 1);\n    return image;\n  }\n\n  function mouseEvent() {\n    setTimeout(() =&gt; {\n      updateFrame();\n      saveHistory();\n    }, 200);\n  }\n\n  function zoomIt(factor) {\n    // canvas.setHeight(canvas.getHeight() * factor);\n    // canvas.setWidth(canvas.getWidth() * factor);\n    if (canvas.backgroundImage) {\n      // Need to scale background images as well\n      var bi = canvas.backgroundImage;\n      bi.width = bi.width * factor;\n      bi.height = bi.height * factor;\n    }\n    var objects = canvas.getObjects();\n    for (var i in objects) {\n      var scaleX = objects[i].scaleX;\n      var scaleY = objects[i].scaleY;\n      var left = objects[i].left;\n      var top = objects[i].top;\n\n      var tempScaleX = scaleX * factor;\n      var tempScaleY = scaleY * factor;\n      var tempLeft = left * factor;\n      var tempTop = top * factor;\n\n      objects[i].scaleX = tempScaleX;\n      objects[i].scaleY = tempScaleY;\n      objects[i].left = tempLeft;\n      objects[i].top = tempTop;\n\n      objects[i].setCoords();\n    }\n    canvas.renderAll();\n    canvas.calcOffset();\n  }\n\n  ////////////////////////// stop motion functie ////////////////////////////////////////\n\n  let frames = [{}];\n  let backgroundFrames = [{}];\n  let maxFrames = 100;\n  let currentFrame = 0;\n  let play = false;\n\n  // Create a new instance of the Image class\n  var img = new Image();\n\n  // When the image loads, set it as background image\n  if (showBackground) {\n    img.onload = function () {\n      var f_img = new fabric.Image(img);\n      let options;\n      let scale = 1024 / canvas.height;\n      if (canvas.width &lt;= canvas.height) {\n        scale = 1024 / canvas.width;\n      }\n      if (!play)\n        options = {\n          opacity: 0.5,\n          width: 1024,\n          height: 1024,\n          scaleX: scale,\n          scaleY: scale,\n        };\n      else options = {};\n      canvas.setBackgroundImage(f_img, canvas.renderAll.bind(canvas), options);\n\n      canvas.renderAll();\n    };\n  }\n\n  const changeFrame = (newFrame) =&gt; {\n    console.log(\"newFrame\", newFrame);\n    if (!play) {\n      console.log(frames);\n      // save frame\n      // put as background of button\n      canvas.clear();\n      // load frame\n      canvas.loadFromJSON(frames[newFrame], canvas.renderAll.bind(canvas));\n      if (showBackground) img.src = backgroundFrames[newFrame - 1];\n\n      // change current frame\n      currentFrame = newFrame;\n      frames[newFrame].backgroundImage;\n    }\n    if (play || !showBackground) {\n      canvas.clear();\n\n      frames[newFrame].backgroundImage = {};\n      canvas.loadFromJSON(frames[newFrame], canvas.renderAll.bind(canvas));\n    }\n  };\n\n  const deleteFrame = (Frame) =&gt; {\n    console.log(\"Frame\", Frame);\n    for (var i = 0; i &lt; frames.length; i++) {\n      console.log(\"frames[i], Frame\", frames[i], Frame);\n      if (i == Frame) {\n        console.log(\"i\", i);\n\n        if (i &gt; 0) {\n          frames.splice(i, 1);\n          currentFrame = i - 1;\n          frames[currentFrame].backgroundImage = {};\n          changeFrame(currentFrame);\n        } else {\n          frames.shift();\n          frames[0].backgroundImage = {};\n          currentFrame = 0;\n          changeFrame(0);\n        }\n      }\n    }\n  };\n\n  async function addFrame() {\n    await updateFrame();\n    if (frames.length &gt;= maxFrames) return;\n    console.log(\"click\");\n    frames.push({});\n    frames = frames;\n    await changeFrame(frames.length - 1);\n    let framebar = document.getElementById(\"frame-bar\");\n    framebar.scrollTo({ left: 0, top: framebar.scrollHeight });\n  }\n\n  function playFrames() {\n    if (currentFrame &lt; frames.length - 1) currentFrame++;\n    else currentFrame = 0;\n\n    changeFrame(currentFrame);\n  }\n  let playint;\n\n  function setPlay(bool) {\n    if (bool) {\n      playint = window.setInterval(playFrames, 500);\n    } else {\n      window.clearInterval(playint);\n    }\n  }\n\n  ///////////////////// select functions /////////////////////////////////\n  function Copy() {\n    // clone what are you copying since you\n    // may want copy and paste on different moment.\n    // and you do not want the changes happened\n    // later to reflect on the copy.\n    canvas.getActiveObject().clone(function (cloned) {\n      _clipboard = cloned;\n    });\n  }\n\n  function Paste() {\n    // clone again, so you can do multiple copies.\n    _clipboard.clone(function (clonedObj) {\n      canvas.discardActiveObject();\n      clonedObj.set({\n        left: clonedObj.left + 10,\n        top: clonedObj.top + 10,\n        evented: true,\n      });\n      if (clonedObj.type === \"activeSelection\") {\n        // active selection needs a reference to the canvas.\n        clonedObj.canvas = canvas;\n        clonedObj.forEachObject(function (obj) {\n          canvas.add(obj);\n        });\n        // this should solve the unselectability\n        clonedObj.setCoords();\n      } else {\n        canvas.add(clonedObj);\n      }\n      _clipboard.top += 10;\n      _clipboard.left += 10;\n      canvas.setActiveObject(clonedObj);\n      canvas.requestRenderAll();\n    });\n  }\n\n  function Delete() {\n    // clone what are you copying since you\n    // may want copy and paste on different moment.\n    // and you do not want the changes happened\n    // later to reflect on the copy.\n    var curSelectedObjects = canvas.getActiveObjects();\n    canvas.discardActiveObject();\n    for (var i = 0; i &lt; curSelectedObjects.length; i++) {\n      canvas.remove(curSelectedObjects[i]);\n    }\n  }\n\n  /////////////// select functions end //////////////////\n\n  ///////////////////// stop motion functies end //////////////////////////////\n\n  //////////////////// avatar functies /////////////////////////////////\n\n  if (appType == \"avatar\") {\n    maxFrames = 5;\n  }\n\n  async function createAvatar() {\n    let size = 1024;\n    savecanvas.setHeight(size);\n    savecanvas.setWidth(size * frames.length);\n    savecanvas.renderAll();\n    savecanvas.clear();\n    let data = { objects: [] };\n\n    for (let i = 0; i &lt; frames.length; i++) {\n      frames[i].backgroundImage = {};\n      const newFrames = frames[i].objects.map((object, index) =&gt; {\n        //if (object.type == \"image\") return;\n        const newObject = { ...object };\n        newObject.top = newObject.top;\n        newObject.left += size * i;\n        // newObject.scaleX = scaleRatio/1024;\n        // newObject.scaleY = scaleRatio/1024;\n        data.objects.push(newObject);\n      });\n    }\n    FrameObject.left = 0;\n    // data.objects = [{ ...FrameObject }].concat(data.objects);\n\n    console.log(\"data\", data);\n\n    await savecanvas.loadFromJSON(data, savecanvas.renderAll.bind(savecanvas));\n    await savecanvas.calcOffset();\n\n    //var Image = savecanvas.toDataURL(\"image/png\", 0.2);\n    // console.log(Image);\n    // var blobData = dataURItoBlob(Image);\n    setTimeout(async () =&gt; {\n      var Image = savecanvas.toDataURL(\"image/png\", 1);\n      var blobData = dataURItoBlob(Image);\n      json = JSON.stringify(frames);\n      Image = await uploadAvatar(blobData, json, version);\n    }, 5000);\n  }\n\n  async function createStopmotion() {\n    console.log(\"111\");\n    // console.log(\"saved\");\n    json = JSON.stringify(frames);\n    // console.log(\"json\", json);\n    // var blobData = dataURItoBlob(frames);\n    // uploadImage(title, appType, json, blobData, status);\n    let size = 1024;\n    savecanvas.setHeight(size);\n    savecanvas.setWidth(size * frames.length);\n    savecanvas.renderAll();\n    savecanvas.clear();\n    let data = { objects: [] };\n\n    for (let i = 0; i &lt; frames.length; i++) {\n      frames[i].backgroundImage = {};\n      const newFrames = frames[i].objects.map((object, index) =&gt; {\n        //if (object.type == \"image\") return;\n        const newObject = { ...object };\n        newObject.top = newObject.top;\n        newObject.left += size * i;\n        // newObject.scaleX = scaleRatio/1024;\n        // newObject.scaleY = scaleRatio/1024;\n        data.objects.push(newObject);\n      });\n    }\n    FrameObject.left = 0;\n    // data.objects = [{ ...FrameObject }].concat(data.objects);\n\n    // console.log(\"data\", data);\n\n    savecanvas.loadFromJSON(data, async () =&gt; {\n      console.log(\"222\");\n      savecanvas.renderAll.bind(savecanvas);\n      savecanvas.calcOffset();\n\n      var saveImage = await savecanvas.toDataURL(\"image/png\", 1);\n      // console.log(\"savedImage\", saveImage);\n\n      var blobData = dataURItoBlob(saveImage);\n      // console.log(\"blobData\", blobData);\n      if (!!!title) {\n        title = Date.now() + \"_\" + displayName;\n      }\n      await uploadImage(\n        title,\n        appType,\n        blobData,\n        status,\n        version,\n        displayName\n      ).then((url) =&gt; {\n        console.log(\"333\");\n        savedURL = url;\n        console.log(\"savedURL stopmotion\", savedURL);\n        // saving = false;\n        setLoader(false);\n      });\n      //Profile.update(n =&gt; n.url = Image);\n    });\n  }\n\n  //////////////////// avatar functies end /////////////////////////////////\n\n  //////////////////// camera functies ///////////////////////////////\n  function camera() {\n    current = \"camera\";\n\n    if (navigator.mediaDevices &amp;&amp; navigator.mediaDevices.getUserMedia) {\n      navigator.mediaDevices\n        .getUserMedia({ video: true })\n        .then(function (stream) {\n          video.srcObject = stream;\n          video.play();\n        })\n        .catch((err) =&gt; {\n          console.log(err);\n          alert(err);\n        });\n    }\n  }\n\n  async function capturePicture() {\n    let videocanv = new fabric.Canvas(videoCanvas, {\n      isDrawingMode: false,\n    });\n    videocanv.setHeight(videoWidth / 1.33);\n    videocanv.setWidth(videoWidth);\n    let vidContext = videocanv.getContext(\"2d\");\n    vidContext.drawImage(video, 0, 0, videoWidth, videoWidth / 1.33);\n    var uri = videoCanvas.toDataURL(\"image/png\", 1);\n    fabric.Image.fromURL(uri, function (oImg) {\n      oImg.scale(1);\n      oImg.set({ left: 0, top: 0 });\n      canvas.add(oImg);\n    });\n    video.srcObject.getTracks()[0].stop();\n    current = \"select\";\n  }\n\n  //////////////////// camera functies end ///////////////////////////\n\n  //////////////////// redo/undo function ///////////////////////////\n\n  const saveHistory = () =&gt; {};\n\n  const undo = () =&gt; {\n    let lastObject =\n      canvas.toJSON().objects[canvas.toJSON().objects.length - 1];\n    history.push(lastObject);\n    let newFile = canvas.toJSON();\n    newFile.objects.pop();\n    canvas.loadFromJSON(newFile, canvas.renderAll.bind(canvas));\n\n    // once all previously drawn objects are deleted, isDrawn is set to false\n    if (canvas.toJSON().objects.length == 0) {\n      isDrawn = false;\n    }\n  };\n\n  const redo = () =&gt; {\n    let newFile = canvas.toJSON();\n    newFile.objects.push(history[history.length - 1]);\n    history.pop();\n    canvas.loadFromJSON(newFile, canvas.renderAll.bind(canvas));\n\n    // once the elements that has been removed are brought back, isDrawn is set back to true\n    if (canvas.toJSON().objects.length &gt; 0) {\n      isDrawn = true;\n    }\n  };\n\n  //////////////////// redo/undo function end ///////////////////////////\n\n  /////////////////// fill functie //////////////////////////////////////\n  var FloodFill = {\n    // Compare subsection of array1's values to array2's values, with an optional tolerance\n    withinTolerance: function (array1, offset, array2, tolerance) {\n      var length = array2.length,\n        start = offset + length;\n      tolerance = tolerance || 0;\n\n      // Iterate (in reverse) the items being compared in each array, checking their values are\n      // within tolerance of each other\n      while (start-- &amp;&amp; length--) {\n        if (Math.abs(array1[start] - array2[length]) &gt; tolerance) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n\n    // The actual flood fill implementation\n    fill: function (\n      imageData,\n      getPointOffsetFn,\n      point,\n      color,\n      target,\n      tolerance,\n      width,\n      height\n    ) {\n      var directions = [\n          [1, 0],\n          [0, 1],\n          [0, -1],\n          [-1, 0],\n        ],\n        coords = [],\n        points = [point],\n        seen = {},\n        key,\n        x,\n        y,\n        offset,\n        i,\n        x2,\n        y2,\n        minX = -1,\n        maxX = -1,\n        minY = -1,\n        maxY = -1;\n\n      // Keep going while we have points to walk\n      while (!!(point = points.pop())) {\n        x = point.x;\n        y = point.y;\n        offset = getPointOffsetFn(x, y);\n\n        // Move to next point if this pixel isn't within tolerance of the color being filled\n        if (!FloodFill.withinTolerance(imageData, offset, target, tolerance)) {\n          continue;\n        }\n\n        if (x &gt; maxX) {\n          maxX = x;\n        }\n        if (y &gt; maxY) {\n          maxY = y;\n        }\n        if (x &lt; minX || minX == -1) {\n          minX = x;\n        }\n        if (y &lt; minY || minY == -1) {\n          minY = y;\n        }\n\n        // Update the pixel to the fill color and add neighbours onto stack to traverse\n        // the fill area\n        i = directions.length;\n        while (i--) {\n          // Use the same loop for setting RGBA as for checking the neighbouring pixels\n          if (i &lt; 4) {\n            imageData[offset + i] = color[i];\n            coords[offset + i] = color[i];\n          }\n\n          // Get the new coordinate by adjusting x and y based on current step\n          x2 = x + directions[i][0];\n          y2 = y + directions[i][1];\n          key = x2 + \",\" + y2;\n\n          // If new coordinate is out of bounds, or we've already added it, then skip to\n          // trying the next neighbour without adding this one\n          if (x2 &lt; 0 || y2 &lt; 0 || x2 &gt;= width || y2 &gt;= height || seen[key]) {\n            continue;\n          }\n\n          // Push neighbour onto points array to be processed, and tag as seen\n          points.push({ x: x2, y: y2 });\n          seen[key] = true;\n        }\n      }\n\n      return {\n        x: minX,\n        y: minY,\n        width: maxX - minX,\n        height: maxY - minY,\n        coords: coords,\n      };\n    },\n  }; // End FloodFill\n\n  function hexToRgb(hex, opacity) {\n    opacity = Math.round(opacity * 255) || 255;\n    hex = hex.replace(\"#\", \"\");\n    var rgb = [],\n      re = new RegExp(\"(.{\" + hex.length / 3 + \"})\", \"g\");\n    hex.match(re).map(function (l) {\n      rgb.push(parseInt(hex.length % 2 ? l + l : l, 16));\n    });\n    return rgb.concat(opacity);\n  }\n\n  function floodFill(enable) {\n    if (!enable) {\n      canvas.off(\"mouse:down\");\n      canvas.selection = true;\n      canvas.forEachObject(function (object) {\n        object.selectable = true;\n      });\n      return;\n    }\n\n    canvas.discardActiveObject();\n    canvas.renderAll();\n    canvas.selection = false;\n    canvas.forEachObject(function (object) {\n      object.selectable = false;\n    });\n\n    canvas.on({\n      \"mouse:down\": function (e) {\n        var mouseX = Math.round(e.e.layerX),\n          mouseY = Math.round(e.e.layerY),\n          //canvas = canvas.lowerCanvasEl,\n          context = canvas.getContext(\"2d\"),\n          parsedColor = hexToRgb(fillColor),\n          imageData = context.getImageData(0, 0, canvas.width, canvas.height),\n          getPointOffset = function (x, y) {\n            return 4 * (y * imageData.width + x);\n          },\n          targetOffset = getPointOffset(mouseX, mouseY),\n          target = imageData.data.slice(targetOffset, targetOffset + 4);\n\n        if (FloodFill.withinTolerance(target, 0, parsedColor, fillTolerance)) {\n          // Trying to fill something which is (essentially) the fill color\n          return;\n        }\n\n        // Perform flood fill\n        var data = FloodFill.fill(\n          imageData.data,\n          getPointOffset,\n          { x: mouseX, y: mouseY },\n          parsedColor,\n          target,\n          fillTolerance,\n          imageData.width,\n          imageData.height\n        );\n\n        if (0 == data.width || 0 == data.height) {\n          return;\n        }\n\n        var tmpCanvas = document.createElement(\"canvas\"),\n          tmpCtx = tmpCanvas.getContext(\"2d\");\n        tmpCanvas.width = canvas.width;\n        tmpCanvas.height = canvas.height;\n\n        var palette = tmpCtx.getImageData(\n          0,\n          0,\n          tmpCanvas.width,\n          tmpCanvas.height\n        ); // x, y, w, h\n        palette.data.set(new Uint8ClampedArray(data.coords)); // Assuming values 0..255, RGBA\n        tmpCtx.putImageData(palette, 0, 0); // Repost the data.\n        var imgData = tmpCtx.getImageData(\n          data.x,\n          data.y,\n          data.width,\n          data.height\n        ); // Get cropped image\n\n        tmpCanvas.width = data.width;\n        tmpCanvas.height = data.height;\n        tmpCtx.putImageData(imgData, 0, 0);\n\n        // Convert canvas back to image:\n        var img = new Image();\n        img.onload = function () {\n          canvas.add(\n            new fabric.Image(img, {\n              left: data.x,\n              top: data.y,\n              selectable: false,\n            })\n          );\n        };\n        img.src = tmpCanvas.toDataURL(\"image/png\", 1);\n\n        canvas.add(\n          new fabric.Image(tmpCanvas, {\n            left: data.x,\n            top: data.y,\n            selectable: false,\n          })\n        );\n      },\n    });\n  }\n\n  ///////////////// fill functie end ///////////////////////\n\n  function backgroundHide() {\n    showBackground = !showBackground;\n    if (!showBackground) {\n      for (let i = 0; i &lt; frames.length; i++) {\n        frames[i].backgroundImage = {};\n      }\n      canvas.loadFromJSON(frames[currentFrame], canvas.renderAll.bind(canvas));\n      frames = frames;\n    } else {\n      img.src = backgroundFrames[currentFrame - 1];\n    }\n  }\n\n  function switchOption(option) {\n    if (current === option) {\n      optionbox = !optionbox;\n    } else {\n      optionbox = false;\n      current = option;\n    }\n  }\n\n  let transition = { y: 200, duration: 500 };\n  if (window.screen.width &gt;= 600) {\n    transition = { x: 200, duration: 500 };\n  }\n&lt;/script&gt;\n\n&lt;main on:mouseup={mouseEvent}&gt;\n  &lt;div class=\"main-container\"&gt;\n    &lt;div class=\"canvas-frame-container\"&gt;\n      {#if current == \"camera\"}\n        &lt;video bind:this={video} autoplay /&gt;\n        &lt;button on:click={capturePicture} class=\"videoButton\" /&gt;\n        &lt;div class=\"videocanvas\"&gt;\n          &lt;canvas bind:this={videoCanvas} /&gt;\n        &lt;/div&gt;\n      {/if}\n      &lt;!-- &lt;div class=\"topbar\"&gt;\n      &lt;div&gt;\n        &lt;a on:click={undo}&gt;&lt;img class=\"icon\" src=\"assets/SHB/svg/AW-icon-rotate-CCW.svg\"&gt;&lt;/a&gt;\n        &lt;a on:click={redo}&gt;&lt;img class=\"icon\" src=\"assets/SHB/svg/AW-icon-rotate-CW.svg\"&gt;&lt;/a&gt;\n      &lt;/div&gt;\n    &lt;/div&gt; --&gt;\n      &lt;div class=\"canvas-box\" class:hidden={current === \"camera\"}&gt;\n        &lt;canvas bind:this={canv} class=\"canvas\" /&gt;\n        &lt;canvas bind:this={Cursor} id=\"cursor\" /&gt;\n      &lt;/div&gt;\n      &lt;div class=\"savecanvas\"&gt;\n        &lt;canvas bind:this={saveCanvas} /&gt;\n      &lt;/div&gt;\n      &lt;div class=\"frame-box\"&gt;\n        {#if appType == \"stopmotion\" || appType == \"avatar\"}\n          &lt;div id=\"frame-bar\"&gt;\n            {#each frames as frame, index}\n              &lt;div&gt;\n                &lt;div\n                  id={index}\n                  class:selected={currentFrame === index}\n                  on:click={() =&gt; {\n                    changeFrame(index);\n                    console.log(\"debug index of frame:\", index); //remove debug\n                  }}\n                  style=\"background-image: url({backgroundFrames[index]})\"\n                &gt;\n                  &lt;div&gt;{index + 1}&lt;/div&gt;\n                &lt;/div&gt;\n                {#if currentFrame === index &amp;&amp; frames.length &gt; 1}\n                  &lt;img\n                    class=\"icon\"\n                    on:click={() =&gt; {\n                      deleteFrame(index);\n                    }}\n                    src=\"assets/SHB/svg/AW-icon-trash.svg\"\n                  /&gt;\n                {/if}\n              &lt;/div&gt;\n            {/each}\n            {#if frames.length &lt; maxFrames}\n              &lt;div&gt;\n                &lt;div id=\"frameNew\" on:click={addFrame}&gt;&lt;div&gt;+&lt;/div&gt;&lt;/div&gt;\n              &lt;/div&gt;\n            {/if}\n          &lt;/div&gt;\n          &lt;div class=\"frame-buttons\"&gt;\n            {#if play}\n              &lt;a\n                id=\"playPause\"\n                on:click={() =&gt; {\n                  play = false;\n                  setPlay(false);\n                }}\n                &gt;&lt;img class=\"icon\" src=\"assets/SHB/svg/AW-icon-pause.svg\" /&gt;&lt;/a\n              &gt;\n            {:else}\n              &lt;a\n                id=\"playPause\"\n                on:click={() =&gt; {\n                  play = true;\n                  setPlay(true);\n                }}&gt;&lt;img class=\"icon\" src=\"assets/SHB/svg/AW-icon-play.svg\" /&gt;&lt;/a\n              &gt;\n            {/if}\n            &lt;a on:click={backgroundHide}\n              &gt;&lt;img\n                class=\"icon\"\n                class:unselected={!showBackground}\n                src=\"assets/SHB/svg/AW-icon-onion.svg\"\n              /&gt;&lt;/a\n            &gt;\n          &lt;/div&gt;\n        {/if}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"optionbox-container\"&gt;\n    &lt;div class=\"optionbox\"&gt;\n      &lt;div class=\"optionbar\" class:hidden={optionbox}&gt;\n        &lt;div class=\"colorTab\" class:hidden={current != \"draw\"}&gt;\n          &lt;div class=\"drawing-options-container\"&gt;\n            &lt;img\n              on:click={() =&gt; applyBrush(\"Pencil\")}\n              class=\"icon\"\n              class:selected={selectedBrush == \"Pencil\"}\n              src=\"assets/svg/drawing_pencil2.svg\"\n            /&gt;\n            &lt;img\n              on:click={() =&gt; applyBrush(\"Circle\")}\n              class=\"icon\"\n              class:selected={selectedBrush == \"Circle\"}\n              src=\"assets/svg/drawing_circle2.svg\"\n            /&gt;\n            &lt;img\n              on:click={() =&gt; applyBrush(\"Spray\")}\n              class=\"icon\"\n              class:selected={selectedBrush == \"Spray\"}\n              src=\"assets/svg/drawing_spray.svg\"\n            /&gt;\n            &lt;img\n              on:click={() =&gt; applyBrush(\"Pattern\")}\n              class=\"icon\"\n              class:selected={selectedBrush == \"Pattern\"}\n              src=\"assets/svg/drawing_pattern.svg\"\n            /&gt;\n          &lt;/div&gt;\n          &lt;!-- &lt;div id=\"drawing-mode-options\"&gt;\n            &lt;select id=\"drawing-mode-selector\"&gt;\n              &lt;option&gt;Pencil&lt;/option&gt;\n              &lt;option&gt;Circle&lt;/option&gt;\n              &lt;option&gt;Spray&lt;/option&gt;\n              &lt;option&gt;Pattern&lt;/option&gt;\n\n              &lt;option&gt;hline&lt;/option&gt;\n              &lt;option&gt;vline&lt;/option&gt;\n              &lt;option&gt;square&lt;/option&gt;\n              &lt;option&gt;diamond&lt;/option&gt;\n              &lt;option&gt;texture&lt;/option&gt;\n            &lt;/select&gt;\n          &lt;/div&gt; --&gt;\n          &lt;!-- &lt;div\n          class=\"widthBox\"\n          style=\"background-color: {drawingColor};\"\n          on:click={() =&gt; {\n            drawingColorEl.click();\n          }}\n        &gt;\n\n        &lt;/div&gt; --&gt;\n          &lt;input\n            type=\"color\"\n            bind:value={drawingColor}\n            bind:this={drawingColorEl}\n            id=\"drawing-color\"\n          /&gt;\n          &lt;!-- &lt;img class=\"colorIcon\" src=\"assets/SHB/svg/AW-icon-paint.svg\" /&gt; --&gt;\n\n          &lt;!-- &lt;span class=\"info\"&gt;{lineWidth}&lt;/span&gt; --&gt;\n          &lt;div class=\"range-container\"&gt;\n            &lt;div class=\"circle-box-small\" /&gt;\n            &lt;input\n              type=\"range\"\n              min=\"10\"\n              max=\"500\"\n              id=\"drawing-line-width\"\n              bind:value={lineWidth}\n            /&gt;\n            &lt;div class=\"circle-box-big\" /&gt;\n          &lt;/div&gt;\n\n          &lt;!-- &lt;label for=\"drawing-shadow-color\"&gt;Shadow color:&lt;/label&gt;\n        &lt;input\n          type=\"color\"\n          bind:value={shadowColor}\n          id=\"drawing-shadow-color\"\n        /&gt;\n\n        &lt;label for=\"drawing-shadow-width\"&gt;Shadow width:&lt;/label&gt;\n        &lt;span class=\"info\"&gt;0&lt;/span&gt;&lt;input\n          type=\"range\"\n          bind:value={shadowWidth}\n          min=\"0\"\n          max=\"50\"\n          id=\"drawing-shadow-width\"\n        /&gt;\n\n        &lt;label for=\"drawing-shadow-offset\"&gt;Shadow offset:&lt;/label&gt;\n        &lt;span class=\"info\"&gt;0&lt;/span&gt;&lt;input\n          type=\"range\"\n          bind:value={shadowOffset}\n          min=\"0\"\n          max=\"50\"\n          id=\"drawing-shadow-offset\"\n        /&gt; --&gt;\n        &lt;/div&gt;\n        &lt;div class=\"eraseTab\" class:hidden={current != \"erase\"}&gt;\n          &lt;!-- &lt;div class=\"widthBox\"&gt;\n            &lt;div\n              class=\"lineWidth\"\n              style=\"background-color: black;margin:  0px auto;\"\n            /&gt;\n          &lt;/div&gt;\n          &lt;span class=\"info\"&gt;{lineWidth}&lt;/span&gt; --&gt;\n          &lt;div class=\"range-container\"&gt;\n            &lt;div class=\"circle-box-small\" /&gt;\n            &lt;input\n              type=\"range\"\n              min=\"10\"\n              max=\"500\"\n              id=\"erase-line-width\"\n              bind:value={lineWidth}\n            /&gt;\n            &lt;div class=\"circle-box-big\" /&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=\"fillTab\" class:hidden={current != \"fill\"}&gt;\n          &lt;input type=\"color\" bind:value={fillColor} id=\"fill-color\" /&gt;\n        &lt;/div&gt;\n        &lt;div class=\"selectTab\" class:hidden={current != \"select\"}&gt;\n          &lt;a on:click={Copy}\n            &gt;&lt;img class=\"icon\" src=\"assets/SHB/svg/AW-icon-copy.svg\" /&gt;&lt;/a\n          &gt;\n          &lt;a on:click={Paste}\n            &gt;&lt;img class=\"icon\" src=\"assets/SHB/svg/AW-icon-paste.svg\" /&gt;&lt;/a\n          &gt;\n          &lt;a on:click={Delete}\n            &gt;&lt;img class=\"icon\" src=\"assets/SHB/svg/AW-icon-trash.svg\" /&gt;&lt;/a\n          &gt;\n        &lt;/div&gt;\n        &lt;div class=\"saveBox\" class:hidden={current != \"saveToggle\"}&gt;\n          &lt;div class=\"saveTab\"&gt;\n            {#if appType != \"avatar\" &amp;&amp; appType != \"house\"}\n              &lt;label for=\"title\"&gt;Title&lt;/label&gt;\n              &lt;NameGenerator\n                bind:value={displayName}\n                bind:invalidTitle\n                bind:isTitleChanged\n              /&gt;\n            {/if}\n            &lt;!-- &lt;label for=\"status\"&gt;Status&lt;/label&gt;\n              &lt;select bind:value={status} on:change={() =&gt; (answer = \"\")}&gt;\n                {#each statussen as status}\n                  &lt;option value={status}&gt;\n                    {status}\n                  &lt;/option&gt;\n                {/each}\n              &lt;/select&gt; --&gt;\n            &lt;div class=\"status-save-download-container\"&gt;\n              {#if appType != \"avatar\" &amp;&amp; appType != \"house\"}\n                &lt;div on:click={changeVisibility}&gt;\n                  {#if status}\n                    &lt;img\n                      class=\"icon selected\"\n                      src=\"assets/SHB/svg/AW-icon-visible.svg\"\n                    /&gt;\n                  {:else}\n                    &lt;img\n                      class=\"icon selected\"\n                      src=\"assets/SHB/svg/AW-icon-invisible.svg\"\n                    /&gt;\n                  {/if}\n                &lt;/div&gt;\n              {/if}\n\n              &lt;div&gt;\n                &lt;!-- {#if saving} --&gt;\n                &lt;!-- &lt;img\n                    on:click={upload}\n                    class=\"icon selected\"\n                    src=\"assets/SHB/svg/AW-icon-history.svg\"\n                  /&gt; --&gt;\n                &lt;!-- {:else if saved} --&gt;\n                &lt;img\n                  on:click={upload}\n                  class=\"icon selected\"\n                  src=\"assets/SHB/svg/AW-icon-check.svg\"\n                /&gt;\n                &lt;!-- {/if} --&gt;\n              &lt;/div&gt;\n              &lt;!-- &lt;button on:click={upload}\n              &gt;{#if saving}Saving{:else if saved}\n                Saved{:else}Save{/if}&lt;/button\n            &gt; --&gt;\n              &lt;div&gt;\n                &lt;!-- {#if saved} --&gt;\n                &lt;img\n                  on:click={download}\n                  class=\"icon selected\"\n                  src=\"assets/SHB/svg/AW-icon-save.svg\"\n                /&gt;\n                &lt;!-- {/if} --&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;!-- {#if saved}\n              &lt;button &gt;Download&lt;/button&gt;\n            {/if} --&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"iconbox\"&gt;\n        &lt;a on:click={undo}\n          &gt;&lt;img class=\"icon\" src=\"assets/SHB/svg/AW-icon-rotate-CCW.svg\" /&gt;&lt;/a\n        &gt;\n        &lt;a on:click={redo}\n          &gt;&lt;img class=\"icon\" src=\"assets/SHB/svg/AW-icon-rotate-CW.svg\" /&gt;&lt;/a\n        &gt;\n        &lt;a\n          on:click={applyBrush}\n          id=\"drawing-mode\"\n          class:currentSelected={current === \"draw\"}\n          &gt;&lt;img class=\"icon\" src=\"assets/SHB/svg/AW-icon-pen.svg\" /&gt;&lt;/a\n        &gt;\n        &lt;a id=\"erase-mode\" class:currentSelected={current === \"erase\"}\n          &gt;&lt;img class=\"icon\" src=\"assets/SHB/svg/AW-icon-erase.svg\" /&gt;&lt;/a\n        &gt;\n        &lt;!-- &lt;button\n        class=\"icon\"\n        id=\"fill-mode\"\n        class:currentSelected={current === \"fill\"}&gt;&lt;BucketIcon /&gt;&lt;/button\n      &gt; --&gt;\n        &lt;a id=\"select-mode\" class:currentSelected={current === \"select\"}\n          &gt;&lt;img class=\"icon\" src=\"assets/SHB/svg/AW-icon-pointer.svg\" /&gt;&lt;/a\n        &gt;\n        &lt;!-- {#if \"mediaDevices\" in navigator &amp;&amp; \"getUserMedia\" in navigator.mediaDevices}\n        &lt;button\n          class=\"icon\"\n          id=\"camera-mode\"\n          class:currentSelected={current == \"camera\"}\n          on:click={camera}&gt;&lt;CameraIcon /&gt;&lt;/button\n        &gt;\n      {/if} --&gt;\n        &lt;!-- &lt;button id=\"clear-canvas\" class=\"btn btn-info icon\"&gt;\n        &lt;TrashIcon /&gt;\n      &lt;/button&gt; --&gt;\n\n        &lt;!-- svelte-ignore a11y-missing-attribute --&gt;\n        &lt;a\n          class:currentSelected={current === \"saveToggle\"}\n          on:click={() =&gt; {\n            // console.log(\"saving is clicked\");\n            // console.log(\"length\", canvas.toJSON().objects);\n            if (\n              appType == \"drawing\" ||\n              appType == \"stopmotion\" ||\n              appType == \"house\" ||\n              appType == \"avatar\"\n            ) {\n              saveToggle = !saveToggle;\n              switchOption(\"saveToggle\");\n            }\n          }}&gt;&lt;img class=\"icon\" src=\"assets/SHB/svg/AW-icon-save.svg\" /&gt;&lt;/a\n        &gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div id=\"clear-canvas\"&gt;&lt;img src=\"assets/SHB/svg/AW-icon-reset.svg\" /&gt;&lt;/div&gt;\n  {#if appType == \"avatar\"}\n    &lt;div id=\"avatarBox\"&gt;\n      &lt;Avatar /&gt;\n    &lt;/div&gt;\n  {/if}\n&lt;/main&gt;\n\n&lt;style&gt;\n  * {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n  }\n\n  .main-container {\n    display: flex;\n    align-items: center;\n    margin-left: 60px;\n    justify-content: flex-end;\n    /* justify-content: space-around; */\n    margin: 20px 20px 0 0;\n  }\n\n  #cursor {\n    pointer-events: none !important;\n    width: 100vw;\n    height: 100vw;\n    margin: 0px;\n    position: absolute;\n    user-select: none;\n    top: 0px;\n    left: 0px;\n    pointer-events: none;\n  }\n\n  .topbar {\n    width: 100vw;\n    margin: 0px auto;\n  }\n\n  .selected {\n    box-shadow: 3px 3px #7300ed;\n  }\n\n  .colorTab {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .saveTab {\n    min-width: 160px;\n    bottom: 50px;\n    z-index: 1;\n  }\n\n  .savecanvas {\n    display: none;\n  }\n\n  .saveTab &gt; * {\n    padding: 12px 16px;\n    text-decoration: none;\n    display: block;\n  }\n  .saveBox {\n    position: relative;\n    display: inline-block;\n  }\n\n  .saveBox:hover .saveTab {\n    display: block;\n    color: green;\n  }\n\n  .iconbox {\n    width: 50px;\n    position: relative;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    flex-wrap: wrap;\n    transition: all 0.5s ease-in-out;\n  }\n\n  .optionbar {\n    margin-left: 10px;\n    border-right: 2px solid #7300ed;\n    /* box-shadow: 10px 0px 5px 0px rgba(115,0,237,0.5); */\n    height: 100vh;\n    background-color: white;\n    transition: all 0.5s ease-in-out;\n    width: fit-content;\n    padding: 15px;\n    transform: translateX(0%);\n    width: 280px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    flex-wrap: wrap;\n  }\n\n  .optionbar.hidden {\n    width: 0px;\n    transform: translateX(-160%);\n    display: inline;\n    padding: 0px;\n    margin: 0px;\n  }\n\n  .optionbar.hidden &gt; * {\n    display: none;\n  }\n\n  .optionbar &gt; * {\n    /* margin: 5px auto; */\n  }\n\n  .icon {\n    min-width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    padding: 5px 0px 5px 0px;\n    cursor: pointer;\n  }\n\n  #drawing-color,\n  #drawing-shadow-color {\n    padding: 0px;\n    display: block;\n    margin: 20px auto;\n  }\n\n  .optionbox {\n    width: fit-content;\n    display: flex;\n  }\n\n  .currentSelected {\n    box-shadow: 0px 4px #7300ed;\n    border-radius: 0% 50% 50% 0;\n    height: 60px;\n    display: block;\n    width: 49px;\n    padding: 0px;\n    background-color: white;\n    margin-left: -5px;\n  }\n\n  .hidden {\n    display: none;\n  }\n\n  .videoButton {\n    border-radius: 50%;\n    padding: 25px;\n    margin: 0 auto;\n    background: red;\n    display: block;\n  }\n\n  .lineWidth {\n    border-radius: 50%;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n\n  .range-container {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    align-items: center;\n  }\n\n  .circle-box-small {\n    border: solid 2px black;\n    border-radius: 50%;\n    padding: 5px;\n  }\n\n  .circle-box-big {\n    border: solid 2px black;\n    border-radius: 50%;\n    padding: 10px;\n  }\n\n  input[type=\"range\"] {\n    -webkit-appearance: none;\n    -moz-apperance: none;\n    border-radius: 6px;\n    border: 4px solid #7300ed;\n    height: 4px;\n    margin: 0 10px;\n  }\n\n  input[type=\"range\"]::-webkit-slider-thumb {\n    -webkit-appearance: none !important;\n    background-color: black;\n    border: 1px solid black;\n    border-radius: 50%;\n    height: 15px;\n    width: 15px;\n  }\n\n  /* .colorIcon {\n    width: 32px;\n    position: absolute;\n    right: 5px;\n    bottom: 5px;\n  } */\n\n  .canvas-box {\n    position: relative;\n    background-color: white;\n    border: 2px solid #7300ed;\n  }\n\n  .frame-box {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: relative;\n    flex-direction: column;\n  }\n\n  #frame-bar {\n    display: flex;\n    flex-direction: column;\n    max-height: 300px;\n    width: 130px;\n    overflow-y: auto;\n    overscroll-behavior-y: contain;\n    scroll-snap-type: y proximity;\n  }\n  #frame-bar &gt; div {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n  }\n\n  #frame-bar &gt; div &gt; div {\n    display: inline-block;\n    width: 60px;\n    height: 60px;\n    margin: 5px;\n    border: 2px solid #7300eb;\n    font-size: 30px;\n    text-align: center;\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: contain;\n  }\n\n  #frame-bar &gt; div &gt; div:hover {\n    cursor: pointer;\n  }\n\n  #frame-bar &gt; div &gt; div &gt; div {\n    height: 60px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .frame-buttons {\n    display: flex;\n    flex-direction: column;\n  }\n\n  .frame-buttons &gt; a &gt; img {\n    display: block;\n  }\n\n  #clear-canvas {\n    position: fixed;\n    left: 8px;\n    top: 80px;\n    z-index: 13;\n    box-shadow: 5px 5px 0px #7300ed;\n    cursor: pointer;\n    padding: 0;\n    margin: 0;\n    border-radius: 50%;\n    width: 40px;\n    height: 40px;\n  }\n\n  #clear-canvas &gt; img {\n    width: 40px;\n  }\n\n  video {\n    margin: 0 auto;\n    display: block;\n  }\n\n  .canvas-frame-container {\n    display: flex;\n    flex-direction: row;\n  }\n\n  .topbar {\n    width: unset;\n  }\n\n  .topbar {\n    float: left;\n    height: 100vh;\n  }\n\n  .topbar &gt; div {\n    display: inline-grid;\n    position: relative;\n    top: 50%;\n    margin: 10px;\n    -ms-transform: translateY(-50%);\n    transform: translateY(-50%);\n  }\n\n  #frame-bar &gt; div:last-child {\n    overflow-anchor: auto;\n  }\n\n  .optionbox-container {\n    margin: 0 10px 0 0;\n    position: fixed;\n    left: 0;\n    top: 50vh;\n    -ms-transform: translateY(-50%);\n    transform: translateY(-50%);\n  }\n\n  .unselected {\n    filter: grayscale(1) opacity(0.5);\n  }\n\n  #avatarBox {\n    position: fixed;\n    top: 130px;\n    left: 20px;\n  }\n\n  .drawing-options-container {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n  }\n\n  .status-save-download-container {\n    display: flex;\n    flex-direction: column;\n    /* justify-content: center; */\n    /* align-items: center; */\n    height: min-content;\n  }\n\n  /* medium size */\n  @media only screen and (max-width: 1007px) {\n    .canvas-frame-container {\n      flex-direction: column;\n    }\n\n    .frame-box {\n      flex-direction: row;\n    }\n\n    #frame-bar {\n      flex-direction: row;\n      width: 250px;\n      overflow-x: auto;\n      overflow-y: none;\n      overscroll-behavior-x: contain;\n      scroll-snap-type: x proximity;\n    }\n\n    #frame-bar &gt; div {\n      flex-direction: column;\n    }\n\n    .frame-buttons {\n      flex-direction: row;\n    }\n  }\n\n  /* small */\n  @media only screen and (max-width: 640px) {\n    .main-container {\n      display: unset;\n      align-items: unset;\n      margin: 0;\n    }\n\n    .canvas-frame-container {\n      justify-content: center;\n      align-items: center;\n    }\n\n    .canvas-box {\n      order: 2;\n    }\n\n    .frame-box {\n      order: 1;\n      flex-direction: row;\n      /* width: 100%; */\n      justify-content: space-between;\n      /* align-self: flex-end; */\n    }\n\n    #frame-bar {\n      max-width: 300px;\n      height: 140px;\n      margin-right: 10px;\n    }\n\n    #frame-bar &gt; div {\n      flex-direction: column-reverse;\n    }\n\n    .frame-buttons {\n      flex-direction: column-reverse;\n      margin: unset;\n      align-self: center;\n    }\n\n    .optionbox {\n      width: 100%;\n      height: min-content;\n      position: fixed;\n      bottom: 0;\n      display: block;\n    }\n\n    .optionbar {\n      margin: 0;\n      border-right: none;\n      border-top: 2px solid #7300ed;\n      box-shadow: 0px -5px 5px 0px #7300ed;\n      height: min-content;\n      width: 100%;\n      padding: 0px;\n      transition: none;\n      animation: growup 0.3s ease-in-out forwards;\n      transform-origin: bottom center;\n      position: sticky;\n      z-index: 40;\n      align-items: flex-end;\n    }\n\n    .optionbar &gt; * {\n      margin: 20px 50px 20px 0;\n    }\n\n    .status-save-download-container {\n      flex-direction: row;\n      justify-content: space-between;\n    }\n\n    @keyframes growup {\n      0% {\n        transform: scaleY(0);\n      }\n      80% {\n        transform: scaleY(1.1);\n      }\n      100% {\n        transform: scaleY(1);\n      }\n    }\n\n    .optionbar.hidden {\n      margin: 0;\n      border-right: none;\n      height: min-content;\n      width: auto;\n      transform: none;\n      display: inline;\n      animation: growdown 2s ease-in-out forwards;\n    }\n\n    @keyframes growdown {\n      0% {\n        transform: scaleY(1);\n      }\n      50% {\n        transform: scaleY(0.5);\n      }\n      100% {\n        transform: scaleY(0);\n      }\n    }\n\n    .optionbox-container {\n      position: fixed;\n      -ms-transform: initial;\n      transform: initial;\n    }\n\n    .currentSelected {\n      display: inline;\n    }\n\n    .iconbox {\n      width: max-content;\n      height: min-content;\n      display: block;\n      margin: 0 auto;\n    }\n\n    .currentSelected &gt; img {\n      border: 2px solid #7300ed;\n    }\n    .currentSelected {\n      box-shadow: unset;\n    }\n\n    #clear-canvas {\n      top: unset;\n      bottom: 60px;\n    }\n  }\n&lt;/style&gt;\n</code></pre> <p>Het gaat vooral om deze componenten:</p> <pre><code>    let FrameObject = {\n    type: \"image\",\n    version: \"4.6.0\",\n    originX: \"left\",\n    originY: \"top\",\n    left: -1024,\n    top: 0,\n    width: 0,\n    height: 1024,\n    fill: \"rgb(0,0,0)\",\n    stroke: null,\n    strokeWidth: 0,\n    strokeDashArray: null,\n    strokeLineCap: \"butt\",\n    strokeDashOffset: 0,\n    strokeLineJoin: \"miter\",\n    strokeUniform: false,\n    strokeMiterLimit: 4,\n    scaleX: 1,\n    scaleY: 1,\n    angle: 0,\n    flipX: false,\n    flipY: false,\n    opacity: 1,\n    shadow: null,\n    visible: true,\n    backgroundColor: \"\",\n    fillRule: \"nonzero\",\n    paintFirst: \"fill\",\n    globalCompositeOperation: \"source-over\",\n    skewX: 0,\n    skewY: 0,\n    erasable: true,\n    cropX: 0,\n    cropY: 0,\n    src: \"\",\n    crossOrigin: \"anonymous\",\n    filters: [],\n  };\n\n  const updateFrame = () =&gt; {\n    frames[currentFrame] = canvas.toJSON();\n    console.log(\"currentFrame\", currentFrame)\n    frames = frames;\n\n    backgroundFrames[currentFrame] = canvas.toDataURL(\"image/png\", 1);\n    backgroundFrames = backgroundFrames;\n  };\n\n\n  lastImg = await convertImage(Object.value.url); // dit moet ingeladen worden zonder convertImage, maar met de raw versie\n      isPreexistingArt = true;\n\n  let frameAmount;\n      var framebuffer = new Image();\n      framebuffer.src = lastImg;\n      framebuffer.onload = function () {\n        console.log(\"img\", this.width);\n        lastWidth = this.width;\n        frameAmount = lastWidth / 2048;\n\n        FrameObject.src = lastImg;\n        FrameObject.width = lastWidth;\n        frames = [];\n        for (let i = 0; i &lt; frameAmount; i++) {\n          FrameObject.left = 0;\n          FrameObject.width = 2048;\n          FrameObject.cropX = i * 2048;\n          frames.push({\n            version: \"4.6.0\",\n            objects: [{ ...FrameObject }],\n          });\n</code></pre>"},{"location":"4-bugs/fixed/Cors-error-on-retrieving-images/","title":"Log: cors error on retrieving images","text":"<p>Access to image at</p> <p>'https://artworld01.s3.eu-central-1.amazonaws.com/avatar/fcbcc269-a109-4a4b-a570-5ccafc5308d8/0_2022-12-28T14_17_06_GroenBaard.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIA3VY3XUKP6SYAM4OK%2F20230104%2Feu-central-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20230104T104203Z&amp;X-Amz-Expires=86400&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=a72c2f7bd20029e2546f5fc4965a8d378c9e1ef8977ef67e3be22d4300bd9476'</p> <p>from origin</p> <p>'https://artworld.vrolijkheid.nl'</p> <p>has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.</p> <p>https://aws.amazon.com/premiumsupport/knowledge-center/no-access-control-allow-origin-error/</p> <pre><code>curl -H \"Origin: artworld.vrolijkheid.nl\" -v \"https://artworld01.s3.eu-central-1.amazonaws.com/avatar/fcbcc269-a109-4a4b-a570-5ccafc5308d8/0_2022-12-28T14_17_06_GroenBaard.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIA3VY3XUKP6SYAM4OK%2F20230104%2Feu-central-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20230104T104203Z&amp;X-Amz-Expires=86400&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=a72c2f7bd20029e2546f5fc4965a8d378c9e1ef8977ef67e3be22d4300bd9476\"\n</code></pre> <p>return:</p> <pre><code>Mark bundle as not supporting multiuse\n&lt; HTTP/1.1 200 OK\n&lt; x-amz-id-2: Z0a88pOWAFUgOmBCB/R0e3TPg66g7v7CeKtjwYeeshOYpLugd8NCFg5E3EdBudQlH8EuXhSLFnc=\n&lt; x-amz-request-id: HS542A220XJFVABR\n&lt; Date: Wed, 04 Jan 2023 10:48:29 GMT\n&lt; Access-Control-Allow-Origin: *\n&lt; Access-Control-Allow-Methods: PUT, HEAD, GET\n&lt; Vary: Origin, Access-Control-Request-Headers, Access-Control-Request-Method\n&lt; Last-Modified: Mon, 02 Jan 2023 14:25:35 GMT\n&lt; ETag: \"8e07129259d6e55599fb94b47714c078\"\n&lt; x-amz-version-id: cHPlJHGeZEB1.MaX7IRw7klhDe2Z3dj4\n&lt; Accept-Ranges: bytes\n&lt; Content-Type: multipart/form-data\n&lt; Server: AmazonS3\n&lt; Content-Length: 159817\n</code></pre> <p>cloudfront page</p> <p>https://us-east-1.console.aws.amazon.com/cloudfront/v3/home?region=eu-central-1#/originAccess/</p> <p>hypothesis 1: the image is first retreived with an empty value. Because of the way displayName is updated.</p> <p>To test: go back to commit that does not have that code</p> <p>Result: going back didn't solve the issue.</p> <p>Test 2: go back further (to when it did work)</p> <p>With commit 8caa677c538f888220791e290224fdf533073b48 downloading and editing artworks works:</p> <p></p> <p></p> <p></p> <p>So we see above that even when it works there is a undefined asked from the server, with a 404 response.</p> <p>But in our case we also get a cors problem:</p> <p>git log of commits:</p> <p>d1735d059859cc3a968030f4825afbc8cd75da19 - when I tried to solve the drawing over the edge bug, but had not changed the displayName</p> <p>8118fd2da334d346657bc4e9b9968f462b79da78 - the commit with Eelkes code before I started to alter the drawing app</p> <p>8caa677c538f888220791e290224fdf533073b48 - before Eelke, working without cors</p> <pre><code> if (appType == \"avatar\") {\n      lastImg = await convertImage($Profile.avatar_url, \"2048\", \"10000\");\n      isPreexistingArt = true;\n</code></pre> <p>then to put the image on the canvas:</p> <pre><code>    // put images on canvas\n    if (appType == \"avatar\" || appType == \"stopmotion\") {\n      console.log(\"avatar\");\n      let frameAmount;\n      var framebuffer = new Image();\n      framebuffer.src = lastImg;\n      framebuffer.onload = function () {\n        console.log(\"img\", this.width);\n        lastWidth = this.width;\n        frameAmount = lastWidth / 2048;\n\n        FrameObject.src = lastImg;\n        FrameObject.width = lastWidth;\n        frames = [];\n        for (let i = 0; i &lt; frameAmount; i++) {\n          FrameObject.left = 0;\n          FrameObject.width = 2048;\n          FrameObject.cropX = i * 2048;\n          // FrameObject.clipTo = function (ctx) {\n          //   // origin is the center of the image\n          //   // var x = rectangle.left - image.getWidth() / 2;\n          //   // var y = rectangle.top - image.getHeight() / 2;\n          //   // ctx.rect(i * -2048, 2048, (i * -2048)+2048, 2048);\n          //   ctx.rect(0,-2048,2048,2048)\n          // };\n          // FrameObject.setCoords();\n          frames.push({\n            version: \"4.6.0\",\n            objects: [{ ...FrameObject }],\n          });\n        }\n        frames = frames;\n        console.log(\"frames\", frames);\n        currentFrame = 0;\n        canvas.loadFromJSON(frames[0], function () {\n          canvas.renderAll.bind(canvas);\n          // for (let i = 0; i &lt; frames.length; i++) {\n          //     updateFrame()\n          //     changeFrame(i)\n\n          // }\n        });\n      };\n    }\n</code></pre> <pre><code>  let FrameObject = {\n    type: \"image\",\n    version: \"4.6.0\",\n    originX: \"left\",\n    originY: \"top\",\n    left: -2048,\n    top: 0,\n    width: 0,\n    height: 2048,\n    fill: \"rgb(0,0,0)\",\n    stroke: null,\n    strokeWidth: 0,\n    strokeDashArray: null,\n    strokeLineCap: \"butt\",\n    strokeDashOffset: 0,\n    strokeLineJoin: \"miter\",\n    strokeUniform: false,\n    strokeMiterLimit: 4,\n    scaleX: 1,\n    scaleY: 1,\n    angle: 0,\n    flipX: false,\n    flipY: false,\n    opacity: 1,\n    shadow: null,\n    visible: true,\n    backgroundColor: \"\",\n    fillRule: \"nonzero\",\n    paintFirst: \"fill\",\n    globalCompositeOperation: \"source-over\",\n    skewX: 0,\n    skewY: 0,\n    erasable: true,\n    cropX: 0,\n    cropY: 0,\n    src: \"\",\n    crossOrigin: \"anonymous\",\n    filters: [],\n  };\n</code></pre> <p>But here the avatar is loaded with the convertImage -&gt; that is wrong because then the quality of the avatar get worse over time!</p> <p>We need to get the image without conversion. Is that with the getFile api function?</p> <pre><code>export async function getFile(file_url) {\n  const payload = { \"url\": file_url };\n  let url\n  const rpcid = \"download_file\";\n  await client.rpc(Sess, rpcid, payload)\n    .then((fileurl) =&gt; {\n      url = fileurl.payload.url\n      //console.log(\"url\")\n      //console.log(url)\n      return url\n    })\n    .catch(() =&gt; {\n      console.log('fail')\n      return ''\n    })\n  return url\n}\n</code></pre> <p>git log before Eelke:</p> <p>commit c87da81339cdc1e1831ed05675083846a7de6727 Author: maarten maartenvanderglas@gmail.com Date: Sun Jul 24 22:36:10 2022 +0200</p> <pre><code>removed multiplayer from animalGarden because of crash when someone joint the garden\n</code></pre> <p>commit 78aa5bfdc328443a51457b83d20fc03a6709ae00 Author: maarten maartenvanderglas@gmail.com Date: Sun Jul 24 21:11:38 2022 +0200</p> <pre><code>save stopmotions when adding a frame to prevent data loss\n</code></pre> <p>commit d218d7c78aafb15a24eb63634568b3aaa9c7ff6e Author: maarten maartenvanderglas@gmail.com Date: Sun Jul 24 21:07:24 2022 +0200</p> <pre><code>save stopmotions when adding a frame to prevent data loss\n</code></pre> <p>commit e9735a9436badaaa7cd93f68e4d7b114752a4a34 Author: maarten maartenvanderglas@gmail.com Date: Sun Jul 24 14:36:11 2022 +0200</p> <pre><code>debug animalChallenge\n</code></pre> <p>commit a1742295a72c6cd77bd2cb1211079a3bb2f21e5d Author: maarten maartenvanderglas@gmail.com Date: Sun Jul 24 14:32:15 2022 +0200</p> <pre><code>debug animalChallenge\n</code></pre> <p>commit 323dcdd4f66158ecfdb76b5046e0d93e10aa5030 Author: maarten maartenvanderglas@gmail.com Date: Sun Jul 24 14:22:10 2022 +0200</p> <pre><code>debugging animalChallenge fixed some issues, look into rest\n</code></pre> <p>commit bb99cc08bce849f1847dbde5f67e1c9d94f8c029 Author: maarten maartenvanderglas@gmail.com Date: Sun Jul 24 13:26:58 2022 +0200</p> <pre><code>halved the artwork resolution to 1024 to save resources on poor laptops\n</code></pre> <p>commit 45667ae850d5936f6f8134f5e6c423e61b721238 Author: maarten maartenvanderglas@gmail.com Date: Sun Jul 24 12:35:35 2022 +0200</p> <pre><code>console.log behind a boolean flag via nakama.svelte and ManageSession.js\n</code></pre> <p>commit 48eb228fe47457d876f04bbcb6f85baf63e41056 Author: maarten maartenvanderglas@gmail.com Date: Fri Jul 22 22:14:45 2022 +0200</p> <pre><code>made world 5500x5500\n</code></pre> <p>commit c938bddf63c2a46968c750628a2012432412c9a8 Author: maarten maartenvanderglas@gmail.com Date: Fri Jul 22 22:11:53 2022 +0200</p> <pre><code>made world 5000x5000\n</code></pre> <p>commit bf47e052c76fd0e3eb607b83ed03698605745efb Author: maarten maartenvanderglas@gmail.com Date: Fri Jul 22 22:02:42 2022 +0200</p> <pre><code>made world 5500x5500\n</code></pre> <p>commit 854d1188b629fa9da97171e25d325633d05de619 Author: maarten maartenvanderglas@gmail.com Date: Thu Jul 21 18:32:18 2022 +0200</p> <pre><code>changed artworld size to 8000x8000\n</code></pre> <p>commit e51a8149be35cc214b369f0aaa252706603ea140 Author: maarten maartenvanderglas@gmail.com Date: Thu Jul 21 18:19:37 2022 +0200</p> <pre><code>increased artworld size\n</code></pre> <p>commit e5f5589b05c91525465bfaf314d7b58d4fd99343 Author: linjoe linjoe@localhost.localdomain Date: Thu Jul 21 17:56:12 2022 +0200</p> <pre><code>add username to email in register\n</code></pre> <p>commit 4785a0cb0ac7216a53cda34d61fc7274c990aeba Author: linjoe linjoe@localhost.localdomain Date: Thu Jul 21 16:30:07 2022 +0200</p> <pre><code>qr fix\n</code></pre> <p>commit 9e1b18f0b70862058917d71849ddfe55c3dc2985 Author: linjoe linjoe@localhost.localdomain Date: Thu Jul 21 14:22:59 2022 +0200</p> <pre><code>qr code and history bugfix\n</code></pre> <p>commit a018c848df473dba8dfec71400da1f730a453ebc Author: maarten maartenvanderglas@gmail.com Date: Thu Jul 21 11:53:48 2022 +0200</p> <pre><code>fixed gl outline bug, plugin in sloading in artworld scene, should still load in global setup\n</code></pre>"},{"location":"4-bugs/fixed/Status-van-de-itemsbar-speler-en-moderator-werd-niet-goed-geupdate/","title":"Log: status van de itemsbar (speler en moderator) werd niet goed geupdate","text":"<p>De status van de het vorige item werd overgenomen als er een aanpassing werd gedaan. Lindsey zegt dat de lijst van items nu wel goed wordt update.</p> <p>row.permission_read kon 2 of 1 zijn, dat is nu 1 of 0 voor zichtbaar/ onzichtbaar</p>"},{"location":"4-bugs/fixing/bug-fix-homes-of-turquoisetriangle-missing/","title":"Bug Fix: homes of TurquoiseTriangle missing","text":"<p>A lot of homes of TurquoiseTriangle are missing. I made a mistake naming the Azc Torquoise, so the Azc and the homeObject are spelled wrong.</p> <p>Fix: user Azc</p> <p>Fix: user homeObjects</p> <p>Extra fixes:</p> <p>I inadvertently deleted the homeObject of user19. FIX THAT!</p> <p>But also fix the error that the itemsBar cannot be opened to select a default homeObject</p> <pre><code>imagePicker.svelte:195 Uncaught (in promise) TypeError: Cannot read properties of undefined (reading 'url')\n    at Object.create [as c] (imagePicker.svelte:195:31)\n    at Object.update [as p] (imagePicker.svelte:189:9)\n    at update$2 (index.mjs:1093:36)\n</code></pre> <pre><code>stopmotion.svelte:18 Uncaught TypeError: Cannot read properties of undefined (reading 'clientWidth')\n    at stopmotion.svelte:18:18\n</code></pre>"}]}