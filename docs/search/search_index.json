{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. ARTWORLD Documentation Todo: - [ ] copy paste wordpress pages - [ ] copy paste nextcloud pages","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#artworld-documentation","text":"Todo: - [ ] copy paste wordpress pages - [ ] copy paste nextcloud pages","title":"ARTWORLD Documentation"},{"location":"1.%20implementation/Avatar/","text":"avatars are being saved as 64x64 pixels and the url gets placed in users profile under avatar. the json file still gets saved as 2048x2048, every extra frame adds 2048 pixels to the width of the image. So for the future: save avatars in a storage objects and when chosen, convert to correct size and save in avatar url on profile storage object contains: frames png url json url version convert image function, split x and y sizing for adaptive scaling","title":"Avatar"},{"location":"1.%20implementation/BetaWorld/","text":"domain names clone of ARTWORLD used for development and testing nakama server / nakama.svelte betanakama.toekomst.school Visit betaworld: https://betaworld.toekomst.school log out / in when switching from nakama.toekomst.school to betanakama.toekomst.school current VPS Contabo VPS S 4 vCPU Cores 8 GB RAM 50 GB NVMe or 200 GB SSD 32 TB Traffic Unlimited Incoming IP: 185.193.67.152","title":"domain names"},{"location":"1.%20implementation/BetaWorld/#domain-names","text":"clone of ARTWORLD used for development and testing nakama server / nakama.svelte betanakama.toekomst.school Visit betaworld: https://betaworld.toekomst.school","title":"domain names"},{"location":"1.%20implementation/BetaWorld/#log-out-in","text":"when switching from nakama.toekomst.school to betanakama.toekomst.school","title":"log out / in"},{"location":"1.%20implementation/BetaWorld/#current-vps","text":"Contabo VPS S 4 vCPU Cores 8 GB RAM 50 GB NVMe or 200 GB SSD 32 TB Traffic Unlimited Incoming IP: 185.193.67.152","title":"current VPS"},{"location":"1.%20implementation/Chat-Message-Functionality/","text":"","title":"Chat Message Functionality"},{"location":"1.%20implementation/Compression-Tests-Images/","text":"We get the following results from the comparison of png and jpg image formats to heic, avif and webp. Artworld.png is converted to the respective image formats, and we get the following sizes |Format|Size of image (KB)|Size respectively to the png file| |-|:-:|-:| |PNG|33|100%| |HEIC|12|36%| |AVIF|10|30%| |WEBP|32|97%| Based on the doodle picture from location1 e13\u2026ff2.jpg |Format|Size of image (KB)|Size respectively to the jpg file| |-|:-:|-:| |JPG|33|100%| |HEIC|19|58%| |AVIF|31|94%| |WEBP|25|76%| Based on museum.png from location1 |Format|Size of image (KB)|Size respectively to the png file| |-|:-:|-:| |PNG|25|100%| |HEIC|11|44%| |AVIF|2|8%| |WEBP|27|108%| We get the following results on rendering in location1 Heic https://user-images.githubusercontent.com/71214731/145584124-cbe05ea9-e995-4e2c-bfff-1a33017d28e8.png No image is rendered. Avif https://user-images.githubusercontent.com/71214731/145584135-8b55f81d-28f0-45c9-b705-909efdfcbdd1.png Some images get the black background color after conversion, some does not display at all. Webp https://user-images.githubusercontent.com/71214731/145584140-3ca3ee14-81d6-41ce-91a1-2f3c43f690ef.png All images are displayed as they are supposed. This format can be used to be able to load an image from several alternative formats according to browser support \"this.load.image('museum', [ 'museum.webp', 'museum.avif', 'museum.png' ]);\"","title":"Compression Tests Images"},{"location":"1.%20implementation/Compression-Tests-Images/#we-get-the-following-results-from-the-comparison-of-png-and-jpg-image-formats-to-heic-avif-and-webp","text":"Artworld.png is converted to the respective image formats, and we get the following sizes |Format|Size of image (KB)|Size respectively to the png file| |-|:-:|-:| |PNG|33|100%| |HEIC|12|36%| |AVIF|10|30%| |WEBP|32|97%| Based on the doodle picture from location1 e13\u2026ff2.jpg |Format|Size of image (KB)|Size respectively to the jpg file| |-|:-:|-:| |JPG|33|100%| |HEIC|19|58%| |AVIF|31|94%| |WEBP|25|76%| Based on museum.png from location1 |Format|Size of image (KB)|Size respectively to the png file| |-|:-:|-:| |PNG|25|100%| |HEIC|11|44%| |AVIF|2|8%| |WEBP|27|108%|","title":"We get the following results from the comparison of png and jpg image formats to heic, avif and webp."},{"location":"1.%20implementation/Compression-Tests-Images/#we-get-the-following-results-on-rendering-in-location1","text":"Heic https://user-images.githubusercontent.com/71214731/145584124-cbe05ea9-e995-4e2c-bfff-1a33017d28e8.png No image is rendered. Avif https://user-images.githubusercontent.com/71214731/145584135-8b55f81d-28f0-45c9-b705-909efdfcbdd1.png Some images get the black background color after conversion, some does not display at all. Webp https://user-images.githubusercontent.com/71214731/145584140-3ca3ee14-81d6-41ce-91a1-2f3c43f690ef.png All images are displayed as they are supposed.","title":"We get the following results on rendering in location1"},{"location":"1.%20implementation/Compression-Tests-Images/#this-format-can-be-used-to-be-able-to-load-an-image-from-several-alternative-formats-according-to-browser-support","text":"\"this.load.image('museum', [ 'museum.webp', 'museum.avif', 'museum.png' ]);\"","title":"This format can be used to be able to load an image from several alternative formats according to browser support"},{"location":"1.%20implementation/Conventions/","text":"Naming Conventions Filenames and Classnames are the same Class names start with capital Letter File, Scene and Key names are the same Function names are camelCased","title":"Conventions"},{"location":"1.%20implementation/Conventions/#naming-conventions","text":"Filenames and Classnames are the same Class names start with capital Letter File, Scene and Key names are the same Function names are camelCased","title":"Naming Conventions"},{"location":"1.%20implementation/Coordinate-System-Conversion/","text":"Coordinate system Conversion ARTWORLD needs to be able to grow from time to time. It is better to have worlds where 0, 0 is the center, because then coordinates remain valid when worlds become bigger. 0 , 0 is still the center etc This means that there needs to be a conversion between what I call ARTWORLDcoordinates (0, 0 is center) and phaser2Dcoordinates(0,0 is top left) It is a simple conversion when we know the worldSize. artworldVectorToPhaser2D(worldSize, positionVector) { const worldSizeX = worldSize.x const worldSizeY = worldSize.y positionVector.x = positionVector.x + (worldSizeX / 2) positionVector.y = positionVector.y + (worldSizeY / 2) return positionVector } Phaser2DVectorToArtworld(worldSize, x, y) { // usage: // pass the worldSize and the coordinates you want to do the calculation on // output is a Vector const worldSizeX = worldSize.x const worldSizeY = worldSize.y positionVector.x = positionVector.x - (worldSizeX / 2) positionVector.y = positionVector.y - (worldSizeY / 2) return positionVector } So we need to define a wordSize(x,y) in each scene, this way our ARTWORLDcoordinates stay consistent. ARTWORLDcoordinates are especially important when we think where to place 'houses', artworks, etc, and when we store the last position of the player. Conventions to make this system work In Phaser everything works with Phaser2Dcoordinates We design worlds with ARTWORLDcoordinates On the server we store everything in ARTWROLDcoordinates, so that everything is placed as designed, also when the world has grown in each direction That means that coordinates only have to be converted when sending it over the network, and when receiving coordinates over the networks. Also when we place Locations we do it with ARTWORLDcoordinates, and we convert them to Phaser2Dcoordinates when passing arguments. Then Phaser just deals with them as Phaser2Dcoordinates In practice what we have to do when making a scene: import CoordinatesTranslator from \"../class/CoordinatesTranslator.js\" define globally: this.worldSize = new Phaser.Math.Vector2(3000, 3000) define locations with ARTWORLDcoordinates this.location1 = this.add.isotriangle(CoordinatesTranslator.artworldToPhaser2D(this.worldSize.x, -200), CoordinatesTranslator.artworldToPhaser2D(this.worldSize.y, 200), 150, 150, false, 0x8dcb0e, 0x3f8403, 0x63a505) Behind the scenes coordinates are converted here: When the player avatar is loaded from the server, the last know position is also retreived in Player.js attachAvatarToPlayer //*place the player in the last known position scene.player.x = translateCoordinates.artworldToPhaser2D(this.worldSize.x, this.player.posX) scene.player.y = translateCoordinates.artworldToPhaser2D(this.worldSize.y, this.player.posY) When we send Player movement over the network It is not yet converted in the Player.js, but it will be converted in ManageSession.sendMoveMessage, so we pass scene, to know worldSize later on. in Player.js sendMovement(scene) { if (scene.createdPlayer) { if ( ManageSession.updateMovementTimer > ManageSession.updateMovementInterval ) { //send the player position as artworldCoordinates, because we store in artworldCoordinates on the server ManageSession.sendMoveMessage(scene, scene.player.x, scene.player.y) ManageSession.updateMovementTimer = 0 } } } In ManageSession.sendMoveMessage `sendMoveMessage(scene, posX, posY) { //transpose phaser coordinates to artworld coordinates //console.log(scene) posX = CoordinatesTranslator.Phaser2DToArtworld(scene.worldSize.x, posX) posY = CoordinatesTranslator.Phaser2DToArtworld(scene.worldSize.y, posY) var opCode = 1; var data = '{ \"posX\": ' + posX + ', \"posY\": ' + posY + ', \"location\": \"' + this.location + '\" }' this.socket.rpc(\"move_position\", data) }`","title":"Coordinate System Conversion"},{"location":"1.%20implementation/Coordinate-System-Conversion/#conventions-to-make-this-system-work","text":"In Phaser everything works with Phaser2Dcoordinates We design worlds with ARTWORLDcoordinates On the server we store everything in ARTWROLDcoordinates, so that everything is placed as designed, also when the world has grown in each direction That means that coordinates only have to be converted when sending it over the network, and when receiving coordinates over the networks. Also when we place Locations we do it with ARTWORLDcoordinates, and we convert them to Phaser2Dcoordinates when passing arguments. Then Phaser just deals with them as Phaser2Dcoordinates In practice what we have to do when making a scene: import CoordinatesTranslator from \"../class/CoordinatesTranslator.js\" define globally: this.worldSize = new Phaser.Math.Vector2(3000, 3000) define locations with ARTWORLDcoordinates this.location1 = this.add.isotriangle(CoordinatesTranslator.artworldToPhaser2D(this.worldSize.x, -200), CoordinatesTranslator.artworldToPhaser2D(this.worldSize.y, 200), 150, 150, false, 0x8dcb0e, 0x3f8403, 0x63a505) Behind the scenes coordinates are converted here: When the player avatar is loaded from the server, the last know position is also retreived in Player.js attachAvatarToPlayer //*place the player in the last known position scene.player.x = translateCoordinates.artworldToPhaser2D(this.worldSize.x, this.player.posX) scene.player.y = translateCoordinates.artworldToPhaser2D(this.worldSize.y, this.player.posY) When we send Player movement over the network It is not yet converted in the Player.js, but it will be converted in ManageSession.sendMoveMessage, so we pass scene, to know worldSize later on. in Player.js sendMovement(scene) { if (scene.createdPlayer) { if ( ManageSession.updateMovementTimer > ManageSession.updateMovementInterval ) { //send the player position as artworldCoordinates, because we store in artworldCoordinates on the server ManageSession.sendMoveMessage(scene, scene.player.x, scene.player.y) ManageSession.updateMovementTimer = 0 } } } In ManageSession.sendMoveMessage `sendMoveMessage(scene, posX, posY) { //transpose phaser coordinates to artworld coordinates //console.log(scene) posX = CoordinatesTranslator.Phaser2DToArtworld(scene.worldSize.x, posX) posY = CoordinatesTranslator.Phaser2DToArtworld(scene.worldSize.y, posY) var opCode = 1; var data = '{ \"posX\": ' + posX + ', \"posY\": ' + posY + ', \"location\": \"' + this.location + '\" }' this.socket.rpc(\"move_position\", data) }`","title":"Conventions to make this system work"},{"location":"1.%20implementation/Create_and_update_SERVER_OBJECT_examples/","text":"To retreive objects (eg addressbook) from the server, works like this: listObjects(\"addressbook\", ManageSession.userProfile.id, 10) We get back an array of max 10 (in this case) objects that have \"addressbook\" as collection value. For example: 0: 0: {collection: 'addressbook', key: 'address_f42eb28f-9f4d-476c-9788-2240bac4cf48', permission_read: 2, permission_write: 1, value: {\u2026}, \u2026} 1: {collection: 'addressbook', key: 'addressbook_5264dc23-a339-40db-bb84-e0849ded4e68', permi... We have an array with an array of objects (because in this case we have multiple addressbooks, most of the time we have only one). Even if there is only one object coming back it will be in the form of: [0][0] The first array is standard, the second array is the array of objects we are looking for. Inside the array we can query the values of the object with dot notation. In the case of retreiving the value: [0][1].value The object ( on the [0][0] level) looks in detail like: { collection: \"addressbook\", create_time: \"2021-12-23T13:20:46Z\", key: \"address_f42eb28f-9f4d-476c-9788-2240bac4cf48\", permission_read: 2, permission_write: 1, update_time: \"2021-12-23T16:09:10Z\", user_id: \"f42eb28f-9f4d-476c-9788-2240bac4cf48\", value: {user_id: \"5264dc23-a339-40db-bb84-e0849ded4e68\", user_name: \"user11\"}, version: \"99914b932bd37a50b983c5e7c90ae93b\" } Examples Locations OBJECT Heart / Like button Object","title":"Create and update SERVER OBJECT examples"},{"location":"1.%20implementation/Depth_of_elements_in_game/","text":"Float on top: Menu item (all DOM Elements) UI Scene: zoom icons background: 10, order by creation order locations: 30-50 * location: 30 * namePlate: 31 * userIcon: 31 * locationDescription: 32 * locationEnterButton: 500 (above the player(s) and playerItemBar(s) artWorks and likeButton: 100 (they are in the same container) spinner: 199 player: 201 playerShadow: 200 onlinePlayer: 200 movementDetectLayer: 219 playerItemsBar: 220 - 300 onlinePlayerItemsBar: 301 - 499 (above the playerItemsBar)","title":"Depth of elements in game"},{"location":"1.%20implementation/HistoryTracker-and-the-Back-button/","text":"Locations and Homes There are two types of scenes that players can enter: locations and homes. In cases when it is a location, this.location contains the scene name, while for a home, it contains the home's unique ID. History Tracker The class of History Tracker has two methods: locationPush and homePush . As the names suggest, when a player enters a location, a value of that location is pushed to the array of ManageSession.locationHistory , and when one gets into a home, an object with two properties is pushed to the same array: { locationName: \"DefaultUserHome\", homeID: scene.location } Both methods have a condition, they should not be matching the value of the previous scene. Otherwise, a player gets into an infinite loop when using the back button. Back button On clicking of the back button, the last element of the array of ManageSession.locationHistory is taken in order to leave the current scene and stop the current scene: let currentLocationKey = ManageSession.locationHistory.pop() ... ManageSession.socket.rpc(\"leave\", currentLocationKey) ... this.scene.stop(currentLocationKey) But before leaving the scene, we check whether the scene is a location or a house: if (currentLocationKey.locationName && currentLocationKey.homeID) { currentLocationKey = currentLocationKey.locationName } if it is a house, then we reassign the value of the currentLocationKey. And for entering the previous scene, we take the last element of the array of ManageSession.locationHistory and join it: let previousLocation = ManageSession.locationHistory[ManageSession.locationHistory.length - 1] ... ManageSession.getStreamUsers(\"join\", previousLocation) We also check whether the previous scene is a location or a house: let homeID = null if (previousLocation.locationName && previousLocation.homeID) { homeID = previousLocation.homeID previousLocation = previousLocation.locationName } For starting the previous scene, we provide two arguments, and the second argument is ignored when the scene is a location, not a home. this.scene.start(previousLocation, { user_id: homeID })","title":"HistoryTracker and the Back button"},{"location":"1.%20implementation/HistoryTracker-and-the-Back-button/#locations-and-homes","text":"There are two types of scenes that players can enter: locations and homes. In cases when it is a location, this.location contains the scene name, while for a home, it contains the home's unique ID.","title":"Locations and Homes"},{"location":"1.%20implementation/HistoryTracker-and-the-Back-button/#history-tracker","text":"The class of History Tracker has two methods: locationPush and homePush . As the names suggest, when a player enters a location, a value of that location is pushed to the array of ManageSession.locationHistory , and when one gets into a home, an object with two properties is pushed to the same array: { locationName: \"DefaultUserHome\", homeID: scene.location } Both methods have a condition, they should not be matching the value of the previous scene. Otherwise, a player gets into an infinite loop when using the back button.","title":"History Tracker"},{"location":"1.%20implementation/HistoryTracker-and-the-Back-button/#back-button","text":"On clicking of the back button, the last element of the array of ManageSession.locationHistory is taken in order to leave the current scene and stop the current scene: let currentLocationKey = ManageSession.locationHistory.pop() ... ManageSession.socket.rpc(\"leave\", currentLocationKey) ... this.scene.stop(currentLocationKey) But before leaving the scene, we check whether the scene is a location or a house: if (currentLocationKey.locationName && currentLocationKey.homeID) { currentLocationKey = currentLocationKey.locationName } if it is a house, then we reassign the value of the currentLocationKey. And for entering the previous scene, we take the last element of the array of ManageSession.locationHistory and join it: let previousLocation = ManageSession.locationHistory[ManageSession.locationHistory.length - 1] ... ManageSession.getStreamUsers(\"join\", previousLocation) We also check whether the previous scene is a location or a house: let homeID = null if (previousLocation.locationName && previousLocation.homeID) { homeID = previousLocation.homeID previousLocation = previousLocation.locationName } For starting the previous scene, we provide two arguments, and the second argument is ignored when the scene is a location, not a home. this.scene.start(previousLocation, { user_id: homeID })","title":"Back button"},{"location":"1.%20implementation/Home/","text":"Welcome to the ARTWORLD_client wiki! Overview Network Flow Client side Server API calls","title":"Home"},{"location":"1.%20implementation/How_to_deploy_artworld/","text":"needed up to date Linux machine (with correct security in place!) (contabo/digital ocean) nginx docker golang basic linux experience startup sudo apt-get install docker docker-compose nginx golang certbot node npm unzip client code clone ARTWORLD_client code to /var/www/artworld/ mkdir /var/www/artworld cd /var/www/artworld wget https://github.com/studioplaynl/ARTWORLD_client/archive/refs/heads/main.zip unzip main mv ARTWORLD_client-main/ ARTWORLD_client cd ARTWORLD_client/ npm install npm run build -edit your server domain name in ./src/nakama.svelte get nginx up and running: start by editing /var/www/nginx with the correct domain and folder settings sudo cp /var/www/nginx /etc/nginx/sites-enabled/artworld sudo systemctl restart nginx set your dns settings to point the domain to the correct IP adress get certbot for a certificate(as shown in the config example) now you can test the domain and see if the clientside code is up and running. server code clone the artworld server code to your home directory edit config.yml if necessary go mod vendor npm run docker server should be live now. clone to betaworld server this has als9o been automated as a cron job, running at 1am each day sudo docker commit artworld_nakama_server_nakama_1 artworld_nakama sudo docker save artworld_nakama | gzip | ssh root@185.193.67.152 'gunzip | docker load' sudo docker commit artworld_nakama_server_postgres_1 artworld_postgres sudo docker save artworld_postgres | gzip | ssh root@185.193.67.152 'gunzip | docker load' Amazon AWS Create a S3 bucket in Amazon AWS for storage of files. object ownership: ACLs enabled(object writer) block public acces: block all bucket versioning: disabled tag: none encryption: disabled advanced settings: disabled cors settings: [ { \"AllowedHeaders\": [ \"*\" ], \"AllowedMethods\": [ \"PUT\", \"HEAD\", \"GET\" ], \"AllowedOrigins\": [ \"https://yourdomain.com\" ], \"ExposeHeaders\": [] } ] create access key: click right top username > security credentials create user(permission: AWSS3FullAcces) create in the nakama server folder the file named \"credentials\" [default] aws_access_key_id = \"youracceskeyid\" aws_secret_access_key = \"youracceskey\" update main.go const ( AWS_S3_REGION = \"your region\" AWS_S3_BUCKET = \"your bucket\" ) AWS image converter: this is needed for converting images to the correct sizes incl. caching to setup: https://docs.aws.amazon.com/solutions/latest/serverless-image-handler/deployment.html - press launch solution - choose correct location in top right! - choose following settings: AutoWebP No - CorsEnabled Yes - CorsOrigin https://yourwebsite.com - DeployDemoUI No - EnableDefaultFallbackImage No - EnableSignature Yes - FallbackImageS3Bucket - - FallbackImageS3Key - - LogRetentionPeriod 1 - SecretsManagerKey your secret key - SecretsManagerSecret your secret secret - SourceBuckets artworldstudioplay - to create a secret go to: secretsmanager https://eu-central-1.console.aws.amazon.com/secretsmanager/home?region=eu-central-1#!/listSecrets/ - other type of secret - fill in key and value troubleshoot","title":"needed"},{"location":"1.%20implementation/How_to_deploy_artworld/#needed","text":"up to date Linux machine (with correct security in place!) (contabo/digital ocean) nginx docker golang basic linux experience","title":"needed"},{"location":"1.%20implementation/How_to_deploy_artworld/#startup","text":"sudo apt-get install docker docker-compose nginx golang certbot node npm unzip","title":"startup"},{"location":"1.%20implementation/How_to_deploy_artworld/#client-code","text":"clone ARTWORLD_client code to /var/www/artworld/ mkdir /var/www/artworld cd /var/www/artworld wget https://github.com/studioplaynl/ARTWORLD_client/archive/refs/heads/main.zip unzip main mv ARTWORLD_client-main/ ARTWORLD_client cd ARTWORLD_client/ npm install npm run build -edit your server domain name in ./src/nakama.svelte","title":"client code"},{"location":"1.%20implementation/How_to_deploy_artworld/#get-nginx-up-and-running","text":"start by editing /var/www/nginx with the correct domain and folder settings sudo cp /var/www/nginx /etc/nginx/sites-enabled/artworld sudo systemctl restart nginx set your dns settings to point the domain to the correct IP adress get certbot for a certificate(as shown in the config example) now you can test the domain and see if the clientside code is up and running.","title":"get nginx up and running:"},{"location":"1.%20implementation/How_to_deploy_artworld/#server-code","text":"clone the artworld server code to your home directory edit config.yml if necessary go mod vendor npm run docker server should be live now.","title":"server code"},{"location":"1.%20implementation/How_to_deploy_artworld/#clone-to-betaworld-server","text":"this has als9o been automated as a cron job, running at 1am each day sudo docker commit artworld_nakama_server_nakama_1 artworld_nakama sudo docker save artworld_nakama | gzip | ssh root@185.193.67.152 'gunzip | docker load' sudo docker commit artworld_nakama_server_postgres_1 artworld_postgres sudo docker save artworld_postgres | gzip | ssh root@185.193.67.152 'gunzip | docker load'","title":"clone to betaworld server"},{"location":"1.%20implementation/How_to_deploy_artworld/#amazon-aws","text":"Create a S3 bucket in Amazon AWS for storage of files. object ownership: ACLs enabled(object writer) block public acces: block all bucket versioning: disabled tag: none encryption: disabled advanced settings: disabled cors settings: [ { \"AllowedHeaders\": [ \"*\" ], \"AllowedMethods\": [ \"PUT\", \"HEAD\", \"GET\" ], \"AllowedOrigins\": [ \"https://yourdomain.com\" ], \"ExposeHeaders\": [] } ] create access key: click right top username > security credentials create user(permission: AWSS3FullAcces) create in the nakama server folder the file named \"credentials\" [default] aws_access_key_id = \"youracceskeyid\" aws_secret_access_key = \"youracceskey\" update main.go const ( AWS_S3_REGION = \"your region\" AWS_S3_BUCKET = \"your bucket\" )","title":"Amazon AWS"},{"location":"1.%20implementation/How_to_deploy_artworld/#aws-image-converter","text":"this is needed for converting images to the correct sizes incl. caching to setup: https://docs.aws.amazon.com/solutions/latest/serverless-image-handler/deployment.html - press launch solution - choose correct location in top right! - choose following settings: AutoWebP No - CorsEnabled Yes - CorsOrigin https://yourwebsite.com - DeployDemoUI No - EnableDefaultFallbackImage No - EnableSignature Yes - FallbackImageS3Bucket - - FallbackImageS3Key - - LogRetentionPeriod 1 - SecretsManagerKey your secret key - SecretsManagerSecret your secret secret - SourceBuckets artworldstudioplay - to create a secret go to: secretsmanager https://eu-central-1.console.aws.amazon.com/secretsmanager/home?region=eu-central-1#!/listSecrets/ - other type of secret - fill in key and value","title":"AWS image converter:"},{"location":"1.%20implementation/How_to_deploy_artworld/#troubleshoot","text":"","title":"troubleshoot"},{"location":"1.%20implementation/Items-bar/","text":"Player: - items bar around the player, following the player - The layer items bar has profile (home), liked, friend's homes, achievements. onlinePlayer: - items bar around the onlinePlayer, following the player - The layer items bar has home, likes. scene.playerLikedPanelKeys data structure: {artworks: Array(3)} {name: 'geelCoral_128'} allLikedArray: drawing/5264dc23-a339-40db-bb84-e0849ded4e68/geelCoral.png drawing/5264dc23-a339-40db-bb84-e0849ded4e68/witMurene.png drawing/5264dc23-a339-40db-bb84-e0849ded4e68/4_blauwSpotlijster.png drawing/5264dc23-a339-40db-bb84-e0849ded4e68/magentaGemeenschappelijke-vlieg.png","title":"Items bar"},{"location":"1.%20implementation/LOG-release-notes/","text":"1.2 Chip: rewriting saving artworks without json (saves size), png preview model Maarten: when png rewrite is done: auto reload avatar player. rewrite auto reload player: log off/ log in room: network players also get updated Maarten: rewrite server object handling","title":"LOG release notes"},{"location":"1.%20implementation/Last-Position-Players/","text":"Now the server remembers the last location and position of the player This can be used to place players when onBoarding the Game. The serverside LastPosition cannot be used for placing the player in the right position. It would then have to keep track the last positions of all visited locations. We could use HistoryTracker to remember the last position per location for the player. But then for the onLinePlayers we would have to get their position without them moving first. So now we implement position as follows: we place player in fixed positions we filter the placement based on known position and location the last position is kept in HistoryTracker, when going back the player is also put in the last known position of that location","title":"Last Position Players"},{"location":"1.%20implementation/Like%28Heart%29-Button-and-OBJECT/","text":"Data structure {id: \"user_id\", art_url: \"art_url\"} We are storing the object as: collectionName.value.collectionName = [ {}, {} ] collection: \"liked\" create_time: \"2022-01-26T12:02:11Z\" key: \"liked_5264dc23-a339-40db-bb84-e0849ded4e68\" permission_read: 2 permission_write: 1 update_time: \"2022-02-03T14:11:23Z\" user_id: \"5264dc23-a339-40db-bb84-e0849ded4e68\" value: liked: (Array (2)) [ 0: { user_id: \"e0849c23-a339-40db-bb84-e0849ded4e68\", collection: \"drawing\", key: \"1642771303290_limoenWalrus\", version: 1, url: \"drawing/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png\", previewURl: \"https://d3hkghsa3z4n1z.cloudfront.net/fit-in/64x64/stopmotion/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png?signature=c8c1aba753e01a6f06fd321a5a01a46fc18a483bb618ca1e2478283028a077f8\", }, 1: { user_id: \"e0849c23-a339-40db-bb84-e0849ded4e68\", collection: \"drawing\", key: \"1642771303290_limoenWalrus\", version: 1, url: \"drawing/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png\", previewURl: \"https://d3hkghsa3z4n1z.cloudfront.net/fit-in/64x64/stopmotion/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png?signature=c8c1aba753e01a6f06fd321a5a01a46fc18a483bb618ca1e2478283028a077f8\", } ] The functionality can be found in the class ArtworkList.js We do the first check in the NetworkBoot scene. We then have the latest liked array, each time a like is added of deleted we update the local and the server array, so the array is already in the updates state when clicking the liked button 1.a check if it exists on the server 1.b If the Liked object does not exists, create the object 1.c if the object exists, parse it to local array (ManageSession.allLiked) We get a server Object with this.getServerObject(\"liked\", ManageSession.userProfile.id, 10) which calls async getServerObject(collection, userID, maxItems) { Promise.all([listObjects(collection, userID, maxItems)]) .then(response => { console.log(\"collection\", collection) console.log(\"response\", response) //check if the object exists if (response[0].length > 0) { //the object exists: addressbook // check if the right object exists: addressbook_user_id let filteredResponse = response[0].filter(element => { console.log(collection + \"_\" + ManageSession.userProfile.id, typeof collection) console.log(\"element\", element) return element.key == collection + \"_\" + ManageSession.userProfile.id } ) console.log(\"filteredResponse\", filteredResponse) if (filteredResponse.length > 0) { //the right collection object exists, but check if there is data in de object, in the expected format if (typeof filteredResponse[0].value[collection] != \"undefined\") { //the object is in the right format (object.value.object), we assign our local copy ManageSession[collection] = filteredResponse[0].value console.log(\"ManageSession.\" + collection, ManageSession[collection]) } else { //when the right addressbook does not exist: make an empty one //addressbook_userid.value exists but .addressbook this.createEmptyServerObject(collection) } } else { //when the right addressbook does not exist: make an empty one this.createEmptyServerObject(collection) } console.log(\"ManageSession.\" + collection, ManageSession[collection]) } else { //the addressbook does not exist: make an empty one this.createEmptyServerObject(collection) } }) } This is a promise, so we use Promise.all() to resolve a async/ await function inline. Promise.all is easier to use then Promise, because it gives the result in one line If the Liked Object does not exists, we make an empty object with an empty array, in the correct form: async createEmptyServerObject(collection) { //general method of creating an array inside an object with the argument of the method console.log(\"createEmptyServerObject\") console.log(collection) ManageSession[collection] = { [collection]:[] } const type = collection const name = type + \"_\" + ManageSession.userProfile.id const pub = 2 const value = ManageSession[collection] console.log(\" ManageSession. empty\", ManageSession[collection]) updateObject(type, name, value, pub) } Data structure of liked If the Liked Object has content, then the Object in inside a one element array. Like so: collection: \"liked\" create_time: \"2022-01-12T12:31:53Z\" key: \"all_liked_5264dc23-a339-40db-bb84-e0849ded4e68\" permission_read: 2 permission_write: 1 update_time: \"2022-01-13T15:45:02Z\" user_id: \"5264dc23-a339-40db-bb84-e0849ded4e68\" value: liked: [ { user_id: \"e0849c23-a339-40db-bb84-e0849ded4e68\", collection: \"drawing\", key: \"1642771303290_limoenWalrus\", version: 1, url: \"drawing/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png\", previewURl: \"https://d3hkghsa3z4n1z.cloudfront.net/fit-in/64x64/stopmotion/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png?signature=c8c1aba753e01a6f06fd321a5a01a46fc18a483bb618ca1e2478283028a077f8\", }, ] version: \"d1be852d6a66654ec9faa878fcb41b7d\" url and previewURl is of the latest version, if we want to latest-latest version we would have to query for url and convert that url. Data of Artwork List Called with listImages(\"drawing\", this.location, 100) { \"collection\": \"stopmotion\", \"key\": \"1642771303290_limoenWalrus\", \"permission_read\": 2, \"permission_write\": 1, \"value\": \"url\": \"stopmotion/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png\", \"json\": \"stopmotion/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.json\", \"version\": 1, \"previewUrl\": \"https://d3hkghsa3z4n1z.cloudfront.net/fit-in/64x64/stopmotion/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png?signature=c8c1aba753e01a6f06fd321a5a01a46fc18a483bb618ca1e2478283028a077f8\", \"displayname\": \"limoenWalrus1\" \"version\": \"47ef7fee1aeebeeae6bb183aa0728267\", \"user_id\": \"5264dc23-a339-40db-bb84-e0849ded4e68\", \"create_time\": \"2022-01-21T13:21:44Z\", \"update_time\": \"2022-01-21T13:23:01Z\", \"url\": \"stopmotion/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus\" } Final Code async getServerObject(collection, userID, maxItems) { Promise.all([listObjects(collection, userID, maxItems)]) .then(response => { console.log(\"collection\", collection) console.log(\"response\", response) //check if the object exists if (response[0].length > 0) { //the object exists: addressbook // check if the right object exists: addressbook_user_id let filteredResponse = response[0].filter(element => { console.log(collection + \"_\" + ManageSession.userProfile.id, typeof collection) console.log(\"element\", element) return element.key == collection + \"_\" + ManageSession.userProfile.id } ) console.log(\"filteredResponse\", filteredResponse) if (filteredResponse.length > 0) { //the right collection object exists, but check if there is data in de object, in the expected format if (typeof filteredResponse[0].value[collection] != \"undefined\") { //the object is in the right format (object.value.object), we assign our local copy ManageSession[collection] = filteredResponse[0].value console.log(\"ManageSession.\" + collection, ManageSession[collection]) } else { //when the right addressbook does not exist: make an empty one //addressbook_userid.value exists but .addressbook this.createEmptyServerObject(collection) } } else { //when the right addressbook does not exist: make an empty one this.createEmptyServerObject(collection) } console.log(\"ManageSession.\" + collection, ManageSession[collection]) } else { //the addressbook does not exist: make an empty one this.createEmptyServerObject(collection) } }) } async createEmptyServerObject(collection) { //general method of creating an array inside an object with the argument of the method console.log(\"createEmptyServerObject\") console.log(collection) ManageSession[collection] = { [collection]:[] } const type = collection const name = type + \"_\" + ManageSession.userProfile.id const pub = 2 const value = ManageSession[collection] console.log(\" ManageSession. empty\", ManageSession[collection]) updateObject(type, name, value, pub) }","title":"Like(Heart) Button and OBJECT"},{"location":"1.%20implementation/Like%28Heart%29-Button-and-OBJECT/#data-structure","text":"{id: \"user_id\", art_url: \"art_url\"} We are storing the object as: collectionName.value.collectionName = [ {}, {} ] collection: \"liked\" create_time: \"2022-01-26T12:02:11Z\" key: \"liked_5264dc23-a339-40db-bb84-e0849ded4e68\" permission_read: 2 permission_write: 1 update_time: \"2022-02-03T14:11:23Z\" user_id: \"5264dc23-a339-40db-bb84-e0849ded4e68\" value: liked: (Array (2)) [ 0: { user_id: \"e0849c23-a339-40db-bb84-e0849ded4e68\", collection: \"drawing\", key: \"1642771303290_limoenWalrus\", version: 1, url: \"drawing/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png\", previewURl: \"https://d3hkghsa3z4n1z.cloudfront.net/fit-in/64x64/stopmotion/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png?signature=c8c1aba753e01a6f06fd321a5a01a46fc18a483bb618ca1e2478283028a077f8\", }, 1: { user_id: \"e0849c23-a339-40db-bb84-e0849ded4e68\", collection: \"drawing\", key: \"1642771303290_limoenWalrus\", version: 1, url: \"drawing/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png\", previewURl: \"https://d3hkghsa3z4n1z.cloudfront.net/fit-in/64x64/stopmotion/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png?signature=c8c1aba753e01a6f06fd321a5a01a46fc18a483bb618ca1e2478283028a077f8\", } ]","title":"Data structure"},{"location":"1.%20implementation/Like%28Heart%29-Button-and-OBJECT/#the-functionality-can-be-found-in-the-class-artworklistjs","text":"We do the first check in the NetworkBoot scene. We then have the latest liked array, each time a like is added of deleted we update the local and the server array, so the array is already in the updates state when clicking the liked button 1.a check if it exists on the server 1.b If the Liked object does not exists, create the object 1.c if the object exists, parse it to local array (ManageSession.allLiked) We get a server Object with this.getServerObject(\"liked\", ManageSession.userProfile.id, 10) which calls async getServerObject(collection, userID, maxItems) { Promise.all([listObjects(collection, userID, maxItems)]) .then(response => { console.log(\"collection\", collection) console.log(\"response\", response) //check if the object exists if (response[0].length > 0) { //the object exists: addressbook // check if the right object exists: addressbook_user_id let filteredResponse = response[0].filter(element => { console.log(collection + \"_\" + ManageSession.userProfile.id, typeof collection) console.log(\"element\", element) return element.key == collection + \"_\" + ManageSession.userProfile.id } ) console.log(\"filteredResponse\", filteredResponse) if (filteredResponse.length > 0) { //the right collection object exists, but check if there is data in de object, in the expected format if (typeof filteredResponse[0].value[collection] != \"undefined\") { //the object is in the right format (object.value.object), we assign our local copy ManageSession[collection] = filteredResponse[0].value console.log(\"ManageSession.\" + collection, ManageSession[collection]) } else { //when the right addressbook does not exist: make an empty one //addressbook_userid.value exists but .addressbook this.createEmptyServerObject(collection) } } else { //when the right addressbook does not exist: make an empty one this.createEmptyServerObject(collection) } console.log(\"ManageSession.\" + collection, ManageSession[collection]) } else { //the addressbook does not exist: make an empty one this.createEmptyServerObject(collection) } }) } This is a promise, so we use Promise.all() to resolve a async/ await function inline. Promise.all is easier to use then Promise, because it gives the result in one line If the Liked Object does not exists, we make an empty object with an empty array, in the correct form: async createEmptyServerObject(collection) { //general method of creating an array inside an object with the argument of the method console.log(\"createEmptyServerObject\") console.log(collection) ManageSession[collection] = { [collection]:[] } const type = collection const name = type + \"_\" + ManageSession.userProfile.id const pub = 2 const value = ManageSession[collection] console.log(\" ManageSession. empty\", ManageSession[collection]) updateObject(type, name, value, pub) }","title":"The functionality can be found in the class ArtworkList.js"},{"location":"1.%20implementation/Like%28Heart%29-Button-and-OBJECT/#data-structure-of-liked","text":"If the Liked Object has content, then the Object in inside a one element array. Like so: collection: \"liked\" create_time: \"2022-01-12T12:31:53Z\" key: \"all_liked_5264dc23-a339-40db-bb84-e0849ded4e68\" permission_read: 2 permission_write: 1 update_time: \"2022-01-13T15:45:02Z\" user_id: \"5264dc23-a339-40db-bb84-e0849ded4e68\" value: liked: [ { user_id: \"e0849c23-a339-40db-bb84-e0849ded4e68\", collection: \"drawing\", key: \"1642771303290_limoenWalrus\", version: 1, url: \"drawing/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png\", previewURl: \"https://d3hkghsa3z4n1z.cloudfront.net/fit-in/64x64/stopmotion/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png?signature=c8c1aba753e01a6f06fd321a5a01a46fc18a483bb618ca1e2478283028a077f8\", }, ] version: \"d1be852d6a66654ec9faa878fcb41b7d\" url and previewURl is of the latest version, if we want to latest-latest version we would have to query for url and convert that url.","title":"Data structure of liked"},{"location":"1.%20implementation/Like%28Heart%29-Button-and-OBJECT/#data-of-artwork-list","text":"Called with listImages(\"drawing\", this.location, 100) { \"collection\": \"stopmotion\", \"key\": \"1642771303290_limoenWalrus\", \"permission_read\": 2, \"permission_write\": 1, \"value\": \"url\": \"stopmotion/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png\", \"json\": \"stopmotion/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.json\", \"version\": 1, \"previewUrl\": \"https://d3hkghsa3z4n1z.cloudfront.net/fit-in/64x64/stopmotion/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus.png?signature=c8c1aba753e01a6f06fd321a5a01a46fc18a483bb618ca1e2478283028a077f8\", \"displayname\": \"limoenWalrus1\" \"version\": \"47ef7fee1aeebeeae6bb183aa0728267\", \"user_id\": \"5264dc23-a339-40db-bb84-e0849ded4e68\", \"create_time\": \"2022-01-21T13:21:44Z\", \"update_time\": \"2022-01-21T13:23:01Z\", \"url\": \"stopmotion/5264dc23-a339-40db-bb84-e0849ded4e68/1_1642771303290_limoenWalrus\" }","title":"Data of Artwork List"},{"location":"1.%20implementation/Like%28Heart%29-Button-and-OBJECT/#final-code","text":"async getServerObject(collection, userID, maxItems) { Promise.all([listObjects(collection, userID, maxItems)]) .then(response => { console.log(\"collection\", collection) console.log(\"response\", response) //check if the object exists if (response[0].length > 0) { //the object exists: addressbook // check if the right object exists: addressbook_user_id let filteredResponse = response[0].filter(element => { console.log(collection + \"_\" + ManageSession.userProfile.id, typeof collection) console.log(\"element\", element) return element.key == collection + \"_\" + ManageSession.userProfile.id } ) console.log(\"filteredResponse\", filteredResponse) if (filteredResponse.length > 0) { //the right collection object exists, but check if there is data in de object, in the expected format if (typeof filteredResponse[0].value[collection] != \"undefined\") { //the object is in the right format (object.value.object), we assign our local copy ManageSession[collection] = filteredResponse[0].value console.log(\"ManageSession.\" + collection, ManageSession[collection]) } else { //when the right addressbook does not exist: make an empty one //addressbook_userid.value exists but .addressbook this.createEmptyServerObject(collection) } } else { //when the right addressbook does not exist: make an empty one this.createEmptyServerObject(collection) } console.log(\"ManageSession.\" + collection, ManageSession[collection]) } else { //the addressbook does not exist: make an empty one this.createEmptyServerObject(collection) } }) } async createEmptyServerObject(collection) { //general method of creating an array inside an object with the argument of the method console.log(\"createEmptyServerObject\") console.log(collection) ManageSession[collection] = { [collection]:[] } const type = collection const name = type + \"_\" + ManageSession.userProfile.id const pub = 2 const value = ManageSession[collection] console.log(\" ManageSession. empty\", ManageSession[collection]) updateObject(type, name, value, pub) }","title":"Final Code"},{"location":"1.%20implementation/Locations-OBJECT/","text":"Locations is being stored as an object in the database, with a collection name(the group where all these specific items get stored in), a key( to specify specifically that object) and the user Id. All 3 are mandatory to create, delete and find locations. That means you can have multiple locations, within the same collection and with the same key, but from a different user. This for instance makes it possible to search for all \"userhouses\" in \"locationA\". list Locations listObjects(type, userID, limit) response example: [ { \"collection\": \"home\", \"key\": \"test\", \"permission_read\": 2, \"permission_write\": 1, \"value\": { \"posX\": 12345, \"posY\": 12345 }, \"version\": \"e9a4463161b584c4f8ff1ab98d3b5932\", \"user_id\": \"4bd9378d-8b5b-4ea3-b683-6c3324792afe\", \"create_time\": \"2021-12-09T11:06:16Z\", \"update_time\": \"2021-12-09T11:32:30Z\" } ] create/update locations if you are admin(this gives you the possibility to create locations for other users): updateObjectAdmin(id, type, name, value, pub) if not admin: updateObject(type, name, value, pub) delete object if admin: deleteObjectAdmin(id, type, name); if not admin: deleteObject(type, name)","title":"Locations OBJECT"},{"location":"1.%20implementation/Locations-OBJECT/#list-locations","text":"listObjects(type, userID, limit) response example: [ { \"collection\": \"home\", \"key\": \"test\", \"permission_read\": 2, \"permission_write\": 1, \"value\": { \"posX\": 12345, \"posY\": 12345 }, \"version\": \"e9a4463161b584c4f8ff1ab98d3b5932\", \"user_id\": \"4bd9378d-8b5b-4ea3-b683-6c3324792afe\", \"create_time\": \"2021-12-09T11:06:16Z\", \"update_time\": \"2021-12-09T11:32:30Z\" } ]","title":"list Locations"},{"location":"1.%20implementation/Locations-OBJECT/#createupdate-locations","text":"if you are admin(this gives you the possibility to create locations for other users): updateObjectAdmin(id, type, name, value, pub) if not admin: updateObject(type, name, value, pub)","title":"create/update locations"},{"location":"1.%20implementation/Locations-OBJECT/#delete-object","text":"if admin: deleteObjectAdmin(id, type, name); if not admin: deleteObject(type, name)","title":"delete object"},{"location":"1.%20implementation/Network-Flow-Client-Side/","text":"Graphical flow of the network: Figma: network flow client 1. App.Svelte Is the Session empty? session (https) -> token, expiration 2. yes, the Session is empty: login.Svelte session.js let storedSession = localStorage.getItem(\"Session\") export const Session = writable(storedSession ? JSON.parse(storedSession) : null); Session.subscribe((value) => { if (value) { manageSession.sessionStored = value; //! push the Session with url to manageSession localStorage.setItem('Session', JSON.stringify(value)) } else localStorage.removeItem('Session'); // for logout }) let profileStore = localStorage.getItem(\"profile\") export const Profile = writable(profileStore ? JSON.parse(profileStore) : null); Profile.subscribe((value) => { localStorage.setItem('profile', JSON.stringify(value)); manageSession.userProfile = value //! push the profile with url to manageSession // console.log(\"Profile.subscribe((value)\") // console.log(value) } else localStorage.removeItem('profile'); // for logout client.authenticateEmail(email, password, create) .then((response)=> { \u2028Session.set(session) getAccount()} Session object: Session$1 { created_at: \u201c1636024979\u201d, expires_at: \u201c1636032179\u201d, token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI1MjY0ZGMyMy1hMzM5LTQwZGItYmI4NC1lMDg0OWRlZDRlNjgiLCJ1c24iOiJ1c2VyMTEiLCJleHAiOjE2MzYwMzIxNzl9.HVT1r90Ud5cHd-I5PcqxIuygHmTlDRWBhN-7FeHhQSA\" user_id: \"5264dc23-a339-40db-bb84-e0849ded4e68\", username: \"user11\", vars: undefined } Profile Object without URL $Profile { avatar_url: \"avatar/5264dc23-a339-40db-bb84-e0849ded4e68/current.png\" create_time: \"2021-10-16T17:28:59Z\" edge_count: 4 id: \"5264dc23-a339-40db-bb84-e0849ded4e68\" lang_tag: \"en\" meta: {azc: 'Amsterdam', posX: 528, posY: 800, role: 'speler', user_id: '', \u2026} metadata: \"{\\\"azc\\\": \\\"Amsterdam\\\", \\\"posX\\\": 528, \\\"posY\\\": 800, \\\"role\\\": \\\"speler\\\", \\\"user_id\\\": \\\"\\\", \\\"location\\\": \\\"location1\\\"}\" update_time: \"2021-11-03T16:00:14Z\" username: \"user11\" } Profile Object WITH URL $Profile { avatar_url: \"avatar/5264dc23-a339-40db-bb84-e0849ded4e68/current.png\" create_time: \"2021-10-16T17:28:59Z\" edge_count: 4 id: \"5264dc23-a339-40db-bb84-e0849ded4e68\" lang_tag: \"en\" meta: {azc: 'Amsterdam', posX: 528, posY: 800, role: 'speler', user_id: '', \u2026} metadata: \"{\\\"azc\\\": \\\"Amsterdam\\\", \\\"posX\\\": 528, \\\"posY\\\": 800, \\\"role\\\": \\\"speler\\\", \\\"user_id\\\": \\\"\\\", \\\"location\\\": \\\"location1\\\"}\" update_time: \"2021-11-03T16:00:14Z\" url: \"https://artworldstudioplay.s3.eu-central-1.amazonaws.com/avatar/5264dc23-a339-40db-bb84-e0849ded4e68/current.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAR7FDNFNP252ENA7M%2F20211104%2Feu-central-1%2Fs3%2Faws4_request&X-Amz-Date=20211104T120408Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&X-Amz-Signature=f85d6c618c85f2561803d2fcb86a5a2288d6b8bf7325d0c7effe8268df36d26c\" username: \"user11\" } 3. No the Session is not empty -> MainMenu.js //* check if the user profile is loaded, to be able to send the player to the right location if (typeof (manageSession.userProfile.meta.location) != \"undefined\") { this.launchLocation = manageSession.userProfile.meta.location + \"_Scene\" console.log(this.launchLocation) this.checkSceneExistence() } else { getAccount(\"\", true) .then(rec => { manageSession.freshSession = rec //! only set the menu button visible if the user data is downloaded! this.launchLocation = manageSession.freshSession.meta.location + \"_Scene\" this.checkSceneExistence() }) } } //create checkSceneExistence() { //check if this.launchLocation exists in SCENES const locationExists = SCENES.includes(this.launchLocation) //if location does not exists; launch default location if (!locationExists) { //set to fail-back scene manageSession.location = \"location1\" manageSession.launchLocation = manageSession.location + \"_Scene\" } else { manageSession.location = manageSession.userProfile.meta.location } this.playBtn.setVisible(true) } 4A. networkBoot_Scene.js manageSession.createPlayer = true await manageSession.createSocket() .then(rec => { console.log(manageSession.launchLocation) this.scene.launch(manageSession.launchLocation) }) 4B. manageSession.js createSocket socket.connect getStreamUsers (\u201cjoin\u201d, this.location) socket.onstreampresence 5. locationX_Scene.js manageSession.createPlayer = true loadAndCreatePlayerAvatar() attachtAvatarToPlayer() createOnlinePlayers() attachtAvatarToOnlinePlayer(player, preExisting) 6. CHANGE LOCATIONS LocationA: manageSession.socket.rpc(\"leave\", locationA) setTimeout(() => { manageSession.location = location manageSession.createPlayer = true manageSession.getStreamUsers(\"join\", locationB) this.scene.start(locationScene) }, 1000) LocationB: manageSession.createPlayer = true loadAndCreatePlayerAvatar() attachtAvatarToPlayer() createOnlinePlayers() attachtAvatarToOnlinePlayer(player, preExisting)","title":"Network Flow Client Side"},{"location":"1.%20implementation/Network-Flow-Client-Side/#graphical-flow-of-the-network","text":"","title":"Graphical flow of the network:"},{"location":"1.%20implementation/Network-Flow-Client-Side/#figma-network-flow-client","text":"","title":"Figma: network flow client"},{"location":"1.%20implementation/Network-Flow-Client-Side/#1-appsvelte-is-the-session-empty","text":"session (https) -> token, expiration","title":"1. App.Svelte Is the Session empty?"},{"location":"1.%20implementation/Network-Flow-Client-Side/#2-yes-the-session-is-empty","text":"login.Svelte session.js let storedSession = localStorage.getItem(\"Session\") export const Session = writable(storedSession ? JSON.parse(storedSession) : null); Session.subscribe((value) => { if (value) { manageSession.sessionStored = value; //! push the Session with url to manageSession localStorage.setItem('Session', JSON.stringify(value)) } else localStorage.removeItem('Session'); // for logout }) let profileStore = localStorage.getItem(\"profile\") export const Profile = writable(profileStore ? JSON.parse(profileStore) : null); Profile.subscribe((value) => { localStorage.setItem('profile', JSON.stringify(value)); manageSession.userProfile = value //! push the profile with url to manageSession // console.log(\"Profile.subscribe((value)\") // console.log(value) } else localStorage.removeItem('profile'); // for logout client.authenticateEmail(email, password, create) .then((response)=> { \u2028Session.set(session) getAccount()}","title":"2. yes, the Session is empty:"},{"location":"1.%20implementation/Network-Flow-Client-Side/#session-object","text":"Session$1 { created_at: \u201c1636024979\u201d, expires_at: \u201c1636032179\u201d, token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI1MjY0ZGMyMy1hMzM5LTQwZGItYmI4NC1lMDg0OWRlZDRlNjgiLCJ1c24iOiJ1c2VyMTEiLCJleHAiOjE2MzYwMzIxNzl9.HVT1r90Ud5cHd-I5PcqxIuygHmTlDRWBhN-7FeHhQSA\" user_id: \"5264dc23-a339-40db-bb84-e0849ded4e68\", username: \"user11\", vars: undefined }","title":"Session object:"},{"location":"1.%20implementation/Network-Flow-Client-Side/#profile-object-without-url","text":"$Profile { avatar_url: \"avatar/5264dc23-a339-40db-bb84-e0849ded4e68/current.png\" create_time: \"2021-10-16T17:28:59Z\" edge_count: 4 id: \"5264dc23-a339-40db-bb84-e0849ded4e68\" lang_tag: \"en\" meta: {azc: 'Amsterdam', posX: 528, posY: 800, role: 'speler', user_id: '', \u2026} metadata: \"{\\\"azc\\\": \\\"Amsterdam\\\", \\\"posX\\\": 528, \\\"posY\\\": 800, \\\"role\\\": \\\"speler\\\", \\\"user_id\\\": \\\"\\\", \\\"location\\\": \\\"location1\\\"}\" update_time: \"2021-11-03T16:00:14Z\" username: \"user11\" }","title":"Profile Object without URL"},{"location":"1.%20implementation/Network-Flow-Client-Side/#profile-object-with-url","text":"$Profile { avatar_url: \"avatar/5264dc23-a339-40db-bb84-e0849ded4e68/current.png\" create_time: \"2021-10-16T17:28:59Z\" edge_count: 4 id: \"5264dc23-a339-40db-bb84-e0849ded4e68\" lang_tag: \"en\" meta: {azc: 'Amsterdam', posX: 528, posY: 800, role: 'speler', user_id: '', \u2026} metadata: \"{\\\"azc\\\": \\\"Amsterdam\\\", \\\"posX\\\": 528, \\\"posY\\\": 800, \\\"role\\\": \\\"speler\\\", \\\"user_id\\\": \\\"\\\", \\\"location\\\": \\\"location1\\\"}\" update_time: \"2021-11-03T16:00:14Z\" url: \"https://artworldstudioplay.s3.eu-central-1.amazonaws.com/avatar/5264dc23-a339-40db-bb84-e0849ded4e68/current.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAR7FDNFNP252ENA7M%2F20211104%2Feu-central-1%2Fs3%2Faws4_request&X-Amz-Date=20211104T120408Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&X-Amz-Signature=f85d6c618c85f2561803d2fcb86a5a2288d6b8bf7325d0c7effe8268df36d26c\" username: \"user11\" }","title":"Profile Object WITH URL"},{"location":"1.%20implementation/Network-Flow-Client-Side/#3-no-the-session-is-not-empty-mainmenujs","text":"//* check if the user profile is loaded, to be able to send the player to the right location if (typeof (manageSession.userProfile.meta.location) != \"undefined\") { this.launchLocation = manageSession.userProfile.meta.location + \"_Scene\" console.log(this.launchLocation) this.checkSceneExistence() } else { getAccount(\"\", true) .then(rec => { manageSession.freshSession = rec //! only set the menu button visible if the user data is downloaded! this.launchLocation = manageSession.freshSession.meta.location + \"_Scene\" this.checkSceneExistence() }) } } //create checkSceneExistence() { //check if this.launchLocation exists in SCENES const locationExists = SCENES.includes(this.launchLocation) //if location does not exists; launch default location if (!locationExists) { //set to fail-back scene manageSession.location = \"location1\" manageSession.launchLocation = manageSession.location + \"_Scene\" } else { manageSession.location = manageSession.userProfile.meta.location } this.playBtn.setVisible(true) }","title":"3. No the Session is not empty -&gt; MainMenu.js"},{"location":"1.%20implementation/Network-Flow-Client-Side/#4a-networkboot_scenejs","text":"manageSession.createPlayer = true await manageSession.createSocket() .then(rec => { console.log(manageSession.launchLocation) this.scene.launch(manageSession.launchLocation) })","title":"4A. networkBoot_Scene.js"},{"location":"1.%20implementation/Network-Flow-Client-Side/#4b-managesessionjs","text":"createSocket socket.connect getStreamUsers (\u201cjoin\u201d, this.location) socket.onstreampresence","title":"4B. manageSession.js"},{"location":"1.%20implementation/Network-Flow-Client-Side/#5-locationx_scenejs","text":"manageSession.createPlayer = true loadAndCreatePlayerAvatar() attachtAvatarToPlayer() createOnlinePlayers() attachtAvatarToOnlinePlayer(player, preExisting)","title":"5. locationX_Scene.js"},{"location":"1.%20implementation/Network-Flow-Client-Side/#6-change-locations","text":"LocationA: manageSession.socket.rpc(\"leave\", locationA) setTimeout(() => { manageSession.location = location manageSession.createPlayer = true manageSession.getStreamUsers(\"join\", locationB) this.scene.start(locationScene) }, 1000) LocationB: manageSession.createPlayer = true loadAndCreatePlayerAvatar() attachtAvatarToPlayer() createOnlinePlayers() attachtAvatarToOnlinePlayer(player, preExisting)","title":"6. CHANGE LOCATIONS"},{"location":"1.%20implementation/Parsing-URL-Parameters---Phaser-onboarding/","text":"https://docs.google.com/drawings/d/19rJP5XxY_8ZWCcD-bzCNEFJ0sJDMKTL9rEqBGvq5y14/edit?usp=sharing","title":"Parsing URL Parameters   Phaser onboarding"},{"location":"1.%20implementation/Phaser_error_handling/","text":"Now I using a queue to load details about the function the file is loaded in: ```this.resolveErrorObjectArray = [] async getHomeImages(url, element, index, homeImageKey, scene) { console.log(\"getHomeImages\") await convertImage(url, \"128\", \"png\") .then((rec) => { //console.log(\"rec\", rec) // load all the images to phaser scene.load.image(homeImageKey, rec) .on(`filecomplete-image-${homeImageKey}`, (homeImageKey) => { //delete from this.resolveErrorObjectArray this.resolveErrorObjectArray = this.resolveErrorObjectArray.filter((obj) => obj.imageKey !== homeImageKey) console.log(\"this.resolveErrorObjectArray\", this.resolveErrorObjectArray) //create the home this.createHome(element, index, homeImageKey, scene) }, this) // put the file in the loadErrorCache, incase it doesn't load this.resolveErrorObjectArray.push({ loadFunction: \"getHomeImage\", element: element, index: index, imageKey: homeImageKey }) scene.load.start() // start loading the image in memory }) } resolveLoadError(offendingFile) { let resolveErrorObject = this.resolveErrorObjectArray.find(obj => obj.imageKey == offendingFile.key) let loadFunction = resolveErrorObject.loadFunction let element = resolveErrorObject.element let index = resolveErrorObject.index let imageKey = offendingFile.key let scene = ManageSession.currentScene switch (loadFunction) { case (\"getHomeImage\"): console.log(\"load offendingFile again\", imageKey, offendingFile) scene.load.image(imageKey, './assets/ball_grey.png') .on(`filecomplete-image-${imageKey}`, (imageKey) => { //delete from this.resolveErrorObjectArray this.resolveErrorObjectArray = this.resolveErrorObjectArray.filter((obj) => obj.imageKey !== imageKey) console.log(\"this.resolveErrorObjectArray\", this.resolveErrorObjectArray) //create the home this.createHome(element, index, imageKey, scene); }, this) scene.load.start() break default: console.log(\"please state fom which function the loaderror occured!\") } } *** Was using this: scene.load.image(homeImageKey, rec) .on( filecomplete-image-${homeImageKey} , (homeImageKey) => { //create the home this.createHome(element, index, homeImageKey, scene) }, this) .on( loaderror , (offendingFile) => { this.resolveLoadError(element, index, homeImageKey, offendingFile, scene) }, this) scene.load.start() But the .on('loaderror) callback is for the whole scene, so it is difficult to create a callback specific for a method. On way to do it maybe is to only add to the queue when a method is finished. So to use to load queue per loading method/ sequence... *** Async loader plugin: [https://pablo.gg/en/blog/games/how-to-load-assets-asynchronously-with-phaser-3/](https://pablo.gg/en/blog/games/how-to-load-assets-asynchronously-with-phaser-3/) *** Maybe a useful methode: [https://phaser.discourse.group/t/loading-audio/1306/4](https://phaser.discourse.group/t/loading-audio/1306/4) async create() { const asyncLoader = loaderPlugin => { return new Promise(resolve => { loaderPlugin.on('filecomplete', () => resolve()).on('loaderror', () => resolve()) loaderPlugin.start() }) } await asyncLoader(this.load.audio('song', ['assets/sounds/0781.ogg'])) this.sound.add('song').play() } ```","title":"Phaser error handling"},{"location":"1.%20implementation/Phaser_event_system/","text":"subscribe to the event: this.events.on('gameEditMode', this.gameEditModeSign, this) send the event with arguments: scene.events.emit('gameEditMode', 'off') callbackFunction with arguments: gameEditModeSign(arg) { console.log(\"gameEditMode received\", arg) } Use case: doubble click -> move player to specific location, an other object should also be able to subscribe on that moveTo If you move a GameObject with a tween, then the progression of the tween event can be 'read', and calledback. Scene event senders and listeners Here is our event listener, the 'handler' function. The 'this' argument is the context. this.events.on('chatsubo', this.handler, this) We'll use the Scenes own EventEmitter to dispatch our event this.events.emit('chatsubo') Event arguments The event sends 2 arguments: 200 and 300 this.events.emit('addImage', 200, 300) The event handles sends the arguments on to the handler function ```this.events.on('addImage', handler, this) function handler (x, y) { this.add.image(x, y, 'plush') } ### Create Event Emitter // Create our own EventEmitter instance var emitter = new Phaser.Events.EventEmitter(); // Set-up an event handler emitter.on('addImage', this.handler, this); // Emit it a few times with varying arguments emitter.emit('addImage', 200, 300); emitter.emit('addImage', 400, 300); emitter.emit('addImage', 600, 300); } handler (x, y) { this.add.image(x, y, 'plush'); } ``` Once vs On This handler will only be called once, no matter how many times the event fires this.events.once('addImage', this.handler, this) background info: Events dispatch class ONMOVE event example https://labs.phaser.io/edit.html?src=src/input/game%20object/on%20move%20event.js&v=3.55.2 Object emits event https://labs.phaser.io/edit.html?src=src/events/listen%20to%20game%20object%20event.js&v=3.55.2 Move gameObject to mouse click (\"click to move\" movement\") using tween https://stackoverflow.com/questions/69759621/phaser-3-move-gameobject-to-mouse-click-click-to-move-movement-using-twee https://stackoverflow.com/questions/28522568/how-can-i-get-the-object-on-which-the-tween-in-acting-inside-the-oncomplete-call Tween handlers https://rexrainbow.github.io/phaser3-rex-notes/docs/site/tween/#play-task https://phasergames.com/phaser-3-snippets/phaser-3-tween-snippets/","title":"Phaser event system"},{"location":"1.%20implementation/Phaser_event_system/#scene-event-senders-and-listeners","text":"Here is our event listener, the 'handler' function. The 'this' argument is the context. this.events.on('chatsubo', this.handler, this) We'll use the Scenes own EventEmitter to dispatch our event this.events.emit('chatsubo')","title":"Scene event senders and listeners"},{"location":"1.%20implementation/Phaser_event_system/#event-arguments","text":"The event sends 2 arguments: 200 and 300 this.events.emit('addImage', 200, 300) The event handles sends the arguments on to the handler function ```this.events.on('addImage', handler, this) function handler (x, y) { this.add.image(x, y, 'plush') } ### Create Event Emitter // Create our own EventEmitter instance var emitter = new Phaser.Events.EventEmitter(); // Set-up an event handler emitter.on('addImage', this.handler, this); // Emit it a few times with varying arguments emitter.emit('addImage', 200, 300); emitter.emit('addImage', 400, 300); emitter.emit('addImage', 600, 300); } handler (x, y) { this.add.image(x, y, 'plush'); } ```","title":"Event arguments"},{"location":"1.%20implementation/Phaser_event_system/#once-vs-on","text":"This handler will only be called once, no matter how many times the event fires this.events.once('addImage', this.handler, this) background info: Events dispatch class ONMOVE event example https://labs.phaser.io/edit.html?src=src/input/game%20object/on%20move%20event.js&v=3.55.2 Object emits event https://labs.phaser.io/edit.html?src=src/events/listen%20to%20game%20object%20event.js&v=3.55.2 Move gameObject to mouse click (\"click to move\" movement\") using tween https://stackoverflow.com/questions/69759621/phaser-3-move-gameobject-to-mouse-click-click-to-move-movement-using-twee https://stackoverflow.com/questions/28522568/how-can-i-get-the-object-on-which-the-tween-in-acting-inside-the-oncomplete-call Tween handlers https://rexrainbow.github.io/phaser3-rex-notes/docs/site/tween/#play-task https://phasergames.com/phaser-3-snippets/phaser-3-tween-snippets/","title":"Once vs On"},{"location":"1.%20implementation/RELEASE_LOG/","text":"","title":"RELEASE LOG"},{"location":"1.%20implementation/SERVEROBJECT-achievements/","text":"The achievements object stores an array of timers (should this be objects?) For the achievement itemsbar item we use an achievementObject to store the achievements we reached, and their icons The timer object should be called achievementTimer Object?","title":"SERVEROBJECT achievements"},{"location":"1.%20implementation/SERVEROBJECT-addressbook/","text":"We create an addressbook object as: { collection: \"addressbook\", create_time: \"2022-02-04T10:19:30Z\", key: \"b9ae6807-1ce1-4b71-a8a3-f5958be4d340\", permission_read: 2, permission_write: 1, update_time: \"2022-02-04T10:19:30Z\", user_id: \"5264dc23-a339-40db-bb84-e0849ded4e68\", value: {}, version: \"247e6735883b9170eed471dd411095cb\" } value of the addressbook objects: user_id: \"b9ae6807-1ce1-4b71-a8a3-f5958be4d340\" user_name: \"user1\" show empy addressbook when array is empty when deleting the last friend, show empty addressbook","title":"SERVEROBJECT addressbook"},{"location":"1.%20implementation/SERVEROBJECT-liked/","text":"{ collection: \"drawing\" key: \"1646914921380_witParelhoen\" url: \"drawing/f42eb28f-9f4d-476c-9788-2240bac4cf48/0_1646914921380_witParelhoen.png\" user_id: \"f42eb28f-9f4d-476c-9788-2240bac4cf48\" }","title":"SERVEROBJECT liked"},{"location":"1.%20implementation/ServerCallsFormat/","text":"uploadImage(name, type, json, img, status,version, displayName) this function: - gets upload URL for json and png - uploads blobs to aws - send an object to nakama containing: { \"url\": \"drawing/5264dc23-a339-40db-bb84-e0849ded4e68/4_blauwSpotlijster.png\", \"json\": \"drawing/5264dc23-a339-40db-bb84-e0849ded4e68/4_blauwSpotlijster.json\", \"version\": 4, \"displayname\": \"blauwSpotlijster\" } no response on succes getUploadURL(type, name, filetype,version) this function creates a signed upload url for file upload to AWS usage example var version = 1 var [jsonURL, jsonLocation] = await getUploadURL(\"home\", \"current\", \"json\", version) // creates route on aws \"/home/user_id/1_current.json\" updateTitle(collection, key, name, userID) this function: - picks up object - updates object.value.displayname - pushes object back to server example updateTitle(\"drawing\", \"12345345_geelkoe\", \"nieuwe naam\", \"`1231hh3123dasda\") updateObject(type, name, value, pub, userID) userID is optional, only necessary for admin and moderator functions. Example (addressbook): const type = \"addressbook\" const name = type + \"_\" + ManageSession.userProfile.id const value = '{\"user_id\": \"b9ae6807-1ce1-4b71-a8a3-f5958be4d340\", \"posX\": \"500\", \"posY\": \"110\"}' const pub = 2 updateObject(type, name, value, pub) getAccount(id, avatar) 0:[ { avatar_url: \"avatar/f42eb28f-9f4d-476c-9788-2240bac4cf48/current.png\", create_time: \"2021-10-11T11:32:02Z\", display_name: undefined, edge_count: 0, facebook_id: undefined, gamecenter_id: undefined, google_id: undefined, id: \"f42eb28f-9f4d-476c-9788-2240bac4cf48\", lang_tag: \"en\", location: undefined, metadata:{ azc: \"Amsterdam\", location: \"ArtworldAmsterdam\", posX: -122.62672, posY: 22.468008, role: \"speler\", user_id: \"\", } online: true, steam_id: undefined, timezone: undefined, update_time: \"2022-02-08T13:02:37Z\", url: \"https://artworldstudioplay.s3.eu-central-1.amazonaws.com/avatar/f42eb28f-9f4d-476c-9788-2240bac4cf48/current.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAR7FDNFNP252ENA7M%2F20220208%2Feu-central-1%2Fs3%2Faws4_request&X-Amz-Date=20220208T130243Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&X-Amz-Signature=fbf4c90016829b9ad0376fd0b7c96b563a0dfd16d46f0d6289287a444fa8604c\", username: \"user33\", }, ] The url is the actual avatar url, the url is called via getAccount, getUrl, but with a couple of await functions it takes a bit for the url to load via the getAccount function. getAvatar(avatar_url) uploadAvatar(data) deleteFile(type,file,user) adding data (eg locations) to the backend function updateObject(type, name, value, pub) Example: type: \"home\" (collection) name = \"hansjes huisje\" (key) value = object with keys (value) pub: permission_read (pub) updateObject(\"location\", name, value, true) listObjects(type, userID, limit, page) type = \"location\" userID = per user, null to get all users limit = how many you want to get(standard 100) page = index of limit(if limit = 100, index 0 = 1 - 100, index 1 = 101 -200, index 2 = 202 - 300 etc...) examples getting a users home object listObjects('home','5264dc23-a339-40db-bb84-e0849ded4e68') returns the object: [ { \"collection\": \"home\", \"key\": \"Amsterdam\", \"permission_read\": 2, \"permission_write\": 1, \"value\": { \"url\": \"home/5264dc23-a339-40db-bb84-e0849ded4e68/current.png\", \"posX\": 228.16, \"posY\": 57.66, \"userName\": \"user11\" }, \"version\": \"d1be852d6a66654ec9faa878fcb41b7d\", \"user_id\": \"5264dc23-a339-40db-bb84-e0849ded4e68\", \"create_time\": \"2022-01-12T12:31:53Z\", \"update_time\": \"2022-01-13T15:45:02Z\" } ] convert images convertImage(path,size, format) output: \"https://d3hkghsa3z4n1z.cloudfront.net/fit-in/64x64/filters:trim()/avatar/4ced8bff-d79c-4842-b2bd-39e9d9aa597e/current.png?signature=cbda2578e5612c70c009ebc6e0424e9025078aa94517543b310bf01eedefb167\" size and format at not both required to work, either one or both will also function for example: convertImage(path,, format) This is a replacement for getAvatar() if needed more filters can be added in the future, see: https://docs.aws.amazon.com/solutions/latest/serverless-image-handler/thumbor-filters.html listAllObjects(type, id, limit, cursor) type is eg drawing, location, etc ... id is userID(or undefined , but not null or \"\" ) limit is the max number of objects you want to receive (either by page or in total) cursor is on the first call ```undefined```` (just empty), when supplied, it defines the next page of limit-number of objects. The cursor is the last objects update time, so: objects[limit - 1].update_time Results come back within .objects array: [ { collection: \"drawing\" downloaded: true key: \"2023-01-02T21_50_42_GeelAvoceta\" permission_read: 1 read: 1 update_time: \"2023-01-20T16:55:15.02286+01:00\" user_id: \"f011a5dc-901a-42c0-9589-587b389d1e3e\" username: \"user11\" value: displayname: \"bloem\" url: \"drawing/f011a5dc-901a-42c0-9589-587b389d1e3e/0_2023-01-02T21_50_42_GeelAvoceta.png\" version: \"0\" }, ..... ] update_time: \"2023-01-20T16:55:15.02286+01:00\" of the last object is used as the cursor to get the next page of objects. validate(string,type,input) types email - validates email adresses password - validates length is betweenm 5 and 10 characters repeat password - checks if password and repeat password are identical special - checks if the value contains no special characters examples: can be used in 2 ways, inline, automatically sets border to red if fail <input type=\"text\" placeholder=\"Enter Username\" name=\"username\" id=\"username\" bind:value={username} on:keyup={async input => {await validate(username,\"special\",input)}} required /> or can used within a function as following: if(await validate(email,\"email\")){ // run action if valid } else { // run if invalid ) setLoader(state) setLoader(true) sets loading screen on setLoader(false) sets loading screen off getAllHouses(location,user_id) Gives you all the houses objects within the location, optionally add a user_id example result: [ { \"read\": 2, \"artworks\": { \"stopmotion\": 1, \"drawing\": 3 }, \"username\": \"user6\", \"key\": \"Amsterdam\", \"collection\": \"home\", \"update_time\": \"2022-08-08T15:17:06.817697+02:00\", \"permission_read\": 2, \"value\": { \"username\": \"user6\", \"url\": \"home/fcbcc269-a109-4a4b-a570-5ccafc5308d8/5_current.png\", \"posX\": -904.9999877562127, \"posY\": 72.49999139457941, \"version\": 5 }, \"user_id\": \"fcbcc269-a109-4a4b-a570-5ccafc5308d8\" },","title":"ServerCallsFormat"},{"location":"1.%20implementation/ServerCallsFormat/#uploadimagename-type-json-img-statusversion-displayname","text":"this function: - gets upload URL for json and png - uploads blobs to aws - send an object to nakama containing: { \"url\": \"drawing/5264dc23-a339-40db-bb84-e0849ded4e68/4_blauwSpotlijster.png\", \"json\": \"drawing/5264dc23-a339-40db-bb84-e0849ded4e68/4_blauwSpotlijster.json\", \"version\": 4, \"displayname\": \"blauwSpotlijster\" } no response on succes","title":"uploadImage(name, type, json, img, status,version, displayName)"},{"location":"1.%20implementation/ServerCallsFormat/#getuploadurltype-name-filetypeversion","text":"this function creates a signed upload url for file upload to AWS","title":"getUploadURL(type, name, filetype,version)"},{"location":"1.%20implementation/ServerCallsFormat/#usage-example","text":"var version = 1 var [jsonURL, jsonLocation] = await getUploadURL(\"home\", \"current\", \"json\", version) // creates route on aws \"/home/user_id/1_current.json\"","title":"usage example"},{"location":"1.%20implementation/ServerCallsFormat/#updatetitlecollection-key-name-userid","text":"this function: - picks up object - updates object.value.displayname - pushes object back to server","title":"updateTitle(collection, key, name, userID)"},{"location":"1.%20implementation/ServerCallsFormat/#example","text":"updateTitle(\"drawing\", \"12345345_geelkoe\", \"nieuwe naam\", \"`1231hh3123dasda\")","title":"example"},{"location":"1.%20implementation/ServerCallsFormat/#updateobjecttype-name-value-pub-userid","text":"userID is optional, only necessary for admin and moderator functions.","title":"updateObject(type, name, value, pub, userID)"},{"location":"1.%20implementation/ServerCallsFormat/#example-addressbook","text":"const type = \"addressbook\" const name = type + \"_\" + ManageSession.userProfile.id const value = '{\"user_id\": \"b9ae6807-1ce1-4b71-a8a3-f5958be4d340\", \"posX\": \"500\", \"posY\": \"110\"}' const pub = 2 updateObject(type, name, value, pub)","title":"Example (addressbook):"},{"location":"1.%20implementation/ServerCallsFormat/#getaccountid-avatar","text":"0:[ { avatar_url: \"avatar/f42eb28f-9f4d-476c-9788-2240bac4cf48/current.png\", create_time: \"2021-10-11T11:32:02Z\", display_name: undefined, edge_count: 0, facebook_id: undefined, gamecenter_id: undefined, google_id: undefined, id: \"f42eb28f-9f4d-476c-9788-2240bac4cf48\", lang_tag: \"en\", location: undefined, metadata:{ azc: \"Amsterdam\", location: \"ArtworldAmsterdam\", posX: -122.62672, posY: 22.468008, role: \"speler\", user_id: \"\", } online: true, steam_id: undefined, timezone: undefined, update_time: \"2022-02-08T13:02:37Z\", url: \"https://artworldstudioplay.s3.eu-central-1.amazonaws.com/avatar/f42eb28f-9f4d-476c-9788-2240bac4cf48/current.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAR7FDNFNP252ENA7M%2F20220208%2Feu-central-1%2Fs3%2Faws4_request&X-Amz-Date=20220208T130243Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&X-Amz-Signature=fbf4c90016829b9ad0376fd0b7c96b563a0dfd16d46f0d6289287a444fa8604c\", username: \"user33\", }, ] The url is the actual avatar url, the url is called via getAccount, getUrl, but with a couple of await functions it takes a bit for the url to load via the getAccount function.","title":"getAccount(id, avatar)"},{"location":"1.%20implementation/ServerCallsFormat/#getavataravatar_url","text":"","title":"getAvatar(avatar_url)"},{"location":"1.%20implementation/ServerCallsFormat/#uploadavatardata","text":"","title":"uploadAvatar(data)"},{"location":"1.%20implementation/ServerCallsFormat/#deletefiletypefileuser","text":"","title":"deleteFile(type,file,user)"},{"location":"1.%20implementation/ServerCallsFormat/#adding-data-eg-locations-to-the-backend","text":"function updateObject(type, name, value, pub) Example: type: \"home\" (collection) name = \"hansjes huisje\" (key) value = object with keys (value) pub: permission_read (pub) updateObject(\"location\", name, value, true)","title":"adding data (eg locations) to the backend"},{"location":"1.%20implementation/ServerCallsFormat/#listobjectstype-userid-limit-page","text":"type = \"location\" userID = per user, null to get all users limit = how many you want to get(standard 100) page = index of limit(if limit = 100, index 0 = 1 - 100, index 1 = 101 -200, index 2 = 202 - 300 etc...)","title":"listObjects(type, userID, limit, page)"},{"location":"1.%20implementation/ServerCallsFormat/#examples","text":"getting a users home object listObjects('home','5264dc23-a339-40db-bb84-e0849ded4e68') returns the object: [ { \"collection\": \"home\", \"key\": \"Amsterdam\", \"permission_read\": 2, \"permission_write\": 1, \"value\": { \"url\": \"home/5264dc23-a339-40db-bb84-e0849ded4e68/current.png\", \"posX\": 228.16, \"posY\": 57.66, \"userName\": \"user11\" }, \"version\": \"d1be852d6a66654ec9faa878fcb41b7d\", \"user_id\": \"5264dc23-a339-40db-bb84-e0849ded4e68\", \"create_time\": \"2022-01-12T12:31:53Z\", \"update_time\": \"2022-01-13T15:45:02Z\" } ]","title":"examples"},{"location":"1.%20implementation/ServerCallsFormat/#convert-images","text":"convertImage(path,size, format) output: \"https://d3hkghsa3z4n1z.cloudfront.net/fit-in/64x64/filters:trim()/avatar/4ced8bff-d79c-4842-b2bd-39e9d9aa597e/current.png?signature=cbda2578e5612c70c009ebc6e0424e9025078aa94517543b310bf01eedefb167\" size and format at not both required to work, either one or both will also function for example: convertImage(path,, format) This is a replacement for getAvatar() if needed more filters can be added in the future, see: https://docs.aws.amazon.com/solutions/latest/serverless-image-handler/thumbor-filters.html","title":"convert images"},{"location":"1.%20implementation/ServerCallsFormat/#listallobjectstype-id-limit-cursor","text":"type is eg drawing, location, etc ... id is userID(or undefined , but not null or \"\" ) limit is the max number of objects you want to receive (either by page or in total) cursor is on the first call ```undefined```` (just empty), when supplied, it defines the next page of limit-number of objects. The cursor is the last objects update time, so: objects[limit - 1].update_time Results come back within .objects array: [ { collection: \"drawing\" downloaded: true key: \"2023-01-02T21_50_42_GeelAvoceta\" permission_read: 1 read: 1 update_time: \"2023-01-20T16:55:15.02286+01:00\" user_id: \"f011a5dc-901a-42c0-9589-587b389d1e3e\" username: \"user11\" value: displayname: \"bloem\" url: \"drawing/f011a5dc-901a-42c0-9589-587b389d1e3e/0_2023-01-02T21_50_42_GeelAvoceta.png\" version: \"0\" }, ..... ] update_time: \"2023-01-20T16:55:15.02286+01:00\" of the last object is used as the cursor to get the next page of objects.","title":"listAllObjects(type, id, limit, cursor)"},{"location":"1.%20implementation/ServerCallsFormat/#validatestringtypeinput","text":"","title":"validate(string,type,input)"},{"location":"1.%20implementation/ServerCallsFormat/#types","text":"email - validates email adresses password - validates length is betweenm 5 and 10 characters repeat password - checks if password and repeat password are identical special - checks if the value contains no special characters","title":"types"},{"location":"1.%20implementation/ServerCallsFormat/#examples_1","text":"can be used in 2 ways, inline, automatically sets border to red if fail <input type=\"text\" placeholder=\"Enter Username\" name=\"username\" id=\"username\" bind:value={username} on:keyup={async input => {await validate(username,\"special\",input)}} required /> or can used within a function as following: if(await validate(email,\"email\")){ // run action if valid } else { // run if invalid )","title":"examples:"},{"location":"1.%20implementation/ServerCallsFormat/#setloaderstate","text":"setLoader(true) sets loading screen on setLoader(false) sets loading screen off","title":"setLoader(state)"},{"location":"1.%20implementation/ServerCallsFormat/#getallhouseslocationuser_id","text":"Gives you all the houses objects within the location, optionally add a user_id example result: [ { \"read\": 2, \"artworks\": { \"stopmotion\": 1, \"drawing\": 3 }, \"username\": \"user6\", \"key\": \"Amsterdam\", \"collection\": \"home\", \"update_time\": \"2022-08-08T15:17:06.817697+02:00\", \"permission_read\": 2, \"value\": { \"username\": \"user6\", \"url\": \"home/fcbcc269-a109-4a4b-a570-5ccafc5308d8/5_current.png\", \"posX\": -904.9999877562127, \"posY\": 72.49999139457941, \"version\": 5 }, \"user_id\": \"fcbcc269-a109-4a4b-a570-5ccafc5308d8\" },","title":"getAllHouses(location,user_id)"},{"location":"1.%20implementation/UI-scrollable-panels/","text":"","title":"UI scrollable panels"},{"location":"1.%20implementation/create_onlinePlayers_diagram/","text":"","title":"create onlinePlayers diagram"},{"location":"1.%20implementation/download_art_Images_flow/","text":"Eg a list of images to show in the billBoards, eg a rotating selection of liked images of the player. create an array of liked images in the array scene.AbriImages A if the key doesn't exist: Download the image B if the image can't be downloaded, skip the item, remove it from the array create an array with the image keys and sizes","title":"download art Images flow"},{"location":"1.%20implementation/home-and-server-OBJECT/","text":"home object: collection: \"home\" create_time: \"2022-01-19T16:31:43Z\" key: \"Amsterdam\" permission_read: 2 permission_write: 1 update_time: \"2022-01-19T16:32:27Z\" user_id: \"4c0003f0-3e3f-4b49-8aad-10db98f2d3dc\" value: posX: 184.83 posY: 312.66 url: \"home/stock/portalBlauw.png\" username: \"user22\" version: 0 version: \"0579e989a16f3e228a10d49d13dc3da6\" Get array of home objects => create home array scene.homes // scene.homesRepresented = [] filter by key = location (eg Amsterdam) => scene.homes A download the images B if image can't be downloaded, use a placeholder (should we also send a noticifation to admin?) create the home in an array scene.homesRepresented and in the scene with the image key, and posX posY from scene.homes, with the class GenerateLocation In Phaser we get a global download error event, so we are handling that in a special way: await convertImage(url, \"128\", \"png\") .then((rec) => { //console.log(\"rec\", rec) // load all the images to phaser scene.load.image(homeImageKey, rec) .on(`filecomplete-image-${homeImageKey}`, (homeImageKey) => { //delete from this.resolveErrorObjectArray this.resolveErrorObjectArray = this.resolveErrorObjectArray.filter((obj) => obj.imageKey !== homeImageKey) // console.log(\"this.resolveErrorObjectArray\", this.resolveErrorObjectArray) //create the home this.createHome(element, index, homeImageKey, scene) }, this) // put the file in the loadErrorCache, in case it doesn't load, it get's removed when it is loaded successfully this.resolveErrorObjectArray.push({ loadFunction: \"getHomeImage\", element: element, index: index, imageKey: homeImageKey, scene: scene }) scene.load.start() // start loading the image in memory }) We push the element we want to download into a global resolveErrorObjectArray with all the relevant information: 1. the element (object) 2. the index of the array it is being handled in 3. the imageKey that is already generated in the context 4. the scene it is being used in 5. the loadFunction The loadFunction we use in the error handling function to inject the image in the right array and function to that the image is put in the right place: resolveLoadError(offendingFile) { // element, index, homeImageKey, offendingFile, scene this.resolveErrorObjectArray //all loading images let resolveErrorObject = this.resolveErrorObjectArray.find(o => o.imageKey == offendingFile.key) let loadFunction = resolveErrorObject.loadFunction let element = resolveErrorObject.element let index = resolveErrorObject.index let imageKey = offendingFile.key let scene = resolveErrorObject.scene // console.log(\"element, index, homeImageKey, offendingFile, scene\", element, index, imageKey, scene) switch (loadFunction) { case (\"getHomeImage\"): console.log(\"load offendingFile again\", imageKey) scene.load.image(imageKey, './assets/ball_grey.png') .on(`filecomplete-image-${imageKey}`, (imageKey) => { //delete from this.resolveErrorObjectArray this.resolveErrorObjectArray = this.resolveErrorObjectArray.filter((obj) => obj.imageKey !== imageKey) console.log(\"this.resolveErrorObjectArray\", this.resolveErrorObjectArray) //create the home this.createHome(element, index, imageKey, scene); }, this) scene.load.start() break default: console.log(\"please state fom which function the loaderror occured!\") } }","title":"home and server OBJECT"},{"location":"1.%20implementation/icons-and-svg-FREE/","text":"Free https://www.svgrepo.com/ https://icons8.com/icons/set/svg https://freeicons.io/ https://uxwing.com/ https://simpleicons.org/ Payed https://www.flaticon.com/ https://www.freepik.com/","title":"icons and svg FREE"},{"location":"1.%20implementation/icons-and-svg-FREE/#free","text":"https://www.svgrepo.com/ https://icons8.com/icons/set/svg https://freeicons.io/ https://uxwing.com/ https://simpleicons.org/","title":"Free"},{"location":"1.%20implementation/icons-and-svg-FREE/#payed","text":"https://www.flaticon.com/ https://www.freepik.com/","title":"Payed"},{"location":"1.%20implementation/movement---player/","text":"Sending the movement over the network is now optimized: we send a moveTo command. With double tapping and swiping this is straight foreward: the player moves to a target. With keyboard moving this is not that obvious so keyboardmoving is not enabled at the moment. Because we don't want to move when we are painting on a Graffitiwall, we added a graphic in the background that detects mousePresses, everything that should disable playerMovement is above that layer. This layer sets ManageSession.playerMove to true Methods in our Move.js class moveByCursor() Sets .cursorKeyIsDown to true or false when either one of the keyboard moving keys is down movingAnimation() Plays the appropiate animation according to the movement flag that is set maybe better with events! moveByKeyboard() moves player with keyboard commands MoveObjectToTarget() General method to move the player to a goal and detect when it has arrived this.updatePositionHistory(scene) // update the url and historyTracker ManageSession.sendMoveMessage(scene, target.x, target.y, \"moveTo\") //set movement over network checkIfPlayerReachedMoveGoal stops the player when it reached the goal (with a tolerance that is speed dependent) stops the player animation when the player reached also shaked the camera when the player reaches the end of the world updatePositionHistory update the url when the player moved update the position in the history tracker aswell moveBySwiping() move by swiping with mouse or finger moveByTapping() move by double tapping with finger or mouse sendMovement() send movement over the network Links with information: physics.moveto example: https://phaser.io/examples/v3/view/physics/arcade/move-to scroll camera example: https://phaser.io/examples/v3/view/camera/scroll-view World Camera example: https://labs.phaser.io/edit.html?src=src/camera/world%20camera.js&v=3.55.2 config parameters for the camera (acceleration, drag, maxSpeed) Get world point from camera: http://labs.phaser.io/edit.html?src=src/camera/get%20world%20point.js Move And Stop At Position: https://phaser.io/examples/v3/view/physics/arcade/move-and-stop-at-position Virtual Joystick https://codepen.io/rexrainbow/pen/oyqvQY Swipe discussion https://www.html5gamedevs.com/topic/39661-creating-swiping-mechanism/ Swipe example https://www.thepolyglotdeveloper.com/2020/09/include-touch-cursor-gesture-events-phaser-game/ Swipe movement (works really well!) playerMovingBySwiping() { if (!this.input.activePointer.isDown && this.isClicking == true) { const playerX = this.player.x const playerY = this.player.y const swipeX = this.input.activePointer.upX - this.input.activePointer.downX const swipeY = this.input.activePointer.upY - this.input.activePointer.downY // console.log(\"swipeX:\") // console.log(swipeX) // console.log(\"swipeY:\") // console.log(swipeY) this.swipeAmount.x = swipeX this.swipeAmount.y = swipeY const moveSpeed = this.swipeAmount.length() console.log(\"moveSpeed:\") console.log(moveSpeed) // console.log(\"this.swipeAmount:\") // console.log(this.swipeAmount.x) // console.log(this.swipeAmount.y) // console.log(\"\") //if (Math.abs(swipeX > 10) || Math.abs(swipeY > 10)) { this.playerIsMovingByClicking = true; // trigger moving animation this.target.x = playerX + swipeX this.target.y = playerY + swipeY this.physics.moveToObject(this.player, this.target, moveSpeed * 1.5); this.isClicking = false; // if (this.input.activePointer.upY < this.input.activePointer.downY) { // this.swipeDirection = \"up\"; // } else if (this.input.activePointer.upY > this.input.activePointer.downY) { // this.swipeDirection = \"down\"; // } } else if (this.input.activePointer.isDown && this.isClicking == false) { this.isClicking = true; } this.distance = Phaser.Math.Distance.Between(this.player.x, this.player.y, this.target.x, this.target.y); // 4 is our distance tolerance, i.e. how close the source can get to the target // before it is considered as being there. The faster it moves, the more tolerance is required. if (this.playerIsMovingByClicking) { if (this.distance < 10) { this.player.body.reset(this.target.x, this.target.y); this.playerIsMovingByClicking = false } else { this.sendPlayerMovement(); } } }","title":"Movement   player"},{"location":"1.%20implementation/movement---player/#swipe-movement-works-really-well","text":"playerMovingBySwiping() { if (!this.input.activePointer.isDown && this.isClicking == true) { const playerX = this.player.x const playerY = this.player.y const swipeX = this.input.activePointer.upX - this.input.activePointer.downX const swipeY = this.input.activePointer.upY - this.input.activePointer.downY // console.log(\"swipeX:\") // console.log(swipeX) // console.log(\"swipeY:\") // console.log(swipeY) this.swipeAmount.x = swipeX this.swipeAmount.y = swipeY const moveSpeed = this.swipeAmount.length() console.log(\"moveSpeed:\") console.log(moveSpeed) // console.log(\"this.swipeAmount:\") // console.log(this.swipeAmount.x) // console.log(this.swipeAmount.y) // console.log(\"\") //if (Math.abs(swipeX > 10) || Math.abs(swipeY > 10)) { this.playerIsMovingByClicking = true; // trigger moving animation this.target.x = playerX + swipeX this.target.y = playerY + swipeY this.physics.moveToObject(this.player, this.target, moveSpeed * 1.5); this.isClicking = false; // if (this.input.activePointer.upY < this.input.activePointer.downY) { // this.swipeDirection = \"up\"; // } else if (this.input.activePointer.upY > this.input.activePointer.downY) { // this.swipeDirection = \"down\"; // } } else if (this.input.activePointer.isDown && this.isClicking == false) { this.isClicking = true; } this.distance = Phaser.Math.Distance.Between(this.player.x, this.player.y, this.target.x, this.target.y); // 4 is our distance tolerance, i.e. how close the source can get to the target // before it is considered as being there. The faster it moves, the more tolerance is required. if (this.playerIsMovingByClicking) { if (this.distance < 10) { this.player.body.reset(this.target.x, this.target.y); this.playerIsMovingByClicking = false } else { this.sendPlayerMovement(); } } }","title":"Swipe movement (works really well!)"},{"location":"1.%20implementation/movement--onlinePlayer/","text":"In ManageSession we get onlinePlayer movement via the socket, with: this.socket.onstreamdata = (streamdata) => { let data = JSON.parse(streamdata.data) The data we get is: { location: \"ArtworldAmsterdam\", posX: 50, posY: 50, user_id: \"5264dc23-a339-40db-bb84-e0849ded4e68\" }","title":"movement  onlinePlayer"},{"location":"1.%20implementation/png_Compression/","text":"to create the best looking, smallest png files with transparency: 1-step 1. pngquant: pngquant 64 --force --skip-if-larger *.png Total reduction: 70.67% 2-step [No difference to 1-step, but documented...] 1. pngcrush pngcrush is a PNG (Portable Network Graphics) file optimizer. It reduces the file size of the image by passing it through various compression methods and filters. Debian/Ubuntu users can run the following command for installation. sudo apt get install pngcrush Users of other Linux distributions can install it using their standard installation commands followed by pngcrush. After the installation is done, we can reduce the size of PNG file by running: pngcrush -brute Reduce Image Size Pngcrush Reducing PNG file size The '-brute' option takes the file through 114 filter/compression methods. The extended process consumes few seconds. Instead of applying the brute force approach, users can select filters, levels and strategies for optimization. The types of filters and other properties can be learnt through the manual pages - man pngcrush. -d [output dir] Average reduction in size: 18% After that reduce color with pngquant: pngquant 64 --force --skip-if-larger *.png Average reduction in size: 68.25% Total reduction: 70.67%","title":"png Compression"},{"location":"1.%20implementation/storage.js/","text":"Storage.js is there to create a bridge between local storage(svelte sessions and accessible arrays for Phaser) and the server storage. Achievements Likes Addressbook","title":"Storage.js"},{"location":"1.%20implementation/storage.js/#achievements","text":"","title":"Achievements"},{"location":"1.%20implementation/storage.js/#likes","text":"","title":"Likes"},{"location":"1.%20implementation/storage.js/#addressbook","text":"","title":"Addressbook"},{"location":"1.%20implementation/svelte-spa-router-query-params-demo---refactoring/","text":"","title":"Svelte spa router query params demo   refactoring"},{"location":"2.%20research%20notes/phaser3/A-canvas-can-be-used-as-a-Texture/","text":"addCanvas(key, source [, skipCache]) Creates a new Canvas Texture object from an existing Canvas element and adds it to this Texture Manager, unless skipCache is true. Parameters: Name Type Argument Default Description key string The unique string-based key of the Texture. source HTMLCanvasElement The Canvas element to form the base of the new Texture. skipCache boolean false Skip adding this Texture into the Cache? Example: https://phaser.io/examples/v3/view/textures/create-canvas addGLTexture(key, glTexture [, width] [, height]) Takes a WebGL Texture and creates a Phaser Texture from it, which is added to the Texture Manager using the given key. This allows you to then use the Texture as a normal texture for texture based Game Objects like Sprites. If the width and height arguments are omitted, but the WebGL Texture was created by Phaser\u2019s WebGL Renderer and has glTexture.width and glTexture.height properties, these values will be used instead. This is a WebGL only feature. addImage(key, source [, dataSource]) Adds a new Texture to the Texture Manager created from the given Image element. dataSource HTMLImageElement | HTMLCanvasElement addRenderTexture(key, renderTexture) Adds a Render Texture to the Texture Manager using the given key. This allows you to then use the Render Texture as a normal texture for texture based Game Objects like Sprites. renderTexture Phaser.GameObjects.RenderTexture","title":"A canvas can be used as a Texture"},{"location":"2.%20research%20notes/phaser3/Add-a-plugin-to-a-scene/","text":"Global Plugin: https://phaser.io/examples/v3/view/plugins/global-scene-plugin","title":"Add a plugin to a scene"},{"location":"2.%20research%20notes/phaser3/Background-image-repeating/","text":"","title":"Background image repeating"},{"location":"2.%20research%20notes/phaser3/Changing-the-collision-shape%2C-size%2C-mouse-input-events/","text":"All collision examples: http://labs.phaser.io/index.html?dir=physics/arcade/&q= The video explains how to set the size of the collision rectangle Eg star object set the box to 100, 200 pix, true sets it in the middle star.body.setSize(100,200, true); Change the shape to a circle: star.body.setCircle(100, -100 + star.body.halfHeight, -100 + star.body.halfWidth) Center the circle https://phaser.discourse.group/t/circular-collider-using-setcircle-is-not-centred-properly/8263/3 .setInteractive is to get pointer input events. Change the shape/ hit area like this: let star = this.add.image(100,100, \u201cstar\u201d) var shape = new Phaser.Geom.Polygon([ 0, 143, 200, 143, 220, 200, 0, 200 ]); star.setInteractive(shape, Phaser.Geom.Polygon.Contains); this.input.on(\u2018gameobjectover\u2019, function (pointer, gameObject) { gameObject.setTint(0x7878ff); console.log(\u201cmouse over\u201d) }); this.input.on(\u2018gameobjectout\u2019, function (pointer, gameObject) { gameObject.clearTint(); }); // Draw the polygon var graphics = this.add.graphics({ x: star.x, y: star.y}); graphics.lineStyle(2, 0x00aa00); graphics.beginPath(); graphics.moveTo(shape.points[0].x, shape.points[0].y); for (var i = 1; i < shape.points.length; i++) { graphics.lineTo(shape.points[i].x, shape.points[i].y); } graphics.closePath(); graphics.strokePath(); mousing over the green shape makes the start change color Mouse input with setInteractive, input area, attach input to GameObject: this.location2DialogBox = this.add.graphics(); this.location2DialogBox.fillStyle(0xfffff00, 0.4) this.location2DialogBox.fillRoundedRect(0, 0, mainWidth, mainHeight, 32) this.location2DialogBox.setVisible(false) this.realtimeTexture = this.add.renderTexture(0, 0, mainWidth, mainHeight); this.realtimeTexture.draw(this.location2DialogBox); this.realtimeTexture.setInteractive(new Phaser.Geom.Rectangle(0, 0, mainWidth, mainWidth), Phaser.Geom.Rectangle.Contains) this.realtimeTexture.on(\u2018pointerdown\u2019, () => { this.enterLocation2Scene() }); Add an existing GameObject to the physics this.physics.add.existing(Gameobject) Works also with graphics using matter physics: https://www.thepolyglotdeveloper.com/2020/08/use-matterjs-physics-sprite-collisions-phaser-game/","title":"Changing the collision shape, size, mouse input events"},{"location":"2.%20research%20notes/phaser3/DOM-elements-in-phaser-and-as-input/","text":"Css Text https://phaser.io/examples/v3/view/game-objects/dom-element/css-text Css Style Object https://phaser.io/examples/v3/view/game-objects/dom-element/css-style-object All dome examples: https://phaser.io/examples/v3/category/game-objects/dom-element","title":"DOM elements in phaser and as input"},{"location":"2.%20research%20notes/phaser3/Datamanager-system-registry/","text":"A reference to the global registry. This is a game-wide instance of the Data Manager, allowing you to exchange data between Scenes via a universal and shared point. In the default set-up you can access this from within a Scene via the this.registry property. Example: Central Data Storage and exchange between Scenes with Data Registry","title":"Datamanager system registry"},{"location":"2.%20research%20notes/phaser3/Disable-mouse-input-from-outside-the-canvas/","text":"","title":"Disable mouse input from outside the canvas"},{"location":"2.%20research%20notes/phaser3/Drag-containers-%28also-scenes%21%29/","text":"","title":"Drag containers (also scenes!)"},{"location":"2.%20research%20notes/phaser3/Drawing-ideas-and-examples-Phaser/","text":"Drawing with rope: https://phaser.io/examples/v3/view/game-objects/rope/draw-rope-gradient Draw on live texture: https://phaser.io/examples/v3/view/game-objects/render-texture/draw-on-texture erase part of texture: https://phaser.io/examples/v3/view/game-objects/render-texture/erase-part-of-render-texture Draw with sprites: https://phaser.io/examples/v3/view/input/pointer/draw-sprites color picker: https://phaser.io/examples/v3/view/game-objects/shapes/iso-draw Draw with interpolation: https://phaser.io/examples/v3/view/game-objects/render-texture/paint-interpolated Draw (with mouse or shapes) in a RenderTexture A Render Texture is a special texture that allows any number of Game Objects to be drawn to it. You can take many complex objects and draw them all to this one texture, which can they be used as the texture for other Game Object\u2019s. It\u2019s a way to generate dynamic textures at run-time that are WebGL friendly and don\u2019t invoke expensive GPU uploads. Note that under WebGL a FrameBuffer, which is what the Render Texture uses internally, cannot be anti-aliased. This means that when drawing objects such as Shapes to a Render Texture they will appear to be drawn with no aliasing, however this is a technical limitation of WebGL. To get around it, create your shape as a texture in an art package, then draw that to the Render Texture. https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.RenderTexture.htmlhttps://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.RenderTexture.html Example: https://phaser.io/examples/v3/view/game-objects/render-texture/shape-to-render-texture# Draw on live texture: https://phaser.io/examples/v3/view/game-objects/render-texture/draw-on-texture","title":"Drawing ideas and examples Phaser"},{"location":"2.%20research%20notes/phaser3/Drawing-ideas-and-examples-Phaser/#draw-with-mouse-or-shapes-in-a-rendertexture","text":"A Render Texture is a special texture that allows any number of Game Objects to be drawn to it. You can take many complex objects and draw them all to this one texture, which can they be used as the texture for other Game Object\u2019s. It\u2019s a way to generate dynamic textures at run-time that are WebGL friendly and don\u2019t invoke expensive GPU uploads. Note that under WebGL a FrameBuffer, which is what the Render Texture uses internally, cannot be anti-aliased. This means that when drawing objects such as Shapes to a Render Texture they will appear to be drawn with no aliasing, however this is a technical limitation of WebGL. To get around it, create your shape as a texture in an art package, then draw that to the Render Texture. https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.RenderTexture.htmlhttps://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.RenderTexture.html Example: https://phaser.io/examples/v3/view/game-objects/render-texture/shape-to-render-texture# Draw on live texture: https://phaser.io/examples/v3/view/game-objects/render-texture/draw-on-texture","title":"Draw (with mouse or shapes) in a RenderTexture"},{"location":"2.%20research%20notes/phaser3/Infinite-world/","text":"Top-down Infinite Terrain Generation with Phaser 3 https://learn.yorkcs.com/2019/02/25/top-down-infinite-terrain-generation-with-phaser-3/ How to Create an Infinite Climbing Game in Phaser https://www.joshmorony.com/how-to-create-an-infinite-climbing-game-in-phaser/ How to Make an Infinitely Scrolling Game with Phaser https://gamedevacademy.org/how-to-make-an-infinitely-scrolling-game-with-phaser/ Performance of really big tile maps https://phaser.discourse.group/t/performance-of-really-big-tile-maps/1192/9","title":"Infinite world"},{"location":"2.%20research%20notes/phaser3/LoaderPlugin-feedback/","text":"LoaderPlugin Good info: https://rexrainbow.github.io/phaser3-rex-notes/docs/site/loader/ When queue has loaded and completed, it can be found through the key of the event listener: this.load.once(\"complete\", (key) => {}) The key shows properties such as: totalToLoad: 5 totalFailed: 0 totalComplete: 5 Getting loading completion feedback this.load.image(key) will put the file in the queue this.load.start() starts the queue this.load.image('cakewalk'); this.load.image('flectrum'); this.load.image('fork'); this.load.start() this.load.on('complete', ...) fires when the queue is done loading all the images. this.load.on('complete', subLoadCompleted, this); function subLoadCompleted () { console.log('Load Complete') } Feedback about the download progress of a specific file this.load.on('fileprogress', function (file, value) { if (file.key === 'goldrunner') { progress.clear(); progress.fillStyle(0xffffff, 0.4); progress.fillRect(450, 500 - (value * 400), 200, value * 400); } }) this.load.on('complete', function () { progress.destroy() }) Get filecomplete on a specific file name!!! this.load.on('filecomplete-image-taikodrummaster', addImage, this) function addImage (key, file) { this.add.image(400, 300, key) } For a spritesheet: this.load.on('filecomplete-spritesheet-GAMEOVERExplosion', function (key, type, data) { // Your handler code }) Phaser.Loader.Events FILE_COMPLETE https://phaser.io/examples/v3/view/loader/loader-events/file-complete-event-with-key https://phaser.io/examples/v3/view/loader/loader-events/file-complete-event# Loader key object animation: \u0192 (key, url, dataKey, xhrSettings) aseprite: \u0192 (key, textureURL, atlasURL, textureXhrSettings, atlasXhrSettings) atlas: \u0192 (key, textureURL, atlasURL, textureXhrSettings, atlasXhrSettings) atlasXML: \u0192 (key, textureURL, atlasURL, textureXhrSettings, atlasXhrSettings) audio: \u0192 (key, urls, config, xhrSettings) audioSprite: \u0192 (key, jsonURL, audioURL, audioConfig, audioXhrSettings, jsonXhrSettings) baseURL: \"\" binary: \u0192 (key, url, dataType, xhrSettings) bitmapFont: \u0192 (key, textureURL, fontDataURL, textureXhrSettings, fontDataXhrSettings) cacheManager: CacheManager {game: Game, binary: BaseCache, bitmapFont: BaseCache, json: BaseCache, physics: BaseCache, \u2026} crossOrigin: undefined css: \u0192 (key, url, xhrSettings) glsl: \u0192 (key, url, shaderType, xhrSettings) html: \u0192 (key, url, xhrSettings) htmlTexture: \u0192 (key, url, width, height, xhrSettings) image: \u0192 (key, url, xhrSettings) inflight: Set {entries: Array(0)} json: \u0192 (key, url, dataKey, xhrSettings) list: Set {entries: Array(0)} maxParallelDownloads: 32 multiKeyIndex: 0 multiatlas: \u0192 (key, atlasURL, path, baseURL, atlasXhrSettings) obj: \u0192 (key, objURL, matURL, flipUVs, xhrSettings) pack: \u0192 (key, url, packKey, xhrSettings) path: \"\" plugin: \u0192 (key, url, start, mapping, xhrSettings) prefix: \"\" progress: 1 queue: Set {entries: Array(0)} scene: ArtworldAmsterdam {sys: Systems, worldSize: Vector2, debug: false, gameStarted: false, phaser: ArtworldAmsterdam, \u2026} sceneFile: \u0192 (key, url, xhrSettings) sceneManager: SceneManager {game: Game, keys: {\u2026}, scenes: Array(12), _pending: Array(0), _start: Array(0), \u2026} scenePlugin: \u0192 (key, url, systemKey, sceneKey, xhrSettings) script: \u0192 (key, url, xhrSettings) scripts: \u0192 (key, url, xhrSettings) spritesheet: \u0192 (key, url, frameConfig, xhrSettings) state: 3 svg: \u0192 (key, url, svgConfig, xhrSettings) systems: Systems {scene: ArtworldAmsterdam, config: 'ArtworldAmsterdam', settings: {\u2026}, game: Game, sceneUpdate: \u0192, \u2026} text: \u0192 (key, url, xhrSettings) textureManager: TextureManager {_events: Events, _eventsCount: 0, game: Game, name: 'TextureManager', list: {\u2026}, \u2026} tilemapCSV: \u0192 (key, url, xhrSettings) tilemapImpact: \u0192 (key, url, xhrSettings) tilemapTiledJSON: \u0192 (key, url, xhrSettings) totalComplete: 5 totalFailed: 0 totalToLoad: 5 unityAtlas: \u0192 (key, textureURL, atlasURL, textureXhrSettings, atlasXhrSettings) video: \u0192 (key, urls, loadEvent, asBlob, noAudio, xhrSettings) xhr: {responseType: '', async: true, user: '', password: '', timeout: 0, \u2026} xml: \u0192 (key, url, xhrSettings) _deleteQueue: Set {entries: Array(0)} _events: Events {progress: Array(2), fileprogress: Array(2), complete: Array(2)} _eventsCount: 3","title":"LoaderPlugin feedback"},{"location":"2.%20research%20notes/phaser3/LoaderPlugin-feedback/#loaderplugin","text":"Good info: https://rexrainbow.github.io/phaser3-rex-notes/docs/site/loader/ When queue has loaded and completed, it can be found through the key of the event listener: this.load.once(\"complete\", (key) => {}) The key shows properties such as: totalToLoad: 5 totalFailed: 0 totalComplete: 5","title":"LoaderPlugin"},{"location":"2.%20research%20notes/phaser3/LoaderPlugin-feedback/#getting-loading-completion-feedback","text":"this.load.image(key) will put the file in the queue this.load.start() starts the queue this.load.image('cakewalk'); this.load.image('flectrum'); this.load.image('fork'); this.load.start() this.load.on('complete', ...) fires when the queue is done loading all the images. this.load.on('complete', subLoadCompleted, this); function subLoadCompleted () { console.log('Load Complete') } Feedback about the download progress of a specific file this.load.on('fileprogress', function (file, value) { if (file.key === 'goldrunner') { progress.clear(); progress.fillStyle(0xffffff, 0.4); progress.fillRect(450, 500 - (value * 400), 200, value * 400); } }) this.load.on('complete', function () { progress.destroy() })","title":"Getting loading completion feedback"},{"location":"2.%20research%20notes/phaser3/LoaderPlugin-feedback/#get-filecomplete-on-a-specific-file-name","text":"this.load.on('filecomplete-image-taikodrummaster', addImage, this) function addImage (key, file) { this.add.image(400, 300, key) } For a spritesheet: this.load.on('filecomplete-spritesheet-GAMEOVERExplosion', function (key, type, data) { // Your handler code }) Phaser.Loader.Events FILE_COMPLETE https://phaser.io/examples/v3/view/loader/loader-events/file-complete-event-with-key https://phaser.io/examples/v3/view/loader/loader-events/file-complete-event#","title":"Get filecomplete on a specific file name!!!"},{"location":"2.%20research%20notes/phaser3/LoaderPlugin-feedback/#loader-key-object","text":"animation: \u0192 (key, url, dataKey, xhrSettings) aseprite: \u0192 (key, textureURL, atlasURL, textureXhrSettings, atlasXhrSettings) atlas: \u0192 (key, textureURL, atlasURL, textureXhrSettings, atlasXhrSettings) atlasXML: \u0192 (key, textureURL, atlasURL, textureXhrSettings, atlasXhrSettings) audio: \u0192 (key, urls, config, xhrSettings) audioSprite: \u0192 (key, jsonURL, audioURL, audioConfig, audioXhrSettings, jsonXhrSettings) baseURL: \"\" binary: \u0192 (key, url, dataType, xhrSettings) bitmapFont: \u0192 (key, textureURL, fontDataURL, textureXhrSettings, fontDataXhrSettings) cacheManager: CacheManager {game: Game, binary: BaseCache, bitmapFont: BaseCache, json: BaseCache, physics: BaseCache, \u2026} crossOrigin: undefined css: \u0192 (key, url, xhrSettings) glsl: \u0192 (key, url, shaderType, xhrSettings) html: \u0192 (key, url, xhrSettings) htmlTexture: \u0192 (key, url, width, height, xhrSettings) image: \u0192 (key, url, xhrSettings) inflight: Set {entries: Array(0)} json: \u0192 (key, url, dataKey, xhrSettings) list: Set {entries: Array(0)} maxParallelDownloads: 32 multiKeyIndex: 0 multiatlas: \u0192 (key, atlasURL, path, baseURL, atlasXhrSettings) obj: \u0192 (key, objURL, matURL, flipUVs, xhrSettings) pack: \u0192 (key, url, packKey, xhrSettings) path: \"\" plugin: \u0192 (key, url, start, mapping, xhrSettings) prefix: \"\" progress: 1 queue: Set {entries: Array(0)} scene: ArtworldAmsterdam {sys: Systems, worldSize: Vector2, debug: false, gameStarted: false, phaser: ArtworldAmsterdam, \u2026} sceneFile: \u0192 (key, url, xhrSettings) sceneManager: SceneManager {game: Game, keys: {\u2026}, scenes: Array(12), _pending: Array(0), _start: Array(0), \u2026} scenePlugin: \u0192 (key, url, systemKey, sceneKey, xhrSettings) script: \u0192 (key, url, xhrSettings) scripts: \u0192 (key, url, xhrSettings) spritesheet: \u0192 (key, url, frameConfig, xhrSettings) state: 3 svg: \u0192 (key, url, svgConfig, xhrSettings) systems: Systems {scene: ArtworldAmsterdam, config: 'ArtworldAmsterdam', settings: {\u2026}, game: Game, sceneUpdate: \u0192, \u2026} text: \u0192 (key, url, xhrSettings) textureManager: TextureManager {_events: Events, _eventsCount: 0, game: Game, name: 'TextureManager', list: {\u2026}, \u2026} tilemapCSV: \u0192 (key, url, xhrSettings) tilemapImpact: \u0192 (key, url, xhrSettings) tilemapTiledJSON: \u0192 (key, url, xhrSettings) totalComplete: 5 totalFailed: 0 totalToLoad: 5 unityAtlas: \u0192 (key, textureURL, atlasURL, textureXhrSettings, atlasXhrSettings) video: \u0192 (key, urls, loadEvent, asBlob, noAudio, xhrSettings) xhr: {responseType: '', async: true, user: '', password: '', timeout: 0, \u2026} xml: \u0192 (key, url, xhrSettings) _deleteQueue: Set {entries: Array(0)} _events: Events {progress: Array(2), fileprogress: Array(2), complete: Array(2)} _eventsCount: 3","title":"Loader key object"},{"location":"2.%20research%20notes/phaser3/No-Physics-possible-between-Scenes/","text":"are separate in that way... (tried it)","title":"No Physics possible between Scenes"},{"location":"2.%20research%20notes/phaser3/Phaser---timed-Events/","text":"Run a function on a timer, optionally looped timedEvent = this.time.addEvent({ delay: 50, callback: reduceHealth, callbackScope: this, loop: true }); Remove the timed event: timedEvent.remove(); Pass extra arguments to the timed event: this.time.addEvent({ delay: 2000, callback: this.enterLocationDialogBox, args: [player, location, show], loop: false }) standard javascript delay: setTimeout(this.enterLocationDialogBox(player, location, show), 5000); Rex Plugin: https://rexrainbow.github.io/phaser3-rex-notes/docs/site/timer/","title":"Phaser   timed Events"},{"location":"2.%20research%20notes/phaser3/Separate-UI-with-a-overlay-Scene/","text":"More on mixing scenes: https://phaser.io/examples/v3/view/input/dragging/multiple-scene-drag\">https://phaser.io/examples/v3/view/input/dragging/multiple-scene-drag","title":"Separate UI with a overlay Scene"},{"location":"2.%20research%20notes/phaser3/Speech-bubble-GRAPHIC-across-SCENES/","text":"function createSpeechBubble (scene, x, y, width, height, quote) { var bubbleWidth = width; var bubbleHeight = height; var bubblePadding = 10; var arrowHeight = bubbleHeight / 3; var bubble = scene.add.graphics({ x: x, y: y }); // Bubble shadow bubble.fillStyle(0x222222, 0.5); bubble.fillRoundedRect(6, 6, bubbleWidth, bubbleHeight, 16); // Bubble color bubble.fillStyle(0xffffff, 1); // Bubble outline line style bubble.lineStyle(4, 0x565656, 1); // Bubble shape and outline bubble.strokeRoundedRect(0, 0, bubbleWidth, bubbleHeight, 16); bubble.fillRoundedRect(0, 0, bubbleWidth, bubbleHeight, 16); // Calculate arrow coordinates var point1X = Math.floor(bubbleWidth / 4); var point1Y = bubbleHeight; var point2X = Math.floor((bubbleWidth / 4) * 1.4); var point2Y = bubbleHeight; var point3X = Math.floor(bubbleWidth / 4); var point3Y = Math.floor(bubbleHeight + arrowHeight); // Bubble arrow shadow bubble.lineStyle(4, 0x222222, 0.5); bubble.lineBetween(point2X - 1, point2Y + 6, point3X + 2, point3Y); // Bubble arrow fill bubble.fillTriangle(point1X, point1Y, point2X, point2Y, point3X, point3Y); bubble.lineStyle(2, 0x565656, 1); bubble.lineBetween(point2X, point2Y, point3X, point3Y); bubble.lineBetween(point1X, point1Y, point3X, point3Y); var content = scene.add.text(0, 0, quote, { fontFamily: 'Arial', fontSize: 20, color: '#000000', align: 'center', wordWrap: { width: bubbleWidth - (bubblePadding * 2) } }); var b = content.getBounds(); content.setPosition(bubble.x + (bubbleWidth / 2) - (b.width / 2), bubble.y + (bubbleHeight / 2) - (b.height / 2)); var container = scene.add.container(); container.add([ bubble, content ]); return container; } class SceneA extends Phaser.Scene { constructor () { super('sceneA'); } preload () { this.load.atlas('jellies', 'assets/atlas/jellies.png', 'assets/atlas/jellies.json'); } create () { let jelly = this.add.image(150, 500, 'jellies', 'WithShadow/Jelly1').setScale(0.5); let bubble1 = createSpeechBubble(this, 20, 30, 220, 80, \"Scene A\\nKey.on\").setVisible(false); let bubble2 = createSpeechBubble(this, 20, 160, 220, 80, \"Scene A\\nkeydown_SPACE\").setVisible(false); let bubble3 = createSpeechBubble(this, 20, 290, 220, 80, \"Scene A\\nkeydown\").setVisible(false); let spaceKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE); // Phase 1: Key event. // Emits only when the SPACE BAR is pressed down, and dispatches from the local Key object. // Call stopImmediatePropagation to stop it reaching the two global handlers in this Scene. // Call stopPropagation to stop it reaching any other Scene. spaceKey.on('down', function (key, event) { // event.stopPropagation(); // event.stopImmediatePropagation(); bubble1.setVisible(true); }); // Phase 2: Global keydown + keycode handler. // Emits only on the SPACE BAR keycode event, but dispatches globally. // Call stopImmediatePropagation to stop it reaching the global handler in this Scene. // Call stopPropagation to stop it reaching any other Scene. this.input.keyboard.on('keydown_SPACE', function (event) { // event.stopPropagation(); // event.stopImmediatePropagation(); bubble2.setVisible(true); }); // Phase 3: Global keydown handler. // Fires on ANY key press, so we need to check the keyCode internally. // Calling stopImmediatePropagation has no effect here, as it's the least specific handler in this Scene. // Call stopPropagation to stop it reaching any other Scene. this.input.keyboard.on('keydown', function (event) { if (event.keyCode === Phaser.Input.Keyboard.KeyCodes.SPACE) { // event.stopPropagation(); bubble3.setVisible(true); } }); // Launch the other 2 Scenes, so they are running in parallel to SceneA. this.scene.launch('sceneB'); this.scene.launch('sceneC'); } } class SceneB extends Phaser.Scene { constructor () { super('sceneC'); } create () { let jelly = this.add.image(650, 500, 'jellies', 'WithShadow/Jelly3').setScale(0.5); let bubble1 = createSpeechBubble(this, 560, 30, 220, 80, \"Scene C\\nKey.on\").setVisible(false); let bubble2 = createSpeechBubble(this, 560, 160, 220, 80, \"Scene C\\nkeydown_SPACE\").setVisible(false); let bubble3 = createSpeechBubble(this, 560, 290, 220, 80, \"Scene C\\nkeydown\").setVisible(false); let spaceKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE); // Phase 1: Key event. // Emits only when the SPACE BAR is pressed down, and dispatches from the local Key object. // Call stopImmediatePropagation to stop it reaching the two global handlers in this Scene. // Call stopPropagation to stop it reaching any other Scene. spaceKey.on('down', function (key, event) { // event.stopPropagation(); // event.stopImmediatePropagation(); bubble1.setVisible(true); }); // Phase 2: Global keydown + keycode handler. // Emits only on the SPACE BAR keycode event, but dispatches globally. // Call stopImmediatePropagation to stop it reaching the global handler in this Scene. // Call stopPropagation to stop it reaching any other Scene. this.input.keyboard.on('keydown_SPACE', function (event) { // event.stopPropagation(); // event.stopImmediatePropagation(); bubble2.setVisible(true); }); // Phase 3: Global keydown handler. // Fires on ANY key press, so we need to check the keyCode internally. // Calling stopImmediatePropagation has no effect here, as it's the least specific handler in this Scene. // Call stopPropagation to stop it reaching any other Scene. this.input.keyboard.on('keydown', function (event) { if (event.keyCode === Phaser.Input.Keyboard.KeyCodes.SPACE) { // event.stopPropagation(); bubble3.setVisible(true); } }); } } class SceneC extends Phaser.Scene { constructor () { super('sceneC'); } create () { let jelly = this.add.image(650, 500, 'jellies', 'WithShadow/Jelly3').setScale(0.5); let bubble1 = createSpeechBubble(this, 560, 30, 220, 80, \"Scene C\\nKey.on\").setVisible(false); let bubble2 = createSpeechBubble(this, 560, 160, 220, 80, \"Scene C\\nkeydown_SPACE\").setVisible(false); let bubble3 = createSpeechBubble(this, 560, 290, 220, 80, \"Scene C\\nkeydown\").setVisible(false); let spaceKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE); // Phase 1: Key event. // Emits only when the SPACE BAR is pressed down, and dispatches from the local Key object. // Call stopImmediatePropagation to stop it reaching the two global handlers in this Scene. // Call stopPropagation to stop it reaching any other Scene. spaceKey.on('down', function (key, event) { // event.stopPropagation(); // event.stopImmediatePropagation(); bubble1.setVisible(true); }); // Phase 2: Global keydown + keycode handler. // Emits only on the SPACE BAR keycode event, but dispatches globally. // Call stopImmediatePropagation to stop it reaching the global handler in this Scene. // Call stopPropagation to stop it reaching any other Scene. this.input.keyboard.on('keydown_SPACE', function (event) { // event.stopPropagation(); // event.stopImmediatePropagation(); bubble2.setVisible(true); }); // Phase 3: Global keydown handler. // Fires on ANY key press, so we need to check the keyCode internally. // Calling stopImmediatePropagation has no effect here, as it's the least specific handler in this Scene. // Call stopPropagation to stop it reaching any other Scene. this.input.keyboard.on('keydown', function (event) { if (event.keyCode === Phaser.Input.Keyboard.KeyCodes.SPACE) { // event.stopPropagation(); bubble3.setVisible(true); } }); } } const config = { type: Phaser.AUTO, width: 800, height: 600, parent: 'phaser-example', backgroundColor: '#0072bc', scene: [ SceneA, SceneB, SceneC ] }; let game = new Phaser.Game(config); constructor () { super('sceneB'); } create () { let jelly = this.add.image(400, 500, 'jellies', 'WithShadow/Jelly2').setScale(0.5); let bubble1 = createSpeechBubble(this, 290, 30, 220, 80, \"Scene B\\nKey.on\").setVisible(false); let bubble2 = createSpeechBubble(this, 290, 160, 220, 80, \"Scene B\\nkeydown_SPACE\").setVisible(false); let bubble3 = createSpeechBubble(this, 290, 290, 220, 80, \"Scene B\\nkeydown\").setVisible(false); let spaceKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE); // Phase 1: Key event. // Emits only when the SPACE BAR is pressed down, and dispatches from the local Key object. // Call stopImmediatePropagation to stop it reaching the two global handlers in this Scene. // Call stopPropagation to stop it reaching any other Scene. spaceKey.on('down', function (key, event) { // event.stopPropagation(); // event.stopImmediatePropagation(); bubble1.setVisible(true); }); // Phase 2: Global keydown + keycode handler. // Emits only on the SPACE BAR keycode event, but dispatches globally. // Call stopImmediatePropagation to stop it reaching the global handler in this Scene. // Call stopPropagation to stop it reaching any other Scene. this.input.keyboard.on('keydown_SPACE', function (event) { // event.stopPropagation(); // event.stopImmediatePropagation(); bubble2.setVisible(true); }); // Phase 3: Global keydown handler. // Fires on ANY key press, so we need to check the keyCode internally. // Calling stopImmediatePropagation has no effect here, as it's the least specific handler in this Scene. // Call stopPropagation to stop it reaching any other Scene. this.input.keyboard.on('keydown', function (event) { if (event.keyCode === Phaser.Input.Keyboard.KeyCodes.SPACE) { // event.stopPropagation(); bubble3.setVisible(true); } }); } } class SceneC extends Phaser.Scene { constructor () { super('sceneC'); } create () { let jelly = this.add.image(650, 500, 'jellies', 'WithShadow/Jelly3').setScale(0.5); let bubble1 = createSpeechBubble(this, 560, 30, 220, 80, \"Scene C\\nKey.on\").setVisible(false); let bubble2 = createSpeechBubble(this, 560, 160, 220, 80, \"Scene C\\nkeydown_SPACE\").setVisible(false); let bubble3 = createSpeechBubble(this, 560, 290, 220, 80, \"Scene C\\nkeydown\").setVisible(false); let spaceKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE); // Phase 1: Key event. // Emits only when the SPACE BAR is pressed down, and dispatches from the local Key object. // Call stopImmediatePropagation to stop it reaching the two global handlers in this Scene. // Call stopPropagation to stop it reaching any other Scene. spaceKey.on('down', function (key, event) { // event.stopPropagation(); // event.stopImmediatePropagation(); bubble1.setVisible(true); }); // Phase 2: Global keydown + keycode handler. // Emits only on the SPACE BAR keycode event, but dispatches globally. // Call stopImmediatePropagation to stop it reaching the global handler in this Scene. // Call stopPropagation to stop it reaching any other Scene. this.input.keyboard.on('keydown_SPACE', function (event) { // event.stopPropagation(); // event.stopImmediatePropagation(); bubble2.setVisible(true); }); // Phase 3: Global keydown handler. // Fires on ANY key press, so we need to check the keyCode internally. // Calling stopImmediatePropagation has no effect here, as it's the least specific handler in this Scene. // Call stopPropagation to stop it reaching any other Scene. this.input.keyboard.on('keydown', function (event) { if (event.keyCode === Phaser.Input.Keyboard.KeyCodes.SPACE) { // event.stopPropagation(); bubble3.setVisible(true); } }); } } const config = { type: Phaser.AUTO, width: 800, height: 600, parent: 'phaser-example', backgroundColor: '#0072bc', scene: [ SceneA, SceneB, SceneC ] }; let game = new Phaser.Game(config);","title":"Speech bubble GRAPHIC across SCENES"},{"location":"2.%20research%20notes/phaser3/Starting-and-stopping-scenes/","text":"scenes can be loaden on top of each other Data can be sent and gotten from a scene Scenes can be paused, restarted, launched or transitioned to https://rexrainbow.github.io/phaser3-rex-notes/docs/site/scenemanager/","title":"Starting and stopping scenes"},{"location":"2.%20research%20notes/phaser3/TextureManager/","text":"The problem with loading players avatars was that they are stored in cache after load. So we have to check whether the image is already in cache. We have to find a way to check the cache Images are stored in the TextureManager The list of all loaded assets in the TextureManager can be get with: this.textures.list This returns an object, will all the kays We can check against existing loaded images with: this.textures.exists(keyName)) You can get the raw image data like this: var tex = this.textures.get('key'); tex.getSourceImage(); You can pass getSourceImage a frame key, should the texture span multiple image files (like in a multi-texture set-up) If you\u2019ve assigned an image asset to a game object, you can find it in object.texture.source[0].image Assign a new image to an existing GameObject with: GameObject.setTexture(KeyName) https://blog.ourcade.co/posts/2020/phaser3-load-images-dynamically/","title":"TextureManager"},{"location":"2.%20research%20notes/phaser3/add-3D-to-Phaser/","text":"Build fake 3D HTML5 games with Phaser, Arcade physics, three.js and Phaser 3D library https://enable3d.io/docs.html https://enable3d.io/examples.html https://enable3d.io/examples/custom-setup.html https://enable3d.io/examples/isometric-game-orthographic-camera.html https://enable3d.io/examples/load-and-use-textures.html https://enable3d.io/examples/shape-showcase.html https://enable3d.io/examples/fbx-loader-and-animations.html discussion: https://phaser.discourse.group/t/phaser-in-3d-with-physics-yes-it-works-using-enable3d/4610/35 Sync 2D to 3D https://enable3d.io/examples/sync-2d-to-3d.html Sync 3D to 2D https://enable3d.io/examples/sync-3d-to-2d.html","title":"add 3D to Phaser"},{"location":"2.%20research%20notes/phaser3/add-scene-on-the-fly/","text":"https://phaser.io/examples/v3/view/scenes/scene-add Add Scene After Game, with passing on data Add Scene From Another Scene Add and start Scene Scene Files Payload Files specified in the Scene config files payload will be loaded in before the Scene is started, meaning they're available before even the Scene.preload function (if set) is called This is perfect for loading in small JSON config files for example, or a tiny amount of preloader assets that the preloader itself needs to use.","title":"Add scene on the fly"},{"location":"2.%20research%20notes/phaser3/automatic-Scene-loading-flag/","text":"super({ key: \u201cAZC1_Scene\u201d, active: true}); when there is a active: true flag, the scene gets loaded even when it is not the first in line. Scenes get loaded in order of the config scenes: [scene1, scene2, scene3] scene1 gets loaded first, but scene2 get loaded after that when active: true, default is: active: false","title":"automatic Scene loading flag"},{"location":"2.%20research%20notes/phaser3/camera-effects%2C-colors%2C-fade/","text":"Fade camera out from color: this.cameras.main.fadeFrom(2000, Phaser.Math.Between(50, 255), Phaser.Math.Between(50, 255), Phaser.Math.Between(50, 255)); this.cameras.main.on('camerafadeoutcomplete', function () { this.scene.restart(); }, this); Fade camera in to color: var red = Phaser.Math.Between(50, 255); var green = Phaser.Math.Between(50, 255); var blue = Phaser.Math.Between(50, 255); this.cameras.main.fade(2000, red, green, blue);","title":"Camera effects, colors, fade"},{"location":"2.%20research%20notes/phaser3/camera-follow/","text":"Camera follows player with: this.gameCam = this.cameras.main; this.gameCam.startFollow(this.player); //setBounds has to be set before follow, otherwise the camera doesn\u2019t follow! Order is: this.gameCam = this.cameras.main; this.gameCam.setBounds(0, 0, map.widthInPixels, map.heightInPixels); this.gameCam.startFollow(this.player);","title":"Camera follow"},{"location":"2.%20research%20notes/phaser3/change-Gravity-per-sce/","text":"You can specify the gravity for a particular scene by redefining the physics settings in the scene\u2019s constructor method. class FirstScene extends Phaser.Scene { constructor() { super({ key: 'first', physics: { default: 'arcade', arcade: { gravity: { y: 2000 } } } }); } Check out the API Docs to see what else can be configured on a scene-by-scene basis.","title":"change Gravity per sce"},{"location":"2.%20research%20notes/phaser3/check-world-bounds/","text":"To enable the player to collide with the world bounds (in Player): scene.player.setCollideWorldBounds(true) scene.player.onWorldBounds = true scene.player.body.onWorldBounds = true scene.player.body.checkCollision.up = true scene.player.body.checkCollision.down = true scene.player.body.checkCollision.left = true scene.player.body.checkCollision.right = true To catch the collided object with the world bounds (in the scene): this.physics.world.on('worldbounds', (collidingObject) => { })","title":"Check world bounds"},{"location":"2.%20research%20notes/phaser3/check-world-bounds/#to-enable-the-player-to-collide-with-the-world-bounds-in-player","text":"scene.player.setCollideWorldBounds(true) scene.player.onWorldBounds = true scene.player.body.onWorldBounds = true scene.player.body.checkCollision.up = true scene.player.body.checkCollision.down = true scene.player.body.checkCollision.left = true scene.player.body.checkCollision.right = true","title":"To enable the player to collide with the world bounds (in Player):"},{"location":"2.%20research%20notes/phaser3/check-world-bounds/#to-catch-the-collided-object-with-the-world-bounds-in-the-scene","text":"this.physics.world.on('worldbounds', (collidingObject) => { })","title":"To catch the collided object with the world bounds (in the scene):"},{"location":"2.%20research%20notes/phaser3/dragging/","text":"Via general purpose this.input.on(\u2018drag\u2019 var container = this.add.container(400, 300, [ bg, text ]); container.setSize(bg.width, bg.height); container.setInteractive(); this.input.setDraggable(container); this.input.on('drag', function (pointer, gameObject, dragX, dragY) { gameObject.x = dragX; gameObject.y = dragY; }); 2. Via per object .setInteractive( { draggable: true }) this.mario_star.setInteractive({ draggable: true }) this.mario_star.on('dragstart', function (pointer) { this.setTint(0xff0000); }) this.mario_star.on('drag', function (pointer, dragX, dragY) { this.x = dragX; this.y = dragY; }) this.mario_star.on('dragend', function (pointer) { this.clearTint(); }) 3. Via general input check but with with checking, turning on/off listeners https://www.youtube.com/watch?v=t56DvozbZX4&ab_channel=WClarkson var dot = this.add.image(xx, yy, \"dot\" +i dot.setInteractive() } this.input.on('pointerdown', this.startDrag, this) } startDrag(pointer, targets){ this.input.off('pointerdown', this.startDrag, this) // turn off input when there is already a target(!) this.dragObj = targets[0] //first gameObject that is hit by the mouse pointer this.input.on('pointermove', this.doDrag, this) this.input.on('pointerup', this.stopDrag, this) } doDrag(pointer) { this.dragObj.x = pointer.x this.dragObj.y = pointer.y } stopDrag(){ this.input.on('pointerdown', this.startDrag, this) // turn back on input for pointerdown(!) this.input.off('pointermove', this.doDrag, this) // turn off drag this.input.off('pointerup', this.stopDrag, this) }","title":"Dragging"},{"location":"2.%20research%20notes/phaser3/dragging/#via-general-purpose-thisinputondrag","text":"var container = this.add.container(400, 300, [ bg, text ]); container.setSize(bg.width, bg.height); container.setInteractive(); this.input.setDraggable(container); this.input.on('drag', function (pointer, gameObject, dragX, dragY) { gameObject.x = dragX; gameObject.y = dragY; });","title":"Via general purpose this.input.on(\u2018drag\u2019"},{"location":"2.%20research%20notes/phaser3/dragging/#2-via-per-object-setinteractive-draggable-true","text":"this.mario_star.setInteractive({ draggable: true }) this.mario_star.on('dragstart', function (pointer) { this.setTint(0xff0000); }) this.mario_star.on('drag', function (pointer, dragX, dragY) { this.x = dragX; this.y = dragY; }) this.mario_star.on('dragend', function (pointer) { this.clearTint(); })","title":"2. Via per object .setInteractive( { draggable: true })"},{"location":"2.%20research%20notes/phaser3/dragging/#3-via-general-input-check-but-with-with-checking-turning-onoff-listeners","text":"https://www.youtube.com/watch?v=t56DvozbZX4&ab_channel=WClarkson var dot = this.add.image(xx, yy, \"dot\" +i dot.setInteractive() } this.input.on('pointerdown', this.startDrag, this) } startDrag(pointer, targets){ this.input.off('pointerdown', this.startDrag, this) // turn off input when there is already a target(!) this.dragObj = targets[0] //first gameObject that is hit by the mouse pointer this.input.on('pointermove', this.doDrag, this) this.input.on('pointerup', this.stopDrag, this) } doDrag(pointer) { this.dragObj.x = pointer.x this.dragObj.y = pointer.y } stopDrag(){ this.input.on('pointerdown', this.startDrag, this) // turn back on input for pointerdown(!) this.input.off('pointermove', this.doDrag, this) // turn off drag this.input.off('pointerup', this.stopDrag, this) }","title":"3. Via general input check but with with checking, turning on/off listeners"},{"location":"2.%20research%20notes/phaser3/groups-vs-containers/","text":"We want to get a list of all Network Players. getChildren() can be called Groups can be used to get the members with getChildren() Children of the group can\u2019t be moved with the grouping Containers can be used to move members. does not work: * this.getChildren() * this.scene.getChildren() * this.Scene.getChildren() Works: * Group.getChildren() group.create(400, 300, \u2018phaser\u2019); // The above is a short-cut for: // var sprite = this.add.sprite(400, 300, 'phaser'); // group.add(sprite); Sprite pool example https://phaser.io/examples/v3/view/game-objects/group/sprite-pool Group createCallback group = this.add.group({ defaultKey: \u2018alien\u2019, maxSize: 100, createCallback: function (alien) { alien.setName(\u2018alien\u2019 + this.getLength()); console.log(\u2018Created\u2019, alien.name); }, removeCallback: function (alien) { console.log(\u2018Removed\u2019, alien.name); } this.time.addEvent({ delay: 100, loop: true, callback: addAlien }); group.children.iterate // Find first inactive sprite in group or add new sprite, and set position const alien = group.get(x, y);","title":"Groups vs containers"},{"location":"2.%20research%20notes/phaser3/loading-and-preloading/","text":"Create a preloading scene, show percentage loaded: https://gamedevacademy.org/creating-a-preloading-screen-in-phaser-3/?a=13 dealing cards example https://blog.ourcade.co/posts/2020/phaser3-load-images-dynamically/ phaser loader events https://newdocs.phaser.io/docs/3.55.2/events FILE_KEY_COMPLETE event https://newdocs.phaser.io/docs/3.55.2/Phaser.Loader.Events.FILE_KEY_COMPLETE FILE_PROGRESS event https://newdocs.phaser.io/docs/3.55.2/Phaser.Loader.Events.FILE_PROGRESS Loading User Avatar - during runtime his.load.image( this.playerAvatarName, manageSession.playerObjectSelf.url ); } this.load.once(Phaser.Loader.Events.COMPLETE, () => { // texture loaded so use instead of the placeholder this.player.setTexture(this.playerAvatarKey) console.log(\u201cplayer avatar has loaded \u201c) }) } this.load.start(); // load the image in memory The event to load a image or sprite works. I need to see if my method is save enough; I set a flag when the player is created (this.createdPlayer = true) Maybe it is saver to first create a general player, and then when the avatar is loaded, replace the image or sprite with this.player.setTexture(key, frame) heart1.setTexture(key [, frame]) https://www.html5gamedevs.com/topic/41170-how-can-i-change-the-image-of-a-sprite-during-update-function/ img.setTexture(key, frame) https://phaser.discourse.group/t/how-to-switch-sprites-of-a-game-object/297/3 See also phaser API: https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.Image.html https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.Sprite.html","title":"Loading and preloading"},{"location":"2.%20research%20notes/phaser3/loading-and-preloading/#loading-user-avatar-during-runtime","text":"his.load.image( this.playerAvatarName, manageSession.playerObjectSelf.url ); } this.load.once(Phaser.Loader.Events.COMPLETE, () => { // texture loaded so use instead of the placeholder this.player.setTexture(this.playerAvatarKey) console.log(\u201cplayer avatar has loaded \u201c) }) } this.load.start(); // load the image in memory The event to load a image or sprite works. I need to see if my method is save enough; I set a flag when the player is created (this.createdPlayer = true) Maybe it is saver to first create a general player, and then when the avatar is loaded, replace the image or sprite with this.player.setTexture(key, frame) heart1.setTexture(key [, frame]) https://www.html5gamedevs.com/topic/41170-how-can-i-change-the-image-of-a-sprite-during-update-function/ img.setTexture(key, frame) https://phaser.discourse.group/t/how-to-switch-sprites-of-a-game-object/297/3 See also phaser API: https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.Image.html https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.Sprite.html","title":"Loading User Avatar - during runtime"},{"location":"2.%20research%20notes/phaser3/pause-and-resume-a-scene/","text":"sleep and wake scene https://phaser.io/examples/v3/view/scenes/sleep-and-wake","title":"Pause and resume a scene"},{"location":"2.%20research%20notes/phaser3/physics---overlap/","text":"Standard use: GameObject1, GameObject2, functions, (processCallback), scope function: An optional callback function that is called if the objects collide. processCallback An optional callback function that lets you perform additional checks against the two objects if they collide. If this is set then collideCallback will only be called if this callback returns true. Example: this.physics.add.overlap(this.player, this.location2, this.confirmEnterLocation, null, this); The 2 Objects are automatically passed as arguments, the sprite as the first (https://phaser.discourse.group/t/passing-argments-into-functions/4411/2) So this is passed on to the function as such: confirmEnterLocation(player, location) { console.log(player) //Object 1 console.log(location) //Object 2 } OVERLAP ZONE: https://phaser.io/examples/v3/view/physics/arcade/overlap-zone","title":"Physics   overlap"},{"location":"2.%20research%20notes/phaser3/scaling-the-game---res-and-ppi/","text":"The best summary: https://www.joshmorony.com/how-to-scale-a-game-for-all-device-sizes-in-phaser/ ```game = new Phaser.Game( window.innerWidth * window.devicePixelRatio, window.innerHeight * window.devicePixelRatio, Phaser.CANVAS, 'gameArea' ); Scaling Game Assets The other issue we run into when scaling is with the size of graphical assets (i.e player sprites, objects and so on). If you create some object at 300 x 300 pixels and it looks great on a device with a DPR of 1 (i.e your desktop computer or an iPhone 4) it will probably look teeny tiny on devices with a higher DPR. Take the iPhone 5 for example again, although the object is 300 x 300 pixels it will only look like it's 150 x 150 pixels. We need the asset to be twice as big for iPhone 5's, so how do we handle this? What you can do is create the object to suit the highest DPR you are supporting, which will likely be 3. This means that your 300 x 300 object should actually be 900 x 900. Then we scale it down in game to suit the device that it is actually on. On a device with a DPR of 3 we do nothing, with a DPR of 2 we will scale it down to 2/3rds of it's original size and for a device with a DPR of 1 we will scale it down to 1/3rd of its original size. To do this, first you need to figure out what this scaleRatio is. Create a new globally stored variable with the following code: scaleRatio = window.devicePixelRatio / 3 and now whenever you add a new asset to the game, call the following method to scale it appropriately: myAsset.scale.setTo(scaleRatio, scaleRatio) ``` Now your asset will scale appropriately no matter what device your game is loaded on. many examples of fitting and scaling, resizing: https://phaser.io/examples/v3/category/scalemanager Basics to Deal with Multiple Resolutions & Device Pixel Density in Phaser 3","title":"Scaling the game   res and ppi"},{"location":"2.%20research%20notes/phaser3/sending-data-to-scenes/","text":"passing data to a scene https://phaser.io/examples/v3/view/scenes/passing-data-to-a-scene sending events to scenes: https://phaser.io/examples/v3/view/scenes/ui-scene","title":"Sending data to scenes"},{"location":"2.%20research%20notes/phaser3/using-classes-for-GameObjects-and-extending-Phaser-Classes/","text":"Phaser example extending arcade sprite: https://phaser.io/examples/v3/view/physics/arcade/extending-arcade-sprite Extending sprite with object as arguments: https://phasergames.com/extend-a-sprite-in-phaser-3/?mc_cid=3f4ee26e5d&mc_eid=a4d9ee0291 Creating a button with the extended container class: https://braelynnn.medium.com/extending-a-phaser-class-to-make-reusable-game-objects-93c11326787e","title":"using classes for GameObjects and extending Phaser Classes"},{"location":"2.%20research%20notes/phaser3/xperimenting-with-different-backgrounds/","text":"Grid var g1 = this.add.grid(0, 0, 3200, 3200, 32, 32, 0xFFFFFF) Map with dot as Tileset The map is still generated as an image, so there is no benefit when zooming in. Dot repeating with grid methods let group = this.add.group({ key: 'dot', repeat: 8000, setX: { x: 0, y: 0, stepX: 64 } }); Phaser.Actions.GridAlign(group.getChildren(), { width: 100, height: 200, cellWidth: 64, cellHeight: 64, x: 16, y: 16 }); There is not a sharpness advantage, because the SVG is being converted to an image when loading. You can preload the SVG scaled, that will actually create a scaled up image. See: https://phaser.io/examples/v3/view/loader/svg/load-svg-with-scale graphics elements let circles = [] <br><br>const graphics = this.add.graphics();<br><br>graphics.fillStyle(0xffffff); <br>graphics.fillRect(0, 0, 3000, 3000);<br><br>graphics.fillStyle(color, alpha); const offset = 50 <br>for (let i = 0; i &lt; 2000; i += offset) { <br>for (let j = 0; j &lt; 2000; j += offset) { <br>circles[i] = graphics.fillCircle(i, j, 2); This works but there is slowness when loading the array, and when the player is moving accross the field the graphics scrolling is not smooth This works really well: Here is a way to generate patterns on a texture with an array: et cross = [ '.....', '..1..', '.111.', '..1..', '.....', ] //generate the texture from the array this.textures.generate('cross', { data: cross, pixelWidth: 4 }); //display the texture on an image const gridWidth = 4000 const offset = 40 for (let i=0;i< gridWidth; i += offset){ for (let j=0;j< gridWidth; j += offset){ this.add.image(i, j, 'cross').setOrigin(0, 1); } } Draw a shape to a texture, and repeat it there. Slow to generate, but fast after that. // //display the texture on an image const gridWidth = 4000 const offset = 50 let rt = this.add.renderTexture(0, 0, gridWidth, gridWidth); let circle = this.add.circle(-1000, -1000, 6, 0x6666ff) for (let i = 0; i < gridWidth; i += offset) { for (let j = 0; j < gridWidth; j += offset) { rt.draw(circle, i, j); } } let cross = [ '.....', '..1..', '.111.', '..1..', '.....', ] //generate the texture from the array this.textures.generate('cross', { data: cross, pixelWidth: 2 }); //display the texture on an image const gridWidth = 4000 const offset = 50 for (let i = 0; i < gridWidth; i += offset) { for (let j = 0; j < gridWidth; j += offset) { this.add.image(i, j, 'cross').setOrigin(0, 1); } } let graphics = this.add.graphics(); graphics.fillStyle(0x0000ff, 1); graphics.fillCircle(800, 300, 200); for (let i = 0; i < 250; i += 60) { graphics.lineStyle(5, 0xFF00FF, 1.0); graphics.beginPath(); graphics.moveTo(800, 200 + i); graphics.lineTo(1200, 200 + i); graphics.closePath(); graphics.strokePath(); } for (let i = 0; i < 250; i += 60) { graphics.lineStyle(5, 0xFF00FF, 1.0); graphics.beginPath(); graphics.moveTo(900 + i, 150); graphics.lineTo(900 + i, 550); graphics.closePath(); graphics.strokePath(); } let rectangle = this.add.graphics(); rectangle.setVisible(false); rectangle.fillGradientStyle(0xff0000, 0xff0000, 0xffff00, 0xffff00, 1); rectangle.fillRect(0, 0, 400, 400); let rt = this.add.renderTexture(200, 100, 600, 600); let rt2 = this.add.renderTexture(100, 600, 600, 600); rt.draw(rectangle); rt2.draw(rectangle); let eraser = this.add.circle(0, 0, 190, 0x000000); eraser.setVisible(false); rt.erase(eraser, 200, 200); rt2.erase(rt, 0, 0) rt2.x = 400 rt2.y = 600","title":"Xperimenting with different backgrounds"},{"location":"2.%20research%20notes/phaser3/xperimenting-with-different-backgrounds/#grid","text":"var g1 = this.add.grid(0, 0, 3200, 3200, 32, 32, 0xFFFFFF)","title":"Grid"},{"location":"2.%20research%20notes/phaser3/xperimenting-with-different-backgrounds/#map-with-dot-as-tileset","text":"The map is still generated as an image, so there is no benefit when zooming in.","title":"Map with dot as Tileset"},{"location":"2.%20research%20notes/phaser3/xperimenting-with-different-backgrounds/#dot-repeating-with-grid-methods","text":"let group = this.add.group({ key: 'dot', repeat: 8000, setX: { x: 0, y: 0, stepX: 64 } }); Phaser.Actions.GridAlign(group.getChildren(), { width: 100, height: 200, cellWidth: 64, cellHeight: 64, x: 16, y: 16 }); There is not a sharpness advantage, because the SVG is being converted to an image when loading. You can preload the SVG scaled, that will actually create a scaled up image. See: https://phaser.io/examples/v3/view/loader/svg/load-svg-with-scale","title":"Dot repeating with grid methods"},{"location":"2.%20research%20notes/phaser3/xperimenting-with-different-backgrounds/#graphics-elements","text":"let circles = [] <br><br>const graphics = this.add.graphics();<br><br>graphics.fillStyle(0xffffff); <br>graphics.fillRect(0, 0, 3000, 3000);<br><br>graphics.fillStyle(color, alpha); const offset = 50 <br>for (let i = 0; i &lt; 2000; i += offset) { <br>for (let j = 0; j &lt; 2000; j += offset) { <br>circles[i] = graphics.fillCircle(i, j, 2); This works but there is slowness when loading the array, and when the player is moving accross the field the graphics scrolling is not smooth","title":"graphics elements"},{"location":"2.%20research%20notes/phaser3/xperimenting-with-different-backgrounds/#this-works-really-well","text":"","title":"This works really well:"},{"location":"2.%20research%20notes/phaser3/xperimenting-with-different-backgrounds/#here-is-a-way-to-generate-patterns-on-a-texture-with-an-array","text":"et cross = [ '.....', '..1..', '.111.', '..1..', '.....', ] //generate the texture from the array this.textures.generate('cross', { data: cross, pixelWidth: 4 }); //display the texture on an image const gridWidth = 4000 const offset = 40 for (let i=0;i< gridWidth; i += offset){ for (let j=0;j< gridWidth; j += offset){ this.add.image(i, j, 'cross').setOrigin(0, 1); } } Draw a shape to a texture, and repeat it there. Slow to generate, but fast after that. // //display the texture on an image const gridWidth = 4000 const offset = 50 let rt = this.add.renderTexture(0, 0, gridWidth, gridWidth); let circle = this.add.circle(-1000, -1000, 6, 0x6666ff) for (let i = 0; i < gridWidth; i += offset) { for (let j = 0; j < gridWidth; j += offset) { rt.draw(circle, i, j); } } let cross = [ '.....', '..1..', '.111.', '..1..', '.....', ] //generate the texture from the array this.textures.generate('cross', { data: cross, pixelWidth: 2 }); //display the texture on an image const gridWidth = 4000 const offset = 50 for (let i = 0; i < gridWidth; i += offset) { for (let j = 0; j < gridWidth; j += offset) { this.add.image(i, j, 'cross').setOrigin(0, 1); } } let graphics = this.add.graphics(); graphics.fillStyle(0x0000ff, 1); graphics.fillCircle(800, 300, 200); for (let i = 0; i < 250; i += 60) { graphics.lineStyle(5, 0xFF00FF, 1.0); graphics.beginPath(); graphics.moveTo(800, 200 + i); graphics.lineTo(1200, 200 + i); graphics.closePath(); graphics.strokePath(); } for (let i = 0; i < 250; i += 60) { graphics.lineStyle(5, 0xFF00FF, 1.0); graphics.beginPath(); graphics.moveTo(900 + i, 150); graphics.lineTo(900 + i, 550); graphics.closePath(); graphics.strokePath(); } let rectangle = this.add.graphics(); rectangle.setVisible(false); rectangle.fillGradientStyle(0xff0000, 0xff0000, 0xffff00, 0xffff00, 1); rectangle.fillRect(0, 0, 400, 400); let rt = this.add.renderTexture(200, 100, 600, 600); let rt2 = this.add.renderTexture(100, 600, 600, 600); rt.draw(rectangle); rt2.draw(rectangle); let eraser = this.add.circle(0, 0, 190, 0x000000); eraser.setVisible(false); rt.erase(eraser, 200, 200); rt2.erase(rt, 0, 0) rt2.x = 400 rt2.y = 600","title":"Here is a way to generate patterns on a texture with an array:"}]}